<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>osa1.net - All posts</title>
    <link href="http://osa1.net/rss.xml" rel="self" />
    <link href="http://osa1.net" />
    <id>http://osa1.net/rss.xml</id>
    <author>
        <name>Ömer Sinan Ağacan</name>
        <email>omeragacan@gmail.com</email>
    </author>
    <updated>2024-10-21T00:00:00Z</updated>
    <entry>
    <title>Subtyping and subsumption</title>
    <link href="http://osa1.net/posts/2024-10-21-subtyping-subsumption.html" />
    <id>http://osa1.net/posts/2024-10-21-subtyping-subsumption.html</id>
    <published>2024-10-21T00:00:00Z</published>
    <updated>2024-10-21T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Subtyping is a relation between two types. It often comes with a typing rule called “subsumption”, which says that if type B is a subtype of type A (usually shown as <code>B &lt;: A</code>), then a value of type B can be assumed to have type A.</p>
<p>The crucial part is that subsumption is <em>implicit</em>, the programmer doesn’t explicitly cast the value with type <code>B</code> to type <code>A</code>.</p>
<p>When we make an operation implicit in a language, we need to make sure that it is (1) safe (2) performant. Users will be doing it without realizing, and we don’t want to accidentally break things or make them slow.</p>
<p>Let’s consider how we can make subsumption safe and performant.</p>
<h1 id="safety-of-subsumption">Safety of subsumption</h1>
<p>Different languages give different safety guarantees. High-level languages often guarantee:</p>
<ol type="1">
<li><p>Memory safety: a memory read or write shouldn’t cause undefined behavior.</p>
<p>Examples: out-of-bounds array accesses should be caught, dangling pointers shouldn’t be allowed or dereferencing them should be caught in runtime.</p></li>
<li><p>Type safety: static guarantees of the language’s type system should be uphold.</p>
<p>Example: if I have a function <code>f : A -&gt; B</code> and a value <code>x : A</code> after subsumption, <code>f(x)</code> shouldn’t fail in compile time or runtime.</p></li>
</ol>
<p>There could be different safeties that the language guarantees. Some of those safeties may also be checked in runtime instead of compile time.</p>
<p>Whatever safeties the language guarantees, they must be preserved with subsumption.</p>
<p>From a programmer’s perspective however, these are not enough to make sure that the program will work as before when subsumption is used. If I can pass a value of type <code>B</code> where <code>A</code> is expected, I need to make sure <code>B</code>, when used as <code>A</code>, acts like <code>A</code>.</p>
<p>This is called “behavioral subtyping” (or “substitutability”), and it depends on not the types of <code>A</code>’s operations but the observable behaviors of <code>A</code> and its subtypes.</p>
<p>I don’t have a good real-world example of this, but you can imagine two types with the same public APIs that work differently. Since the public APIs are the same one can be made subtype of the other and (1) and (2) would still be satisfied, but doing that would cause bugs when one is accidentally passed as the other.</p>
<h1 id="performance-of-subsumption">Performance of subsumption</h1>
<p>Definition of “fast” or “performant” also depends on the language. A C++ programmer’s fast and Python programmer’s fast are often not the same.</p>
<p>However in general, heap allocation should be avoided.</p>
<p>Object-oriented languages (as defined in my <a href="https://osa1.net/posts/2024-10-09-oop-good.html">previous post</a>) without multiple inheritance can often implement subsumption of reference values as no-op, i.e. values of type <code>B</code> work as <code>A</code> in runtime without any changes or copying.</p>
<p>Multiple inheritance makes things more complicated, but a reference to an object can still be converted to a reference of one of its supertypes by just <a href="https://people.montefiore.uliege.be/declercq/INFO0004/documents/vtable.html">adjusting the pointer value</a>.</p>
<p>With unboxed/value types, conceptually, the value needs to be copied as its supertype, but that operation is often no-op. Consider an unboxed record <code>(x: Int, y: Int, z: Int)</code> that we store in a variable <code>a</code>. In runtime, <code>a</code> actually holds multiple stack locations or registers. When we copy it as <code>let b: (x: Int, y: Int) = a</code>, we don’t have to allocate new stack locations for <code>b.x</code> and <code>b.y</code>, we just map those locations to the same locations as <code>a.x</code> and <code>a.y</code>. When we pass <code>b</code> to a function, we pass <code>a.x</code> and <code>a.y</code>.</p>
<p>Where copying becomes a requirement and prohibitive is when you have something like <code>ReadOnlyList&lt;(x: Int, y: Int, z: Int)&gt;</code> and want to upcast it to <code>ReadOnlyList&lt;(x: Int, y: Int)&gt;</code> (the records are unboxed). From the safety perspective this operation is fine, but you have to allocate a new list and copy all the values.</p>
<p>I think this is rarely a problem in practice though, because most generic types, like <code>List&lt;T&gt;</code>, end up being invariant in <code>T</code> anyway, because their API often uses <code>T</code> in both covariant and contravariant positions. So <code>List&lt;(x: Int, y: Int)&gt;</code> is not a supertype of <code>List&lt;(x: Int, y: Int, z: Int)&gt;</code> and subsumption does not apply.</p>
<h1 id="no-conclusions-this-time">No conclusions this time</h1>
<p>In this short post I just wanted to give some definitions that I’m hoping to refer to in future posts.</p>]]></summary>
</entry>
<entry>
    <title>OOP is not that bad, actually</title>
    <link href="http://osa1.net/posts/2024-10-09-oop-good.html" />
    <id>http://osa1.net/posts/2024-10-09-oop-good.html</id>
    <published>2024-10-09T00:00:00Z</published>
    <updated>2024-10-09T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>OOP is certainly not my favorite paradigm, but I think mainstream statically-typed OOP does a few things right that are very important for programming with many people, over long periods of time.</p>
<p>In this post I want to explain what I think is the most important one of these things that the mainstream statically-typed OOP languages do well.</p>
<p>I will then compare the OOP code with Haskell, to try to make the point that OOP is not as bad in everything as some functional programmers seem to think.</p>
<h1 id="what-even-is-oop">What even is OOP?</h1>
<p>In this post I use the word “OOP” to mean programming in statically-typed language with:</p>
<ol type="1">
<li>Classes, that combine state and methods that can modify the state.</li>
<li>Inheritance, which allows classes to reuse state and methods of other classes.</li>
<li>Subtyping, where if a type <code>B</code> implements the public interface of type <code>A</code>, values of type <code>B</code> can be passed as <code>A</code>.</li>
<li>Virtual calls, where receiver class of a method call is not determined by the static type of the receiver but it’s runtime type.</li>
</ol>
<p>Examples of OO languages according to this definition: C++, Java, C#, Dart.</p>
<h1 id="an-example-of-what-this-allows">An example of what this allows</h1>
<p>This set of features allows a simple and convenient way of developing composable libraries, and extending the libraries with new functionality in a backwards compatible way.</p>
<p>It’s probably best explained with an example. Suppose we have a simple logger library:</p>
<pre><code>class Logger {
  // Private constructor: initializes state, returns an instance of `Logger`.
  Logger._();

  // Public factory: can return `Logger` or any of the subtypes.
  factory Logger() =&gt; Logger._();

  void log(String message, Severity severity) { /* ... */ }
}

enum Severity {
  Info,
  Error,
  Fatal,
}</code></pre>
<p>and another library that does some database stuff:</p>
<pre><code>class DatabaseHandle {
  /* ... */
}</code></pre>
<p>and an application that uses both:</p>
<pre><code>class MyApp {
  final Logger _logger;
  final DatabaseHandle _dbHandle;

  MyApp()
      : _logger = Logger(),
        _dbHandle = DatabaseHandle(...);
}</code></pre>
<p>As is usually the case, things that make network connections, change shared state etc. need to be mocked, faked, or stubbed to be able to test applications. We may also want to extend the libraries with new functionality. With the features that we have, we don’t have to see this coming and prepare the types based on this.</p>
<p>In the first iteration we might just add a concrete class that is just the copy of the current class, and make the current class abstract:</p>
<pre><code>// The class is now abstract.
abstract class Logger {
  // Public factory now returns an instance of a concrete subtype.
  factory Logger() =&gt; _SimpleLogger();

  Logger._();

  // `log` is now abstract.
  void log(String message, Severity severity);
}

class _SimpleLogger extends Logger {
  factory _SimpleLogger() =&gt; _SimpleLogger._();

  _SimpleLogger._() : super._() {/* ... */}

  @override
  void log(String message, Severity severity) {/* ... */}
}</code></pre>
<p>This change is backwards compatible, requires no changes in user code.</p>
<p>Now we might add more implementations, e.g. for ignoring log messages:</p>
<pre><code>abstract class Logger {
  factory Logger() =&gt; _SimpleLogger();

  // New.
  factory Logger.ignoring() =&gt; _IgnoringLogger();

  Logger._();

  void log(String message, Severity severity);
}

class _IgnoringLogger extends Logger {
  factory _IgnoringLogger() =&gt; _IgnoringLogger._();

  _IgnoringLogger._() : super._() {}

  @override
  void log(String message, Severity severity) {}
}</code></pre>
<p>Similarly we can add a logger that logs to a file, to a DB, etc.</p>
<p>We can do the same for the database handle class, but for mocking, faking, or stubbing, in tests.</p>
<p>To be able to use these new subtypes in our app, we implement a factory, or add a constructor to allow passing a logger and a db handle:</p>
<pre><code>class MyApp {
  final Logger _logger;
  final DatabaseHandle _dbHandle;

  MyApp()
      : _logger = Logger(),
        _dbHandle = DatabaseHandle();

  MyApp.withLoggerAndDb(this._logger, this._dbHandle);
}</code></pre>
<p>Note that we did not have to change any types, or add type parameters. Any methods of <code>MyApp</code> that use the <code>_logger</code> and <code>_dbHandle</code> fields do not have to know about the changes.</p>
<p>Now suppose one of the <code>DatabaseHandle</code> implementations also start using the logger library:</p>
<pre><code>abstract class DatabaseHandle {
  factory DatabaseHandle.withLogger(Logger logger) =&gt;
      _LoggingDatabaseHandle._(logger);

  factory DatabaseHandle() =&gt; _LoggingDatabaseHandle._(Logger.ignoring());

  DatabaseHandle._();

  /* ... */
}

class _LoggingDatabaseHandle extends DatabaseHandle {
  final Logger _logger;

  _LoggingDatabaseHandle._(this._logger) : super._();

  /* ... */
}</code></pre>
<p>In our app, we might test by disabling logging in the db library, but start logging db operations in production:</p>
<pre><code>class MyApp {
  // New
  MyApp.testingSetup()
      : _logger = Logger(),
        _dbHandle = DatabaseHandle.withLogger(Logger.ignoring());

  // Updated to start using the logging feature of the DB library.
  MyApp()
      : _logger = Logger(),
        _dbHandle = DatabaseHandle.withLogger(Logger.toFile(...));

  /* ... */
}</code></pre>
<p>As an example that adds more state to the types, we can add a logger implementation that only logs messages above certain severity:</p>
<pre><code>class _LogAboveSeverity extends _SimpleLogger {
  // Only logs messages with this severity or more severe.
  final Severity _severity;

  _LogAboveSeverity(this._severity) : super._();

  @override
  void log(String message, Severity severity) { /* ... */ }
}</code></pre>
<p>We can add another factory to the <code>Logger</code> abstract class that returns this type, or we can even implement this in another library:</p>
<pre><code>// Implemented in another library, not in `Logger`&#39;s library.
class LogAboveSeverity implements Logger {
  // Only logs messages with this severity or more severe.
  final Severity _severity;

  final Logger _logger;

  LogAboveSeverity(this._severity) : _logger = Logger();

  LogAboveSeverity.withLogger(this._severity, this._logger);

  @override
  void log(String message, Severity severity) { /* ... */ }
}</code></pre>
<p>As a final example to demonstrate adding more operations (rather than more state), we can have a logger that logs to a file, with a <code>flush</code> operation:</p>
<pre><code>class FileLogger implements Logger {
  final File _file;

  FileLogger(this._file);

  @override
  void log(String message, Severity severity) {/* ... */}

  void flush() {/* ... */}
}</code></pre>
<p>In summary:</p>
<ul>
<li>We started with a simple logging and database library and wrote an app.</li>
<li>We added more capabilities to the logging and database libraries for testing and also in production use. In particular, we added:
<ul>
<li>New functionality to the logger library, to disable logging, or logging to a file.</li>
<li>A new dependency to the database library for logging database operations. We also allowed the users to override the default logger used.</li>
</ul></li>
</ul>
<p>Crucially, we didn’t have to change any types while doing these changes, and the new code is still as type safe as before.</p>
<p>The logger and database libraries evolved in a completely backwards compatible way.</p>
<p>Since none of the types used in our application changed, <code>MyApp</code> methods didn’t have to change at all.</p>
<p>When we decide to take advantage of the new functionality, we updated only how we construct the logger and db handle instances in our app. Rest of the app didn’t change.</p>
<p>Now let’s consider how something like this could be done in Haskell.</p>
<h1 id="attempting-it-in-haskell">Attempting it in Haskell</h1>
<p>Immediately at the start, we have a few choices on how to represent it.</p>
<p><strong>Option 1:</strong> An ADT, with callback fields to be able to add different types of loggers later:</p>
<pre><code>data Logger = MkLogger
    { _log :: Message -&gt; Severity -&gt; IO ()
    }

simpleLogger :: IO Logger

data Severity = Info | Error | Fatal
    deriving (Eq, Ord)

log :: Logger -&gt; String -&gt; Severity -&gt; IO ()</code></pre>
<p>In this representation, extra state like the minimum severity level in our <code>_LogAboveSeverity</code> is not added to the type, but captured by the closures:</p>
<pre><code>logAboveSeverity :: Severity -&gt; IO Logger
logAboveSeverity minSeverity = MkLogger
    { _log = \message severity -&gt; if severity &gt;= minSeverity then ... else pure ()
    }</code></pre>
<p>If we need to update some of the state shared by the closures, the state needs to be stored in some kind of reference type like <code>IORef</code>.</p>
<p>Similar to the OOP code, the <code>FileLogger</code> needs to be a separate type:</p>
<pre><code>data FileLogger = MkFileLogger
  { _logger :: Logger   -- callbacks capture the file descriptor/buffer and write to it
  , _flush  :: IO ()    -- similarly captures the file descriptor/buffer, flushes it
  }

logFileLogger :: FileLogger -&gt; String -&gt; Severity -&gt; IO ()
logFileLogger = log . _logger</code></pre>
<p>However, unlike our OOP example, existing code that uses the <code>Logger</code> type and <code>log</code> function cannot work with this new type. There needs to be some refactoring, and how the user code will need to be refactored depends on how we want to expose this new type to the users.</p>
<p><strong>Option 2:</strong> A typeclass that we can implement for our concrete logger types:</p>
<pre><code>class Logger a where
    log :: a -&gt; String -&gt; Severity -&gt; IO ()

data SimpleLogger = MkSimpleLogger { ... }

simpleLogger :: IO SimpleLogger
simpleLogger = ...

instance Logger SimpleLogger where
  log = ...</code></pre>
<p>To allow backwards-compatible changes in the logger library, we need to hide the concrete logger class:</p>
<pre><code>module Logger
    ( Logger
    , simpleLogger -- I can export this without exporting its return type
    ) where

...</code></pre>
<p>With this module, we have to either add a type parameter to the functions and other types that use <code>Logger</code>, or use existentials.</p>
<p>Adding a type parameter is not a backwards compatible change, and in general it can cause snowball effect of propagating the type parameter to the direct users, and then their users, and so on, creating a massive change and difficult to use types.</p>
<p>The problem with existentials is that they are limited in how you can use them, and are somewhat strange in some areas. In our application we can do this:</p>
<pre><code>data MyApp = forall a . Logger a =&gt; MkMyApp
  { _logger :: a
  }</code></pre>
<p>But we can’t have a local variable with this existential type:</p>
<pre><code>createMyApp :: IO MyApp
createMyApp = do
  -- I can&#39;t add a type annotation to myLogger without the concrete type
  myLogger &lt;- simpleLogger      -- simpleLogger :: IO SimpleLogger
  return MkMyApp { _logger = myLogger }</code></pre>
<p>I also cannot have an existential type in a function argument:</p>
<pre><code>-- The type signature is accepted by the compiler, but the value cannot be used.
doStuffWithLogging :: (forall a . Logger a =&gt; a) -&gt; IO ()
doStuffWithLogging logger = log logger &quot;test&quot; Info -- some obscure type error</code></pre>
<p>Instead we have to “pack” the logger value with its typeclass dictionary in a new type:</p>
<pre><code>data LoggerBox = forall a . Logger a =&gt; LoggerBox a

doStuffWithLogging :: LoggerBox -&gt; IO ()
doStuffWithLogging (LoggerBox logger) = log logger &quot;test&quot; Info</code></pre>
<p>Other problems and limitations of this approach:</p>
<ul>
<li>The syntax is just awful to the point where it’s deterrent: <code>forall a . Logger a =&gt; ... a ...</code> instead of just <code>Logger</code>.</li>
<li>It allows implementing <code>FileLogger</code>, but
<ul>
<li>All subtypes need to be a new typeclass + an implementation (in OOP: just one class).</li>
<li>This cannot be used for safe downcasting of a <code>Logger</code> value to <code>FileLogger</code>, without knowing the concrete type of the <code>FileLogger</code>.</li>
</ul></li>
</ul>
<h1 id="effect-monad-approach">Effect monad approach</h1>
<p>The effect monad approach is a variation of option (2) without existentials. Instead of</p>
<pre><code>class Logger a where
    log :: a -&gt; String -&gt; Severity -&gt; IO ()</code></pre>
<p>We add the ability to log in a monad type parameter:</p>
<pre><code>class MonadLogger m where
    log :: String -&gt; Severity -&gt; m ()</code></pre>
<p>Then provide a “monad transformer” for each of the logger implementations:</p>
<pre><code>newtype SimpleLoggerT m a = SimpleLoggerT { runSimpleLoggerT :: m a }

instance MonadIO m =&gt; MonadLogger (SimpleLoggerT m) where
  log msg sev = SimpleLoggerT { runSimpleLoggerT = liftIO (logStdout msg sev) }

newtype FileLoggerT m a = FileLoggerT { runFileLoggerT :: Handle -&gt; m a }

instance MonadIO m =&gt; MonadLogger (FileLoggerT m) where
  log msg sev = FileLoggerT { runFileLoggerT = \handle -&gt; liftIO (logFile handle msg sev) }</code></pre>
<p>The database library does the same, and the app combines these together:</p>
<pre><code>newtype MyAppMonad a = ...

instance MonadLogger MyAppMonad where ...

instance MonadDb MyAppMonad where ...</code></pre>
<p>Because we have one type parameter that encapsulates all side effects (instead of one for logging, one for database operations), this avoids the issues with snowballed type parameters in the use sites.</p>
<p>The database library can also add a logger dependency without breaking the user code.</p>
<p>I think this is the best we can get in Haskell, and it’s quite similar to our OOP solution in terms of code changes needed to be done in the user code.</p>
<p>However for this to work the entire ecosystem of libraries need to do things this way. If the database library decides to use the ADT approach, we will need an “adapter”, e.g. a monad typeclass for the DB operations, with a concrete monad transformer type to call the DB library functions.</p>
<p>This is also the main problem with the composable effects libraries.</p>
<p>(There are also issues with how this kind of code performs in runtime, but that’s probably a topic for another blog post.)</p>
<h1 id="composable-effects">Composable effects</h1>
<p>Haskellers have been developing various ways of modelling side effects (such as DB operations, logging) as “effects” and various ways of composing them.</p>
<p>A simple and widespread way of doing this is via the effect monads, as we’ve seen in the previous section.</p>
<p>However these systems have a few drawbacks, compared to our OOP solution:</p>
<ul>
<li><p>Different effect libraries generally don’t work together. For example, <a href="https://hackage.haskell.org/package/mtl">mtl</a> and <a href="https://github.com/hasura/eff">eff</a> functions won’t work together without some kind of adapter turning one into the other.</p></li>
<li><p>Even if the entire Haskell ecosystem decides to use one particular effect system, things like using two different handlers for different parts of the program, such as the example of using different logger in the db library and the main app, requires type juggling. In some effect libraries this is not even possible.</p></li>
<li><p>Finally, note that the OOP code shown in this post are very basic and straightforward code that even a beginner in OOP can write. Any new person who joins the project, or any one time contributor who just wants to fix a bug and move on, will be able to work on either one of the libraries or the application code. It’s difficult to say the same with the composable effects libraries in Haskell.</p></li>
</ul>
<h1 id="conclusions">Conclusions</h1>
<p>Mainstream statically-typed OOP allows straightforward backwards compatible evolution of types, while keeping them easy to compose. I consider this to be one of the killer features of mainstream statically-typed OOP, and I believe it is an essential feature for programming with many people, over long periods of time.</p>
<p>Just like OOP, Haskell has design patterns, such as the effect monad pattern we’ve shown above. Some of these design patterns solve the problem nicely, but they need an entire ecosystem to follow the same pattern to be useful.</p>
<p>I think it would be beneficial for the functional programming community to stop dismissing OOP’s successes in the industry as an accident of history and try to understand what OOP does well.</p>
<hr />
<p>Thanks to Chris Penner and Matthías Páll Gissurarson for reviewing a draft of this blog post.</p>]]></summary>
</entry>
<entry>
    <title>My thoughts on OCaml</title>
    <link href="http://osa1.net/posts/2023-04-24-ocaml-thoughts.html" />
    <id>http://osa1.net/posts/2023-04-24-ocaml-thoughts.html</id>
    <published>2023-04-24T00:00:00Z</published>
    <updated>2023-04-24T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Since 2013 I’ve had the chance to use OCaml a few times in different jobs, and I got frustrated and disappointed every time I had to use it. I just don’t enjoy writing OCaml.</p>
<p>In this post I want to summarize some of the reasons why I don’t like OCaml and why I wouldn’t choose it for a new project today.</p>
<h1 id="no-standard-and-easy-way-of-implementing-interfaces">No standard and easy way of implementing interfaces</h1>
<p>To me it’s absolutely essential that the language should have some way of defining interfaces, implementing those interfaces for the types, and programming against those interfaces.</p>
<p>In Haskell, this is done with typeclasses. Rust has a similar mechanism called traits. In languages with classes this is often done with abstract classes and “implementing” those classes in new classes (e.g. <code>implements</code> in Dart).</p>
<p>In OCaml there’s no way to do this. I have to explicitly pass functions along with my values, maybe in a product type, or with a functor, or as an argument.</p>
<p>Regardless of how I work around this limitation, it’s extremely inconvenient. Things that must be trivial in any code base, such as converting a value to a string for debugging purposes, become a chore, and sometimes even impossible.</p>
<p>As far as I know, there was at least one attempt at ameliorating this with modular implicits (implicit parameter passing), but I don’t know what happened to it since 2017. It looks like it’s still not a part of the language and the standard library is not using it.</p>
<h1 id="bad-standard-library">Bad standard library</h1>
<p>OCaml’s standard library is just bizarre. It has lots of small issues, and a few larger ones. It’s really just extremely painful to use.</p>
<p>Some examples of the issues:</p>
<ul>
<li><p>Zoo of printing/debugging and conversion functions such as <code>string_of_int</code>, <code>string_of_float</code>, <code>print_char</code>, <code>Int64.of_int</code>, <code>string_of_int</code>, …</p></li>
<li><p>Overly polymorphic operators with type <code>'a -&gt; 'a -&gt; bool</code> such as <code>=</code> (called “structural equality”, throws an exception if you pass a function) and <code>&gt;</code>. Code that uses these operators will probably not work on user-defined types as expected.</p></li>
<li><p>Standard types are sometimes persistent, sometimes mutable. <code>List</code>, <code>Map</code>, and <code>Set</code> are persistent. <code>Stack</code> and <code>Hashtbl</code> are mutable.</p></li>
<li><p>Inconsistent naming:</p>
<ul>
<li>Length function for <code>Map</code> is <code>cardinal</code>, length function for <code>Hashtbl</code> is <code>length</code>.</li>
<li>The “bytes” type is <code>Bytes.t</code>, the big int type is <code>Big_int.big_int</code> (instead of <code>Big_int.t</code>). The functions in these modules are also inconsistently named. <code>Big_int</code> functions are suffixed with <code>_big_int</code>, <code>Bytes</code> module functions are not prefixed or suffixed.</li>
</ul></li>
<li><p>The regex module uses global state: <code>string_match</code> runs a regex and sets some global state. <code>matched_string</code> returns the last matched string using the global state.</p></li>
<li><p>Lack of widely used operations such as <code>popcount</code> for integer types, unicode character operations.</p></li>
<li><p>It doesn’t have proper string and character types: <code>String</code> is a byte array, <code>char</code> is a byte.</p></li>
</ul>
<p>The bad state of OCaml’s standard library also causes fragmentation in the ecosystem with two competing alternatives: <a href="https://opensource.janestreet.com/core/">Core</a> and <a href="https://github.com/ocaml-batteries-team/batteries-included">Batteries</a>.</p>
<h1 id="syntax-problems">Syntax problems</h1>
<p>OCaml doesn’t have a single-line comment syntax.</p>
<p><a href="https://v2.ocaml.org/manual/expr.html">The expression syntax</a> has just too many issues. It’s inconsistent in how it uses delimiters. <code>for</code> and <code>while</code> end with <code>end</code>, but <code>let</code>, <code>if</code>, <code>match</code>, and <code>try</code> don’t, even though the right-most non-terminal is the same in all of these productions:</p>
<pre><code>expr ::= ...
      | while &lt;expr&gt; do &lt;expr&gt; done
      | for &lt;value-name&gt; = &lt;expr&gt; ( to | downto ) &lt;expr&gt; do &lt;expr&gt; done
      | let &lt;let-binding&gt; in &lt;expr&gt;
      | if &lt;expr&gt; then &lt;expr&gt; [ else &lt;expr&gt; ]
      | match &lt;expr&gt; with (| &lt;pattern&gt; [ when &lt;expr&gt; ] -&gt; &lt;expr&gt;)+
      | try &lt;expr&gt; with (| &lt;pattern&gt; [ when &lt;expr&gt; ] -&gt; &lt;expr&gt;)+
      ...</code></pre>
<p>It has <code>for</code> and <code>while</code>, but no <code>break</code> and <code>continue</code>. So you use exceptions with a <code>try</code> inside the loop for <code>continue</code>, and outside for <code>break</code>.</p>
<p>It also has lots of ambiguities, and some of these ambiguities are resolved in an unintuitive way. In addition to making OCaml <a href="https://github.com/ocaml/ocaml/blob/063894d3fa8f63fedf6959744510e1635dccb3ca/parsing/parser.mly#L798-L837">difficult to parse correctly</a>, this can actually cause incorrect reading of the code.</p>
<p>Most common example is probably nesting <code>match</code> and <code>try</code> expressions:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="kw">match</span> e0 <span class="kw">with</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a>| p1 -&gt; <span class="kw">try</span> e1 <span class="kw">with</span> p2 -&gt; e2</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a>| p3 -&gt; e3</span></code></pre></div>
<p>Here <code>p3 -&gt; e3</code> is a part of the <code>try</code> expression.</p>
<p>Another example is the sequencing syntax <code>&lt;expr&gt; ; &lt;expr&gt;</code> and productions with <code>&lt;expr&gt;</code> as the right-most symbol:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="kw">let</span> test1 b =</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a>  <span class="kw">if</span> b <span class="kw">then</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a>    <span class="dt">print_string</span> <span class="st">&quot;1&quot;</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a>  <span class="kw">else</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a>    <span class="dt">print_string</span> <span class="st">&quot;2&quot;</span>; <span class="dt">print_string</span> <span class="st">&quot;3&quot;</span></span></code></pre></div>
<p>Here <code>print_string "3"</code> is not a part of the <code>if</code> expression, so this function always prints “3”.</p>
<p>However, even though <code>match</code> also has <code>&lt;expr&gt;</code> as the right-most symbol, it has different precedence in comparison to semicolon:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="kw">let</span> test2 b =</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a>  <span class="kw">match</span> b <span class="kw">with</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a>  | <span class="kw">true</span> -&gt; <span class="dt">print_string</span> <span class="st">&quot;1&quot;</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a>  | <span class="kw">false</span> -&gt; <span class="dt">print_string</span> <span class="st">&quot;2&quot;</span>; <span class="dt">print_string</span> <span class="st">&quot;3&quot;</span></span></code></pre></div>
<p>Here <code>print_string "3"</code> is a part of the <code>false -&gt; ...</code> branch.</p>
<p>Try to guess how these functions are parsed:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="co">(* Is the last print part of `else` or not? *)</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a><span class="kw">let</span> test3 b =</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a>  <span class="kw">if</span> b <span class="kw">then</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a>    <span class="dt">print_string</span> <span class="st">&quot;1&quot;</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true"></a>  <span class="kw">else</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true"></a>    <span class="kw">let</span> x = <span class="st">&quot;2&quot;</span> <span class="kw">in</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true"></a>    <span class="dt">print_string</span> x;</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true"></a>    <span class="dt">print_string</span> <span class="st">&quot;3&quot;</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true"></a></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true"></a><span class="co">(* Is this well-typed? *)</span></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true"></a><span class="kw">let</span> test4 b =</span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true"></a>  <span class="kw">if</span> b <span class="kw">then</span></span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true"></a>    <span class="dv">1</span>, <span class="dv">2</span></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true"></a>  <span class="kw">else</span></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true"></a>    <span class="dv">3</span>, <span class="dv">4</span></span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true"></a></span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true"></a><span class="co">(* Is the type of this `(int * int) array -&gt; unit` or `int array -&gt; unit * int`? *)</span></span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true"></a><span class="kw">let</span> test5 a = a.(<span class="dv">0</span>) &lt;- <span class="dv">1</span>, <span class="dv">2</span></span>
<span id="cb5-19"><a href="#cb5-19" aria-hidden="true"></a></span>
<span id="cb5-20"><a href="#cb5-20" aria-hidden="true"></a><span class="co">(* What if I replace `,` with `;`? Does this set the element 1 or 2? *)</span></span>
<span id="cb5-21"><a href="#cb5-21" aria-hidden="true"></a><span class="kw">let</span> test6 a = a.(<span class="dv">0</span>) &lt;- <span class="dv">1</span>; <span class="dv">2</span></span></code></pre></div>
<p>When writing OCaml you have to keep these rules in mind.</p>
<p>It also has <a href="https://en.wikipedia.org/wiki/Dangling_else">the “dangling else” problem</a>:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="co">(* Is `else` part of the inner `if` or the outer? *)</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a><span class="kw">if</span> e1 <span class="kw">then</span> <span class="kw">if</span> e2 <span class="kw">then</span> e3 <span class="kw">else</span> e4</span></code></pre></div>
<p>Finally, and I think this is probably the most strange thing about OCaml’s syntax and I’m not even sure what’s exactly happening here (I can’t find anything relevant in the language documentation), comments in OCaml are somehow tokenized and those tokens need to be terminated. They can be terminated inside another comment, or even outside. This is a bit difficult to explain but here’s a simple example:</p>
<pre><code>(* &quot; *)
print_string &quot;hi&quot;</code></pre>
<p>OCaml 5.0.0 rejects this program with this error:</p>
<pre><code>File &quot;./test.ml&quot;, line 2, characters 16-17:
2 | print_string &quot;hi&quot;
                    ^
  String literal begins here</code></pre>
<p>From the error message it seems like the <code>"</code> in the comment line actually starts a string literal, which is terminated in the first quote of <code>"hi"</code>. The closing double quote of <code>"hi"</code> thus starts another string literal, which is not terminated.</p>
<p>However that doesn’t explain why this works:</p>
<pre><code>(* &quot; *)
print_string &quot;hi&quot;
(* &quot; *)
print_string &quot;bye&quot;</code></pre>
<p>If my explanation of the previous version were correct this would fail with an unbound <code>hi</code> variable, but it works and prints “bye”!</p>
<h1 id="rest-of-the-package-is-also-not-that-good">Rest of the package is also not that good</h1>
<p>I’m not following developments in OCaml ecosystem too closely, but just two years ago it was common to use Makefiles to build OCaml projects. The language server barely worked on a project with less than 50 kloc. There was no standard way of doing compile-time metaprogramming and some projects even used the C preprocessor (cpp).</p>
<p>Some of these things probably improved in the meantime, but the overall package is still not good enough compared to the alternatives.</p>
<h1 id="but-at-least-its-a-functional-language">But at least it’s a functional language?</h1>
<p>Almost all modern statically typed languages have closures, higher-order functions/methods, lazy streams, and combinators that run efficiently. Persistent/immutable data structures can be implemented even in C.</p>
<p>Also, OCaml has no tracking of side-effects (like in Haskell), and the language and the standard library have lots of features and functions with mutation, such as the array update syntax, mutable record fields, <code>Hashtbl</code>, and the regex module.</p>
<p>The only thing that makes OCaml more “functional” than e.g. Dart, Java, or Rust is that it supports tail calls. While having tail calls is important for functional programming, I would happily give up on tail calls if that means not having the problems listed above.</p>
<p>Also keep in mind that when you mix imperative and functional styles tail calls become less important. For example, I don’t have to implement a stream <code>map</code> function in Dart with a tail call to map the rest of the stream, I can just use a <code>while</code> or <code>for</code> loop.</p>
<h1 id="when-should-i-use-it">When should I use it?</h1>
<p>In my opinion there is no reason to use OCaml in a new project in 2023. If you have a reason to think that OCaml is the best choice for a new project please let me know your use case, I’m genuinely curious.</p>]]></summary>
</entry>
<entry>
    <title>Fast polymorphic record access</title>
    <link href="http://osa1.net/posts/2023-01-23-fast-polymorphic-record-access.html" />
    <id>http://osa1.net/posts/2023-01-23-fast-polymorphic-record-access.html</id>
    <published>2023-01-23T00:00:00Z</published>
    <updated>2023-01-23T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I like <a href="https://osa1.net/posts/2021-04-10-sums-and-products.html">anonymous records</a> and row polymorphism, but until recently I didn’t know how to generate efficient code for polymorphic record access. In this blog post I will summarize the different compilations of polymorphic record accesses that I’m aware of.</p>
<p>All of the ideas shown in this post can be used to access a record field when the record’s concrete type is not known, but the type system guarantees that it has the accessed field. This includes row polymorphism and record subtyping.</p>
<p>Most of the ideas also work when the record’s type is completely unknown and it may not have the accessed field, but some of the optimizations assume accesses cannot fail. Those optimizations can only be used on statically-typed but polymorphic records.</p>
<p>In some of the examples below I will use row polymorphism.</p>
<hr />
<h1 id="row-polymorphism-and-record-subtyping-briefly">Row polymorphism and record subtyping, briefly</h1>
<p>In this blog post we are interested in a specific application of row polymorphism to records. In short, row polymorphism allows type variables denoting sets of record fields, with their types. For example:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a>f <span class="op">:</span> <span class="ot">∀</span> r <span class="op">.</span> { x <span class="op">:</span> <span class="dt">Int</span>, y <span class="op">:</span> <span class="dt">Int</span> <span class="op">|</span> r } <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a>f a <span class="ot">=</span> a<span class="op">.</span>x <span class="op">+</span> a<span class="op">.</span>y</span></code></pre></div>
<p>Here the type variable <code>r</code> ranges over set of rows (or records). This function accepts any record as argument as long as the record has at least <code>x : Int</code> and <code>y : Int</code> fields.</p>
<p>The main difference between row polymorphism and record subtyping is that the type variable <code>r</code> can be used in the right-hand side of an arrow as well, allowing passing the record around without losing its concrete type. For example:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a>mapAB <span class="op">:</span> <span class="ot">∀</span> r <span class="op">.</span> { a <span class="op">:</span> <span class="dt">Int</span>, b <span class="op">:</span> <span class="dt">Int</span> <span class="op">|</span> r } <span class="ot">-&gt;</span> (<span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span>) <span class="ot">-&gt;</span> { a <span class="op">:</span> <span class="dt">Int</span>, b <span class="op">:</span> <span class="dt">Int</span> <span class="op">|</span> r }</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a>mapAB r f <span class="ot">=</span> { a <span class="ot">=</span> f r<span class="op">.</span>a, b <span class="ot">=</span> f r<span class="op">.</span>b, <span class="op">..</span> r }</span></code></pre></div>
<p>This function takes any record that has <code>a : Int</code> and <code>b : Int</code> fields, and returns a new record with updated <code>a</code> and <code>b</code> fields and the rest of the fields. If I pass it a record with type <code>{ a : Int, b : Int, name : String }</code> I get the same type back.</p>
<p>With subtyping, type of this function would look like:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a>mapAB <span class="op">:</span> { a <span class="op">:</span> <span class="dt">Int</span>, b <span class="op">:</span> <span class="dt">Int</span> } <span class="ot">-&gt;</span> (<span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span>) <span class="ot">-&gt;</span> { a <span class="op">:</span> <span class="dt">Int</span>, b <span class="op">:</span> <span class="dt">Int</span> }</span></code></pre></div>
<p>In this version the return type just has <code>a</code> and <code>b</code> fields. Rest of the fields are lost. If I pass this a <code>{ a : Int, b : Int, name : String }</code> I get <code>{ a : Int, b : Int }</code> back. The <code>name</code> field is lost.</p>
<hr />
<p>Without subtyping, when the record type in a field access expression is known, it’s easy to generate efficient code: we use the same offsets used when compiling a record literal with the type.</p>
<p>With subtyping, and with row-polymorphism when the record type is not a concrete record type but is a record type with a row variable, type of <code>r</code> in <code>r.a</code> does not immediately give us where in the record’s payload the field <code>a</code> is.</p>
<p>Let’s look at how we might go about implementing record field access in these cases.</p>
<h1 id="records-as-maps">(0) Records as maps</h1>
<p>I don’t think this idea is used in statically-typed languages, but I wanted to include it for completeness.</p>
<p>We can implement records as maps with string keys. Field access then becomes a map lookup.</p>
<p>This is easy to implement because our language probably already has a map implementation in the standard library.</p>
<p>The disadvantages are:</p>
<ul>
<li><p>Depending on the map implementation, every field access require a <code>O(N)</code> or <code>O(log(N))</code> map lookup.</p></li>
<li><p>Map entries will be stored in a separate memory location (instead of in the record object’s payload), which will require pointer chasing to read the field value.</p></li>
<li><p>Unnecessary memory overhead caused by map fields that are not really necessary for records: such as the <code>capacity</code> and <code>size</code> fields.</p></li>
</ul>
<p>With whole-program compilation, we can improve the constant factors a bit by mapping labels (field names) in the program to unique integers. This way lookups don’t require string hashing or comparison, but this is still slow and memory-inefficient compared to other techniques we will discuss below.</p>
<h1 id="passing-accessors-as-parameters">(1) Passing accessors as parameters</h1>
<p>If you’re familiar with Haskell, this is the Haskell way of implementing row polymorphic records.</p>
<p>The idea is that when we pass a record to a row-polymorphic function, we also pass, implicitly, and as functions, the accessors that the function needs.</p>
<p>In Haskell, type of <code>mapAB</code> we’ve seen above would look like this:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a>mapAB <span class="op">:</span> <span class="ot">∀</span> r <span class="op">.</span> (<span class="dt">HasField</span> r <span class="dt">&#39;A</span> <span class="dt">Int</span>, <span class="dt">HasField</span> r <span class="dt">&#39;B</span> <span class="dt">Int</span>) <span class="ot">=&gt;</span> <span class="dt">Record</span> r <span class="ot">-&gt;</span> (<span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span>) <span class="ot">-&gt;</span> <span class="dt">Record</span> r</span></code></pre></div>
<p>The runtime values for <code>HasField ...</code> constraints are the accessors. When calling this function we don’t explicitly pass these accessors, the compiler generates them. In a well-typed program, we either have these values in the call site, or we know how to generate them (e.g. the record type is concrete in the call site), so it’s possible for the compiler to generate and pass these arguments.</p>
<p>The main advantage of this approach is that it doesn’t require any language support specifically for records.</p>
<p>The main disadvantages are:</p>
<ul>
<li><p>Every field access is a function call.</p></li>
<li><p>Parameter passing per field per record does not scale well and causes messy and slow generated code. For example, suppose we want to take two records with fields <code>x : Int</code> and <code>y : Int</code>:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a>f <span class="op">:</span> <span class="ot">∀</span> r <span class="op">.</span> (<span class="dt">HasField</span> r <span class="dt">&#39;X</span> <span class="dt">Int</span>, <span class="dt">HasField</span> r <span class="dt">&#39;Y</span> <span class="dt">Int</span>) <span class="ot">=&gt;</span> <span class="dt">Record</span> r <span class="ot">-&gt;</span> <span class="dt">Record</span> r <span class="ot">-&gt;</span> <span class="op">...</span></span></code></pre></div>
<p>This function takes two implicit arguments, but it has a limitation that the record arguments need to have the same record types. I can’t call this function with two different records:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a>f { x <span class="ot">=</span> <span class="dv">123</span>, y <span class="ot">=</span> <span class="dv">456</span>, a <span class="ot">=</span> <span class="st">&quot;hi&quot;</span> } { x <span class="ot">=</span> <span class="dv">0</span>, y <span class="ot">=</span> <span class="op">-</span><span class="dv">1</span>, b <span class="ot">=</span> false }</span></code></pre></div>
<p>For this to work I need two row variables:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a>f <span class="op">:</span> <span class="ot">∀</span> r1 r2 <span class="op">.</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a>    (<span class="dt">HasField</span> r1 <span class="dt">&#39;X</span> <span class="dt">Int</span>, <span class="dt">HasField</span> r1 <span class="dt">&#39;Y</span> <span class="dt">Int</span>,</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true"></a>     <span class="dt">HasField</span> r2 <span class="dt">&#39;X</span> <span class="dt">Int</span>, <span class="dt">HasField</span> r2 <span class="dt">&#39;Y</span> <span class="dt">Int</span>) <span class="ot">=&gt;</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true"></a>    <span class="dt">Record</span> r1 <span class="ot">-&gt;</span> <span class="dt">Record</span> r2 <span class="ot">-&gt;</span> <span class="op">...</span></span></code></pre></div>
<p>This version works, but it also takes 4 implicit arguments.</p></li>
</ul>
<h1 id="prerequisite-integers-for-labels">Prerequisite: integers for labels</h1>
<p>Starting with the next approach, we will require mapping labels (field names) to integers in compile-time, to be used as indices.</p>
<p>Because these integers for labels will be used in record allocation and field accesses, it is possible that a label we see later in a program will cause different code generation for a record field access that we’ve already seen.</p>
<p>We have two options:</p>
<ul>
<li><p>We can avoid this problem with a whole-program pass to collect all labels in the program.</p>
<p>This is trivial with a whole-program compiler as a front-end pass can store all labels seen in a component (library, module) somewhere and we can map those labels to integers before code generation.</p></li>
<li><p>We can have a link-time step to update record allocation and field access code with the integers for the labels.</p></li>
</ul>
<p>In the rest of the post, labels will always get integers based on their lexicographical order and we will call these integers for labels just “labels”.</p>
<p>For example, if I have labels <code>a</code>, <code>c</code>, <code>b</code>, <code>d</code> in my program, their numbers will be 1, 3, 2, 4, respectively.</p>
<h1 id="per-record-label-to-field-offset-tables">(2) Per-record label-to-field-offset tables</h1>
<p>With integers as labels we can add a table to every record (records with the same set of keys sharing the same table) mapping labels in the program to offsets in the record’s payload. For example, the table for a record with fields <code>a</code> and <code>c</code> when the program has labels <code>a</code>, <code>b</code>, <code>c</code>, <code>d</code>, looks like this:</p>
<pre><code>[ 0, _, 1, _ ]</code></pre>
<p>This table is indexed by the label and the value gives the offset in the record’s payload for the field. <code>_</code> means the record does not have the field. In a well-typed program we won’t ever see a <code>_</code> value being read from a table.</p>
<p>This approach is quite wasteful as every table will have as many entries as number of labels in the program, but we will compress these tables below to reasonable sizes.</p>
<p>We will call these tables “record offset tables” or “offset tables” in short. When compiling a record access we need to get the record’s offset table. For this we add an extra word (pointer) to record objects pointing to their offset tables. We then generate this code for a record field access:</p>
<pre><code>record[record[OFFSET_TABLE_INDEX][label]]</code></pre>
<p><code>OFFSET_TABLE_INDEX</code> is the constant for where the offset table pointer is in record objects.</p>
<p>Offset tables are generated per record shape (set of labels), so the total number of tables shouldn’t be too large.</p>
<p>Since the <code>_</code> entries won’t ever be used, we can shrink the tables with trailing <code>_</code> entries. In our example above with a record with <code>a</code> and <code>c</code> fields, the last <code>_</code> entry can be omitted:</p>
<pre><code>[ 0, _, 1 ]</code></pre>
<h1 id="making-the-tables-global">(2.1) Making the tables global</h1>
<p>Because offset tables are per-shape, and the total number of record shapes in a program should be small, if we allocate a few bits in record object headers for the “shape index” of the record, this index can be used to index a global table mapping record shapes to their offset tables.</p>
<p>Generated code for record access expressions will look like:</p>
<pre><code>record[RECORD_OFFSET_TABLES[getRecordShapeId(record)][label]]</code></pre>
<p><code>getRecordShapeId</code> will read the bits in the object header for the record shape id. Depending on the actual header layout, it will look something like:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true"></a><span class="dt">int</span> getRecordShapeId(Object* object) {</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true"></a>  <span class="cf">return</span> (object-&gt;header &amp; RECORD_ID_MASK) &gt;&gt; HEADER_BITS;</span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true"></a>}</span></code></pre></div>
<p>With record shape IDs in headers and a global table mapping shape IDs to offset tables, we no longer need an extra word in record objects for the offset table pointer.</p>
<p>Here’s an example of offset tables when we have labels <code>a</code>, <code>b</code>, <code>x</code>, <code>y</code>, and two records <code>0: {a, b}</code> and <code>1: {x, y}</code>:</p>
<pre><code>RECORD_0_OFFSET_TABLE = [
  0, // label a
  1, // label b
  _, // label x
  _, // label y
];

RECORD_1_OFFSET_TABLE = [
  _, // label a
  _, // label b
  0, // label x
  1, // label y
];

RECORD_OFFSET_TABLES = [
  RECORD_0_OFFSET_TABLE, // record 0
  RECORD_1_OFFSET_TABLE, // record 1
];</code></pre>
<p>As before, the offset table for record 0 can be shrunk as:</p>
<pre><code>RECORD_0_OFFSET_TABLE = [
  0, // label a
  1, // label b
];</code></pre>
<h1 id="sharing-label-ids-and-record-shapes">(2.2) Sharing label IDs and record shapes</h1>
<p>Labels that are not used in the same record program can be given the same ID.</p>
<p>In the example above, this allows us to have a single table for both records:</p>
<pre><code>RECORD_0_1_OFFSET_TABLE = [
  0, // label a or x
  1, // label b or y
];

RECORD_OFFSET_TABLES = [
  RECORD_0_1_OFFSET_TABLE, // record 0
  RECORD_0_1_OFFSET_TABLE, // record 1
];</code></pre>
<p>The problem of assigning IDs to labels is very similar to stack allocation when spilling during register allocation. We have practically infinite amount of IDs (stack space), but we want to reuse the same ID for labels as long as they’re never used in the same record (live at the same time).</p>
<p>After sharing label IDs, some of the shapes may be identical, as in our example. We can give those shapes the same ID and avoid redundant entries in the offset tables.</p>
<p>With this, our example with two records <code>{a, b}</code> and <code>{x, y}</code> compiles to just one offset table:</p>
<pre><code>RECORD_0_1_OFFSET_TABLE = [
  0, // label a or x
  1, // label b or y
];

RECORD_OFFSET_TABLES = [
  RECORD_0_1_OFFSET_TABLE, // record 0 and 1
];</code></pre>
<h1 id="flattening-the-table">(2.3) Flattening the table</h1>
<p>Suppose we have these record shapes in a program:</p>
<ul>
<li><code>{a, b, q}</code></li>
<li><code>{x, y, q}</code></li>
</ul>
<p>The <code>RECORD_OFFSET_TABLES</code> table is currently an array of pointers, and indexing the offset table still requires pointer chasing.</p>
<p>To avoid pointer chasing we can flatten the table.</p>
<p>For our current program, the tables, without flattening, look like this:</p>
<pre><code>RECORD_0_OFFSET_TABLE = [
  0, // label a
  1, // label b
  _, // label x
  _, // label y
  2, // label q
];

RECORD_1_OFFSET_TABLE = [
  _, // label a
  _, // label b
  0, // label x
  1, // label y
  2, // label q
];

RECORD_OFFSET_TABLES = [
  RECORD_0_OFFSET_TABLE,
  RECORD_1_OFFSET_TABLE,
];</code></pre>
<p>We can flatten this as:</p>
<pre><code>RECORD_0_OFFSET_TABLE = [
  0, // label a
  1, // label b
  _, // label x
  _, // label y
  2, // label q
];

RECORD_1_OFFSET_TABLE = [
  _, // label a
  _, // label b
  0, // label x
  1, // label y
  2, // label q
];

RECORD_LABEL_OFFSETS = [
  0, // record 0, label a
  1, // record 0, label b
  _, // record 0, label x
  _, // record 0, label y
  2, // record 0, label z

  _, // record 1, label a
  _, // record 1, label b
  0, // record 1, label x
  1, // record 1, label y
  2, // record 1, label z
];</code></pre>
<p>Field indexing then becomes:</p>
<pre><code>record[RECORD_LABEL_OFFSETS[(getRecordShapeId(record) * NUM_LABELS) + label]]</code></pre>
<p>With this version we eliminate one layer of indirection.</p>
<h1 id="removing-the-constant-factor">(2.4) Removing the constant factor</h1>
<p>The idea here is not too important on its own, but it will enable further improvements.</p>
<p>The <code>NUM_LABELS</code> factor in field access code above can be eliminated by incrementing record shape IDs by <code>NUM_LABELS</code> instead of 1. In our example, instead of having record IDs 0 and 1, we will have 0 and 5 (incremented by the number of labels in the program).</p>
<p>Since there may be large number of labels in a program and we may have only a few bits to store the record IDs, an alternative would be to convert the table to label-major order like this:</p>
<pre><code>RECORD_LABEL_OFFSETS = [
  0, // label a, record 0
  _, // label a, record 1

  1, // label b, record 0
  _, // label b, record 1

  _, // label x, record 0
  1, // label x, record 1

  _, // label y, record 0
  2, // label y, record 1

  3, // label z, record 0
  3, // label z, record 1
];</code></pre>
<p>With this table, indexing code becomes:</p>
<pre><code>record[RECORD_LABEL_OFFSETS[(label * NUM_RECORDS) + getRecordShapeId(record)]]</code></pre>
<p>We can then eliminate the <code>NUM_RECORDS</code> factor the same way, by incrementing label IDs by <code>NUM_RECORDS</code> instead of 1, and index with:</p>
<pre><code>record[RECORD_LABEL_OFFSETS[label + getRecordShapeId(record)]]</code></pre>
<h1 id="compacting-the-table-further">(2.5) Compacting the table further</h1>
<p>Now that the table index of a label is <code>label + shape_id</code> and we have a single table, we can shift the entries in the table by decrementing label IDs.</p>
<p>For this it doesn’t matter whether we store in label-major or record-major order. Which one of these will generate a smaller table will probably depend on the program. As an example, suppose we store the table in label-major order, and we have these records in the program:</p>
<ul>
<li><code>0: {x, y, z, t}</code></li>
<li><code>1: {x, y}</code></li>
<li><code>2: {z, t}</code></li>
</ul>
<p>The table will look like:</p>
<pre><code>[ 0, 0, _,   // label x
  1, 1, _,   // label y
  2, _, 0,   // label z
  3, _, 1 ]  // label t</code></pre>
<p>Record IDs will be 0, 1, 2, and label IDs will be 0, 3, 6, 9.</p>
<p>We can use the unused slot for label x, record 2, by decrementing the label index for <code>y</code> by one. If we then do the same for <code>z</code>, the label IDs become 0, 2, 4, 7, and the table becomes:</p>
<pre><code>[ 0, 0,      // label x
  1, 1,      // label y
  2, _, 0,   // label z
  3, _, 1 ]  // label t</code></pre>
<p>This idea can be used to fill any gaps in previous label rows, as long as the used slots in a row fits into the gaps. For example, if we have a table like:</p>
<pre><code>[ 0, _, _, 1,  // label x
  _, 0, 1, _,  // label y
  ... ]</code></pre>
<p>We can decrement <code>y</code>’s ID to fit it into the row for label <code>x</code>:</p>
<pre><code>[ 0, 0, 1, 1,  // label x and y, interleaved
  ... ]</code></pre>
<h1 id="conclusions">Conclusions</h1>
<p>Collecting and numbering all labels in the program allows using a global table for mapping labels to offsets.</p>
<p>These offset tables can be made smaller by</p>
<ul>
<li>Giving same number to labels that don’t occur in the same record</li>
<li>Giving same ID to records that become identical after the previous step</li>
<li>Tweaking label numbers so that rows without overlapping entries can be merged into a single row</li>
</ul>
<p>The result is a very compact representation of record objects (no extra words in the header or unused space in the payload needed) and a fast polymorphic field access.</p>
<p>The offset table should also be small in practice, because different parts of the program will probably use disjoint set of names, and different labels and records will have the same IDs. In the remaining cases, tweaking label IDs to compact the table should help.</p>
<h1 id="references">References</h1>
<p>I’ve learned about the global table approach and some of the optimizations from the Dart compiler, which implements virtual calls using a “global dispatch table” (GDT), indexed by <code>classID + methodID</code> in call sites. See <a href="https://mrale.ph/dartvm/#global-dispatch-table-gdt">“Introduction to Dart VM”</a> for a description of how Dart AOT and JIT generate GDTs.</p>
<p>If you are interested in seeing some code, <a href="https://github.com/dart-lang/sdk/blob/ba8f0bd947c613013ed4659ea44da851bf35a99f/pkg/dart2wasm/lib/dispatch_table.dart#L411-L442">here</a> is where we generate the GDT in dart2wasm (Dart’s Wasm backend). The outer loop finds a selector ID (label ID in our examples) for a row (list of records in our examples, list of classes in dart2wasm). The inner loop <code>do { ... } while (!fits)</code> starts from the first row with gaps, and tries to fit the current row into the gaps. In the worst case it skips all of the rows, in which case rest of the code appends the table with the new row.</p>
<p><a href="https://github.com/dart-lang/language/blob/master/accepted/future-releases/records/records-feature-specification.md">Dart will soon have records</a>, and for the <a href="https://github.com/dart-lang/sdk/issues/50014">dart2wasm implementation of records</a> I’m thinking of using some of the ideas described in this post. Dart records do not support width subtyping (you can’t pass <code>{x, y, z}</code> where <code>{x, y}</code> is expected), but because of the <code>dynamic</code> type, we can have a dynamically typed record that we index.</p>
<hr />
<p>Thanks to <a href="https://twitter.com/josecalderon">José Manuel Calderón Trilla</a> for his feedback on a draft of this blog post.</p>]]></summary>
</entry>
<entry>
    <title>Products and sums, named and anonymous</title>
    <link href="http://osa1.net/posts/2021-04-10-sums-and-products.html" />
    <id>http://osa1.net/posts/2021-04-10-sums-and-products.html</id>
    <published>2021-04-10T00:00:00Z</published>
    <updated>2021-04-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I was recently thinking about why do so many languages have tuples, which can be thought of as simple anonymous products (more on the definition of this below), but not something similar for sums. Both sum and product types are widely used, so it seems inconsistent to have anonymous products but not sums.</p>
<p>I recently <a href="https://twitter.com/_osa1/status/1379260986574667776">tweeted about this</a> and got helpful responses that made me realize that I got my definitions wrong. As I think more about what “anonymous type” means it became clear to me that the it’s not just tuples or other types with special syntax, instead of names. It’s more complicated than that.</p>
<p>So in this post I’d like to briefly talk about products and sums, and how are names used in type checking. I will then show a different way of type checking, and some examples from two widely used languages. Finally, I will argue that types are called “named” or “anonymous” depending on how they are checked.</p>
<p>Note that I’m not using any of these words as they are used in category theory or any other field of mathematics. These are mainly how I see them used in widely used PLs like Haskell, Rust, and OCaml, and in PL papers and books.</p>
<h1 id="products">Products</h1>
<p>A value of a product type contains zero or more fields with potentially different types. Some example product types are:</p>
<ul>
<li><code>data Coordinate = Coordinate { x :: Int, y :: Int }</code>: a product with two <code>Int</code> fields</li>
<li><code>data D = D Int String Float</code>: a product with <code>Int</code>, <code>String</code>, and <code>Float</code> fields</li>
<li><code>data Empty = Empty</code>: a product with no fields</li>
</ul>
<p>Note that the way you access the fields does not matter. In the examples above, fields of a <code>Coordinate</code> value can be accessed with pattern matching, or with the generated functions <code>x</code> and <code>y</code>. In the second example, we can only access the fields with pattern matching.</p>
<p>What matters is: products contain zero or more fields. The fields can have different types.</p>
<h1 id="sums">Sums</h1>
<p>A sum type specifies multiple “variants” (or “alternatives”), where each variant has a “name” (or “tag”, more on this later) and some number of fields.</p>
<p>A value of a sum type holds a name (or tag), and the fields of the variant with that name.</p>
<p>For example, if you have a parser for integers, you will want to return an integer when parsing succeeds, or an error message when something goes wrong. The sum type for the return value of your parse function would look like:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">ParseResult</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a>  <span class="ot">=</span> <span class="dt">Success</span> <span class="dt">Int</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>  <span class="op">|</span> <span class="dt">Fail</span> <span class="dt">String</span></span></code></pre></div>
<p>Here, <code>Success</code> and <code>Fail</code> are names of the variants. <code>Success</code> variant has an <code>Int</code> field, and <code>Fail</code> variant has a <code>String</code> field.</p>
<p>A value of this type does not contain an <code>Int</code> and <code>String</code> at the same time. It’s either a <code>Fail</code> with a <code>String</code> field, or a <code>Success</code> with an <code>Int</code> field.</p>
<p>The way you access the fields is with pattern matching:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="kw">case</span> parse_result <span class="kw">of</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a>   <span class="dt">Success</span> int <span class="ot">-&gt;</span> <span class="op">...</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a>   <span class="dt">Fail</span> error_message <span class="ot">-&gt;</span> <span class="op">...</span></span></code></pre></div>
<h1 id="names-in-type-checking-nominal-typing">Names in type checking (nominal typing)</h1>
<p>If I have two types, named <code>T1</code> and <code>T2</code>, no matter how they are defined, they are considered different in Haskell, and most other widely used typed languages (Rust, Java, …). This is called “nominal” type checking, where differently named types are considered different, even if they are “structurally” the same. For example, <code>data T1 = T Int</code> and <code>data T2 = T Int</code> are structurally the same, but you can’t apply a value of type <code>T2</code> to a function that expects <code>T1</code>.</p>
<p>What “structurally same” mean is open to interpretation. We will come to this later.</p>
<p>In addition, all types have names<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>, even types like tuples, which may look like they don’t have names, like our <code>Coordinate</code> or <code>ParseResult</code> have.</p>
<p>Tuples in most languages are just a bunch of product types, like the ones you can define yourself. They are often pre-defined for arities 0 to some number, and they have a special, “mixfix” syntax, with parentheses and commas to separate the fields. Other than that, they are no different than the ones you can define yourself.</p>
<p>You can see GHC’s definition of tuples <a href="https://github.com/ghc/ghc/blob/a951e06921f05df1601d9c3a39efcede27f3330c/libraries/ghc-prim/GHC/Tuple.hs#L34-L58">here</a>. In GHC, you can use the name directly if you don’t want the mixfix syntax, like <code>(,) 1 2</code>. So the name for an 2-ary tuple is <code>(,)</code> in Haskell, and it has a special syntax so you can write more readable <code>(1, 2)</code> (or <code>(Int, Int)</code> in type context). Other than syntax, there’s nothing special about tuples.</p>
<p>So it’s clear that most languages don’t have anonymous types. All types have some kind of names, and two types are only “compatible” if the names match.</p>
<p>Before defining what anonymous types are, I would like to give two examples, from PureScript and OCaml, where types are not checked based on their names, but based on their “structure”.</p>
<h1 id="structural-type-checking-for-products">Structural type checking for products</h1>
<p>A record is a product type with named (or “labelled”) fields. Our <code>Coordinate</code> example is a record.</p>
<p>In PureScript, records can be defined without giving names to them. For example:</p>
<pre class="purescript"><code>f :: { x :: Int, y :: Int } -&gt; Int
f a = a.x + a.y</code></pre>
<p>Here, <code>f</code> is a function that takes a record with two <code>Int</code> fields, named <code>x</code> and <code>y</code>, as an argument.</p>
<p>Here is a more interesting version of the same function:</p>
<pre class="purescript"><code>f :: forall r . { x :: Int, y :: Int | r } -&gt; Int
f a = a.x + a.y</code></pre>
<p>This version takes a record with <em>at least</em> <code>x :: Int</code> and <code>y :: Int</code> fields, but it can have more fields. Using this version, this code type checks:</p>
<pre class="purescript"><code>f { x: 1, y: 2, z: 3, t: 4 }</code></pre>
<p>The <code>r</code> in this type is not too important. Important part is, in PureScript, records are not type checked nominally. Indeed, in the example above, type of the record with 4 fields is not defined, and no names are used for the record in the type signature of <code>f</code>.</p>
<p>You might think that the record braces and commas are similar to the tuple syntax, so the name could be something like <code>{,}</code>, maybe applied to <code>x :: Int</code> somehow (assuming there is a type-level representation of field names).</p>
<p>However, even if that’s the case, type checking of these types are quite different than tuples. We’ve already seen that we can pass a record with more fields. You can also reorder fields in the function type signature<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>, or in the record expression, and it still works.</p>
<p>So type checking for PureScript is quite different than Haskell tuples.</p>
<p>This kind of type checking where you look at the “structure” rather than just the names is called structural type checking.</p>
<p>Now let’s take a look at an example for sum types.</p>
<h1 id="structural-type-checking-for-sum-types">Structural type checking for sum types</h1>
<p>OCaml has named sum types, just like Haskell’s. Here is the OCaml version of our <code>ParseResult</code> type:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="kw">type</span> parse_result =</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a>  | Success <span class="kw">of</span> <span class="dt">int</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a>  | Fail <span class="kw">of</span> <span class="dt">string</span></span></code></pre></div>
<p>Name of this type is <code>parse_result</code> (following OCaml naming conventions), and it is type checked exactly the same way it is type checked in Haskell.</p>
<p>A second way of defining sum types in OCaml, and without names, is with <a href="https://ocaml.org/manual/lablexamples.html#s:polymorphic-variants">polymorphic variants</a>. Here’s the polymorphic variant for the same type:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a><span class="kw">type</span> parse_result = [ `Success <span class="kw">of</span> <span class="dt">int</span> | `Fail <span class="kw">of</span> <span class="dt">string</span> ]</span></code></pre></div>
<p>Crucially, even though we use a similar syntax with the <code>type</code> keyword, this is a type synonym. The right-hand side of this definition is an anonymous sum with two variants, tagged <code>`Success</code> and <code>`Fail</code>, with <code>int</code> and <code>string</code> fields, respectively.</p>
<p>Now, suppose I have a parse result handler, which, in addition to the success and failure cases, handles some “other” case as well:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a><span class="kw">let</span> f = <span class="kw">function</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true"></a>  | `Success i -&gt; <span class="dt">Printf</span>.printf <span class="st">&quot;Parse result: %d</span><span class="ch">\n</span><span class="st">&quot;</span> i</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true"></a>  | `Fail msg -&gt; <span class="dt">Printf</span>.printf <span class="st">&quot;Parse failed: %s</span><span class="ch">\n</span><span class="st">&quot;</span> msg</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true"></a>  | `Other -&gt; <span class="dt">Printf</span>.printf <span class="st">&quot;Wat?</span><span class="ch">\n</span><span class="st">&quot;</span></span></code></pre></div>
<p>Type of this function as inferred by the OCaml compiler is:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true"></a>[&lt; `Fail <span class="kw">of</span> <span class="dt">string</span> | `Other | `Success <span class="kw">of</span> x ] -&gt; <span class="dt">unit</span></span></code></pre></div>
<p>What this type says is that the function accepts any polymorphic variant that has the tags <code>Fail</code>, <code>Other</code>, and <code>Success</code> (with the specified field types), or some subset of these tags. So if I have a value of type <code>parse_result</code>:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true"></a><span class="kw">let</span> x : parse_result = `Success <span class="dv">123</span></span></code></pre></div>
<p>I can pass it to <code>f</code>, even though <code>f</code>’s argument type is not exactly <code>parse_result</code>. Here’s the full example, run in <a href="https://github.com/ocaml-community/utop">utop</a>: (<code>utop #</code> part is the prompt, lines after <code>;;</code> are utop outputs)</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true"></a>utop # <span class="kw">type</span> parse_result = [ `Success <span class="kw">of</span> <span class="dt">int</span> | `Fail <span class="kw">of</span> <span class="dt">string</span> ];;</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true"></a><span class="kw">type</span> parse_result = [ `Fail <span class="kw">of</span> <span class="dt">string</span> | `Success <span class="kw">of</span> <span class="dt">int</span> ]</span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true"></a></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true"></a>utop # <span class="kw">let</span> f = <span class="kw">function</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true"></a>  | `Success i -&gt; <span class="dt">Printf</span>.printf <span class="st">&quot;Parse result: %d</span><span class="ch">\n</span><span class="st">&quot;</span> i</span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true"></a>  | `Fail msg -&gt; <span class="dt">Printf</span>.printf <span class="st">&quot;Parse failed: %s</span><span class="ch">\n</span><span class="st">&quot;</span> msg</span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true"></a>  | `Other -&gt; <span class="dt">Printf</span>.printf <span class="st">&quot;Wat?</span><span class="ch">\n</span><span class="st">&quot;</span>;;</span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true"></a><span class="kw">val</span> f : [&lt; `Fail <span class="kw">of</span> <span class="dt">string</span> | `Other | `Success <span class="kw">of</span> <span class="dt">int</span> ] -&gt; <span class="dt">unit</span> = &lt;<span class="kw">fun</span>&gt;</span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true"></a></span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true"></a>utop # <span class="kw">let</span> x : parse_result = `Success <span class="dv">123</span>;;</span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true"></a><span class="kw">val</span> x : parse_result = `Success <span class="dv">123</span></span>
<span id="cb11-12"><a href="#cb11-12" aria-hidden="true"></a></span>
<span id="cb11-13"><a href="#cb11-13" aria-hidden="true"></a>utop # f x;;</span>
<span id="cb11-14"><a href="#cb11-14" aria-hidden="true"></a>Parse result: <span class="dv">123</span></span>
<span id="cb11-15"><a href="#cb11-15" aria-hidden="true"></a>- : <span class="dt">unit</span> = ()</span></code></pre></div>
<p>Neat!</p>
<p>Similar to PureScript records, and unlike Haskell tuples, type checking for OCaml polymorhic records is structural, not nominal.</p>
<h1 id="names---nominal---structural">Names -&gt; nominal, ??? -&gt; structural</h1>
<p>Now that we have seen structural type checking as an alternative to name-based (nominal) type checking, and some examples, here is my attempt at defining anonymous types: If named types are type checked nominally, then the types that are structurally type checked are called “anonymous”.</p>
<p>In other words:</p>
<ul>
<li>Nominally type checked types are named</li>
<li>Structurally type checked types are anonymous</li>
</ul>
<p>According to this definition, Haskell and many other languages don’t have anonymous types. PureScript records are an example to anonymous products, and OCaml polymorphic variants are an example to anonymous sums.</p>
<h1 id="conclusions">Conclusions</h1>
<p>Named types are checked nominally, anonymous types are checked structurally. According to this definition, Haskell, and many other languages, don’t have anonymous types, as all types are nominally checked.</p>
<p>Tuples are no exception: they have names, and type checked nominally.</p>
<p>PureScript records and OCaml polymorphic variants are great examples to anonymous products and sums, respectively.</p>
<!---




























# Tuples: named or anonymous?

Tuples in languages like Haskell, Rust, and OCaml, are pre-defined product
types that are often used for returning multiple values from functions, without
having to define a new type for the return value.

For example, the tuple type `(Int, Int)` in Haskell is a product with two `Int`
fields. This type is similar to our `Coordinate` example above.

Because tuples don't have "names", like our `Coordinate` has, it may seem like
tuples are unnamed, or "anonymous". This is actually not true. Tuples in most
languages are just a bunch of product types, like the ones you can define
yourself. They are often pre-defined for arities 0 to some number, and they have
a special, "mixfix" syntax, with parentheses and commas to separate the fields.
Other than that, they are no different than the ones you can define yourself.

As an example, you can see GHC's definition of tuples [here][2]. In GHC, you can
use the name directly if you don't want the mixfix syntax, like `(,) 1 2`. So
the name for an 2-ary tuple is `(,)` in Haskell, and it has a special syntax so
you can write more readable `(1, 2)` (or `(Int, Int)` in type context).

So it's clear that tuples in Haskell are not anonymous, they have names. But
what are anonymous types then? Does Haskell even have anonymous types? Before
defining anonymous types, let's briefly talk about how are names used in type
checking.

# Nominal and structural type checking

If I have two types, named `T1` and `T2`, no matter how they are defined, they
are considered different in Haskell, and most other widely used typed languages
(Rust, Java, ...). This is called "nominal" type checking, where differently
named types are considered different, even if they are "structurally" the same.
For example, `data T1 = T Int` and `data T2 = T Int` are structurally the same,
but you can't apply a value of type `T2` to a function that expects `T1`.


What does "structurally same" mean here is open to interpretation, but the
crucial part is with structural type checking, types can have different set of
fields or variants and still be compatible. We will shortly see examples of
this.

Now, here's the difficulty with defining anonymous types (and a point of
confusion, at least for me). Regardless of the syntax, I will have to introduce
some kind of type constructors for anonymous products and sums. One might always
consider those constructors as the names of the types (with type parameters
applied for the fields/ variants).

For example, if I use `*` syntax for anonymous products, like `Int * Int * Bool`
for a product type like `(Int, Int, Bool)`, you might argue that the "name" here
is `*`, and the desugared version is something like `(*) Int ((*) Int Bool)`,
and you would probably be right! In many (most?) type systems, including
Haskell's, complex types are made by applying types to type constructors. The
type constructors used for constructing product or sum types can be thought of
as the name of the types.

In that sense I think there really isn't any *obviously anonymous* types where
you will know it when you see it. Every type is constructed by applying some
number of arguments to a "name" (usually called "type constructors").

# Names -> nominal, ??? -> structural

With these definitions in mind, here's my attempt at defining anonymous types.
If named types are type checked nominally (where different names mean types are
incompatible), then the types that are structurally type checked are called
"anonymous".

In other words:

- Nominally type checked types are named
- Structurally type checked types are anonymous

In the simple structural type checking rule we've seen above, anonymous
products (constructed with `*`) and tuples (constructed with the mixfix tuple
syntax) are type checked exactly the same way. Let's add one more rule to make
them different:

- Before applying the rules given before, rearrange the type arguments to make
  the first argument of `*` a non-`*` type.

Example: if I have `(Int * Int) * (Int * Int)`, this rule rearranges it to make
it `Int * (Int * (Int * Int))`.

(This rule effectively makes `*` associative)

With this new rule we now accept these two types as compatible:

- `(Int * (Int * Int)) * Int`
- `(Int * Int) * (Int * Int)`

as they are both rearranged before checking as `Int * (Int * (Int * Int))`.

(Whether this rule is useful or desired is a different matter)

With this structural equality rule, type checking of tuples and products
constructed with `*` are different, and we call tuples named types and `*`
products anonymous.

# Anonymous sum types

Instead of inventing syntax and defining type checking for anonymous sum types,
like we did for products, I will show an example of anonymous sums in an
existing programming language: OCaml's [polymorphic variants][3].

Here's the OCaml version of our `ParseResult` type:

```ocaml
type parse_result =
  | Success of int
  | Fail of string
```

This type is nominally checked, so if you have a function that expects
`parse_result` argument, you have to pass it a `Success` or `Fail`. Anything
else will cause a type error.

Here's the polymorphic variant for the same type:

```ocaml
type parse_result = [ `Success of int | `Fail of string ]
```

Crucially, even though we use a similar syntax with the `type` keyword, this is
a type synonym. The right-hand side of this definition is an anonymous sum with
two variants, labelled `` `Success`` and `` `Fail``, with `int` and `string`
fields, respectively.

Here's an example of structural type checking of polymorphic variants. Suppose I
have a parse result handler, which, in addition to the success and failure
cases, handles some "other" case as well:

```ocaml
let f = function
  | `Success i -> Printf.printf "Parse result: %d\n" i
  | `Fail msg -> Printf.printf "Parse failed: %s\n" msg
  | `Other -> Printf.printf "Wat?\n"
```

Type of this function as inferred by the OCaml compiler is:

```ocaml
[< `Fail of string | `Other | `Success of x ] -> unit
```

What this type says is that the function accepts any polymorphic variant that
has the tags `Fail`, `Other`, and `Success` (with the specified field types), or
some subset of these tags. So if I have a value of type `parse_result`:

```ocaml
let x : parse_result = `Success 123
```

I can pass it to `f`, even though `f`'s argument type is not exactly
`parse_result`. Here's the full example, run in [utop][9]: (`utop #` part is the
prompt, lines after `;;` are utop outputs)

```ocaml
utop # type parse_result = [ `Success of int | `Fail of string ];;
type parse_result = [ `Fail of string | `Success of int ]

utop # let f = function
  | `Success i -> Printf.printf "Parse result: %d\n" i
  | `Fail msg -> Printf.printf "Parse failed: %s\n" msg
  | `Other -> Printf.printf "Wat?\n";;
val f : [< `Fail of string | `Other | `Success of int ] -> unit = <fun>

utop # let x : parse_result = `Success 123;;
val x : parse_result = `Success 123

utop # f x;;
Parse result: 123
- : unit = ()
```

Neat!

# Conclusions

Named types are checked nominally, anonymous types are checked structurally.
According to this definition, Haskell, and many other languages, don't have
anonymous types, as all types are nominally checked.

OCaml's [polymorphic variants][3] are a great example to anonymous sums.

For real-world anonymous products, it would be a shame to not mention records
and row types[^1]. A record is a product type with labelled fields, for example:
`{ a : Int, b : Bool }`. Row types allow (among other things) very flexible type
checking of records, where you can (without subtyping) pass a record with more
fields when less is expected. With row types, unlike subtyping, if you have a
function that expects a record type like `{ a : Int, b : Bool }` and returns the
argument after using or modifying the fields `a` and/or `b`, and pass the
function a record with more fields, like `{ a : Int, b : Bool, c : String }`, as
the return type you get your original record with 3 fields. More concretely:

```
{ a : Int, b : Bool, ..r } -> { a : Int, b : Bool, ..r }
```

is the type of a function that takes a record with fields `a` and `b` with the
specified types, and *possibly* more fields. These extra fields are represented
by `r`, which appears in both input and output types. This means you don't lose
the extra fields if you pass a record with more fields to this function, unlike
in a system with subtyping. With subtyping, if you have a function with type

```
{ a : Int, b : Bool } -> { a : Int, b : Bool }
```

and pass `{ a : Int, b : Bool, c : String }` to such a function, you lose the
field `c` in the return value, because the return type only mentions `a` and
`b`, without the "extra stuff" part as we've seen in the row polymorphic
version.

(As as aside, I'd like to mention that I really like row types. My first
exposure to them was back in 2013 ([1][5], [2][6]): I implemented two type
systems, one with row types and one for a multi-stage language, proved soundness
of the systems, gave a type and term translation from one to the other, and
proved that if your program is well-typed, then the translation of it is also
well-typed.)

My favorite paper on row-polymorphic records is probably (1). (2) uses row types
for algebraic effects. (3) uses rows for variants (sums).

-->
<hr />
<p>Thanks to <a href="https://twitter.com/_gilmi/">@_gilmi</a> and <a href="https://twitter.com/madgen_/">@madgen_</a> for their helpful comments on a draft of this blog post.</p>
<section class="footnotes" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p>With the exception of type synonyms. Type synonyms can be considered as simple macros for substituting types for names before type checking.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2" role="doc-endnote"><p>In Haskell, reordering stuff at the type level is often done with type families (type-level functions). Types are still checked nominally, but by rearranging them before type checking you can often have something somewhat similar to structural checking.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>]]></summary>
</entry>
<entry>
    <title>Conditional compilation based on crate type</title>
    <link href="http://osa1.net/posts/2020-12-24-crate-type-conditional.html" />
    <id>http://osa1.net/posts/2020-12-24-crate-type-conditional.html</id>
    <published>2020-12-24T00:00:00Z</published>
    <updated>2020-12-24T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Suppose you have a <code>no_std</code> crate that you want to use in two ways:</p>
<ol type="1">
<li>As a self-contained static library, to link with other (non-Rust) code</li>
<li>As a Rust library, to import from another crate to test it</li>
</ol>
<p>(1) is the main use case for this library. (2) is because you want to test this library and you want to be able to use Rust’s <code>std</code> and other Rust libraries for testing.</p>
<p>The Rust crate type for (1) is <code>staticlib</code>. For (2) you need <code>rlib</code>. (<a href="https://doc.rust-lang.org/reference/linkage.html">documentation on crate types</a>)</p>
<p>Here’s the problem. To be able to generate <code>staticlib</code> you need to implement a <a href="https://doc.rust-lang.org/nomicon/panic-handler.html">panic handler</a> as otherwise the code won’t know how to panic<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>. However, if you define a panic handler, you won’t be able to use your crate in other crates anymore as your panic handler will clash with the <code>std</code> panic handler.</p>
<p>4 files needed to demonstrate this:</p>
<pre><code>-- Cargo.toml for the library
[package]
name = &quot;nostd_lib&quot;
version = &quot;0.1.0&quot;
authors = []
edition = &quot;2018&quot;

[lib]
crate-type = [&quot;staticlib&quot;, &quot;rlib&quot;]

[profile.dev]
panic = &quot;abort&quot;

[profile.release]
panic = &quot;abort&quot;

-- lib.rs
#![no_std]

#[panic_handler]
fn panic(_: &amp;core::panic::PanicInfo) -&gt; ! {
    loop {}
}

-- Cargo.toml for the importing crate
[package]
name = &quot;nostd_bin&quot;
version = &quot;0.1.0&quot;
authors = []
edition = &quot;2018&quot;

[dependencies]
nostd_lib = { path = &quot;../nostd_lib&quot; }

-- main.rs
extern crate nostd_lib;

fn main() {}</code></pre>
<p>The library builds fine, but if you try to build <code>nostd_bin</code> you’ll get this error:</p>
<pre><code>error: duplicate lang item in crate `nostd_lib` (which `nostd_bin` depends on): `panic_impl`.
  |
  = note: the lang item is first defined in crate `std` (which `nostd_bin` depends on)
  = note: first definition in `std` loaded from ...
  = note: second definition in `nostd_lib` loaded from ...</code></pre>
<p>Which says you now have two panic handlers: one in <code>std</code> and one in your library.</p>
<p>If you remove the panic handler in the library then you won’t be able to build the library anymore:</p>
<pre><code>error: `#[panic_handler]` function required, but not found</code></pre>
<p>So you need some kind of conditional compilation, to generate panic handler only when generating <code>staticlib</code>. Unfortunately conditional compilation based on crate type is <a href="https://github.com/rust-lang/rust/issues/20267">currently not possible</a>. It is also <a href="https://github.com/rust-lang/cargo/issues/6160">not possible to specify target crate type when invoking cargo</a>.</p>
<p>The least hacky way I could find to solve this (and without using anything other than just <code>cargo build</code> to build) is by having two <code>Cargo.toml</code> files.</p>
<p>Cargo really wants manifest files to be named <code>Cargo.toml</code>, so we put the files in different directories. In my case the top-level one is for <code>staticlib</code> and it looks like this:</p>
<pre><code>[package]
name = &quot;nostd_lib&quot;
version = &quot;0.1.0&quot;
authors = []
edition = &quot;2018&quot;

[features]
default = [&quot;panic_handler&quot;]
panic_handler = []

[lib]
crate-type = [&quot;staticlib&quot;]

[profile.dev]
panic = &quot;abort&quot;

[profile.release]
panic = &quot;abort&quot;</code></pre>
<p>I also update <code>lib.rs</code> to only define the panic handler when the feature is enabled:</p>
<pre><code>#[cfg(feature = &quot;panic_handler&quot;)]
#[panic_handler]
fn panic(_: &amp;core::panic::PanicInfo) -&gt; ! {
    ...
}</code></pre>
<p>Now I can build the library at the library’s top-level with just <code>cargo build</code>. Because the <code>panic_handler</code> feature is enabled by default in this <code>Cargo.toml</code>, the panic handler will be defined by default with just <code>cargo build</code> and static library will build and work fine.</p>
<p>For the <code>rlib</code> I create a similar <code>Cargo.toml</code> in <code>rlib</code> directory:</p>
<pre><code>[package]
name = &quot;nostd_lib&quot;
version = &quot;0.1.0&quot;
authors = []
edition = &quot;2018&quot;

[lib]
crate-type = [&quot;rlib&quot;]
path = &quot;../src/lib.rs&quot;

[profile.dev]
panic = &quot;abort&quot;

[profile.release]
panic = &quot;abort&quot;</code></pre>
<p>The differences are: this one only generates <code>rlib</code>, doesn’t define the <code>panic_handler</code> feature, and specifies the library source path explicitly (as it’s not in the default location relative to this <code>Cargo.toml</code>). It’s fine to refer to a feature that you never define in <code>Cargo.toml</code> in your code, so <code>lib.rs</code> is still fine, and the panic handler will never be built when you build the crate with this <code>Cargo.toml</code>.</p>
<p>Now in the importing crate I use this <code>Cargo.toml</code> instead of the top-level one:</p>
<pre><code>[dependencies]
nostd_lib = { path = &quot;../nostd_lib/rlib&quot; }</code></pre>
<p>And it works fine. The downside is I have two <code>Cargo.toml</code> files now, but in my case that’s not a big deal, as my <code>Cargo.toml</code> is quite small and have no dependencies other than <code>libc</code><a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>.</p>
<p>I hope this is helpful. If you know any better way to do conditional compilation based on crate types, or to solve the problem of generating usable <code>staticlib</code> and <code>rlib</code>s from a single <code>no_std</code> crate, let me know!</p>
<section class="footnotes" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p>You need a <code>panic_handler</code> even if you never panic in your crate (assuming that’s possible). For example, you can’t compile <code>fn main() {}</code> with <code>no_std</code>, <code>panic=abort</code>, and without a <code>panic_handler</code>: the compiler complains about the missing panic handler.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2" role="doc-endnote"><p>If you’re working on a <code>no_std</code> crate I think you won’t be able to find a lot of libraries that you can use anyway.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>]]></summary>
</entry>
<entry>
    <title>8 years of Haskell</title>
    <link href="http://osa1.net/posts/2020-06-30-8-years-of-haskell.html" />
    <id>http://osa1.net/posts/2020-06-30-8-years-of-haskell.html</id>
    <published>2020-06-30T00:00:00Z</published>
    <updated>2020-06-30T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>21 Jun 2020 was my last day at Well-Typed and as a GHC maintainer/developer. On 22nd I joined the programming language team at <a href="https://dfinity.org/">DFINITY</a> to work on the <a href="https://sdk.dfinity.org/docs/language-guide/motoko.html">Motoko programming language</a>.</p>
<p>Here’s the summary of my 8 years writing Haskell pretty much non-stop:</p>
<ul>
<li><p>In 2012 I wrote <a href="https://github.com/osa1/dolap-chat">my first Haskell program</a>, which was a chat server. I was reading <a href="http://book.realworldhaskell.org/">“Real World Haskell”</a> and <a href="http://learnyouahaskell.com/">“Learn You a Haskell for Great Good!”</a> at the time and applying what I learned on this project.</p></li>
<li><p>In the same year I implemented <a href="https://github.com/osa1/toylisp">my first programming language in Haskell</a>. I don’t remember much about this project, I think it may be just a few extensions over the excellent Haskell tutorial <a href="https://en.wikibooks.org/wiki/Write_Yourself_a_Scheme_in_48_Hours">“Write Yourself a Scheme in 48 hours”</a>.</p></li>
<li><p>Also in 2012 I made a <a href="https://github.com/faylang/fay/commits?author=osa1">few commits</a> to the programming language Fay. This was my first contribution to an open source compiler not written by me.</p></li>
<li><p>In 2013 I worked on four PL implementations, two of which were implemented from scratch in Haskell: A <a href="https://github.com/osa1/MANTI">Prolog implementation</a> and a <a href="https://github.com/osa1/Shen.hs">K Lambda interpreter</a>.</p>
<p>The other two projects were: <a href="https://github.com/ozusrl/SubtypedQuotedML">A multi-stage ML-like language written in OCaml</a>, and K Framework (in Java).</p></li>
<li><p>In 2014 I was accepted to Google Summer of Code to work on <a href="https://osa1.net/posts/2014-06-20-stack-traces-in-ghcjs.html">adding stack traces to GHCJS</a>. The project was successful, and I made <a href="https://github.com/ghcjs/ghcjs/graphs/contributors">88 commits</a> to GHCJS during this period.</p>
<p>This was my first introduction to GHC. I made only <a href="https://gitlab.haskell.org/ghc/ghc/commit/b3d9636af37cfafbc947b69dff5747065f437804">one commit</a> to GHC during this time, but I started reading the RTS and code generator to be able to implement cost-centre stacks in GHCJS, which taught me a lot.</p></li>
<li><p>Also in 2014, I briefly worked at a startup where I wrote Haskell.</p></li>
<li><p>In 2015 I joined Indiana University to do PhD in programming languages. In my first semester I worked on the paper <a href="http://ezyang.com/papers/ezyang15-cnf.pdf">“Efficient Communication and Collection with Compact Normal Forms”</a> which was about a GHC extension. The paper was published the same year at ICFP.</p></li>
<li><p>In the same year I briefly worked on a <a href="https://github.com/osa1/rho-torrent">torrent client in Haskell</a>.</p></li>
<li><p>According to git logs, 2015 was the year where I started making some larger commits to GHC. I think I made a few dozen commits that year. What was happening in the background is that I was working on unboxed sums. At Haskell Implementors Workshop in 2015 my advisor gave a presentation on <a href="https://osa1.net/posts/2015-11-13-data-repr-1.html">efficiency of data representation in Haskell</a>. I don’t remember how the story developed, but I think we also talked to a few people at ICFP on how to improve the situation, and one of the idea that came up was unboxed sums. IIRC I started working on it soon after returning from ICFP.</p>
<p>The first somewhat working version was implemented as a plugin, using lots of unsafe coercions under the hood. It was good enough to run some examples.</p></li>
<li><p>(In 2015, I also studied various metaprogramming and partial evaluation ideas quite extensively. If you look at my blog posts published in 2015 you’ll see a lot of related blog posts. There are also a few related git repositories in my Github page. I also gave a related talk at HIW 2015.)</p></li>
<li><p>Early 2016, I don’t remember what I was doing in too much detail. I remember taking an advanced OS class around that time and enjoying it very much. This was also the time where I started to realize that the tools I’m using (mostly GHC) are full of bugs, and very inefficient. I kept studying program transformation ideas, with the goal of making Haskell “fast”. I also started using C more, partly for the OS class, but also in my hobby projects. For example, the first commit of <a href="https://github.com/osa1/tiny">tiny</a> was made in January 2016 and <a href="https://github.com/osa1/tiny/commit/06accfabf941cb17c7efbb37dc55ed0c33dedc20">the code was in C</a>.</p></li>
<li><p>In mid-2016 I left Bloomington for Cambridge, UK, for an internship at Microsoft Research with SPJ. We mainly worked on implementing unboxed sums properly in the compiler (instead of as a hacky plugin), but I also did a lot of GHC maintenance work there with supervision of SPJ.</p>
<p>Unboxed sums was merged <a href="https://gitlab.haskell.org/ghc/ghc/-/commit/714bebff44076061d0a719c4eda2cfd213b7ac3d">during my time at MSR</a>.</p>
<p>In the rest of the internship I did a lot of reading, did GHC maintenance, and biked around Cambridge.</p></li>
<li><p>Most importantly, during my time at MSR I realized that I’m no longer interested in academic research. I don’t enjoy writing papers. I don’t feel like pushing a field forward while most of the tools I use every day are badly broken, inefficient, usually both. I started having job interviews while I was in the UK. I visited two companies for interviews, one in London, another one in Cambridge.</p>
<p>I also emailed my advisor, saying that I don’t want to come back to Bloomington.</p></li>
<li><p>Job interviews went badly, and I was back at Indiana University. Rest of 2016 was pretty horrible. I was depressed. I had no interest in research. I still <a href="https://dl.acm.org/doi/pdf/10.1145/2851141.2851142">helped publishing a paper</a>, but I did not enjoy the process.</p>
<p>I still spent my last semester somewhat productively. I took enough classes this semester to leave IU with a masters degree, instead of empty handed (I was a PhD student, not masters). I also had some good job interviews and met good people from the Haskell community.</p>
<p>By the end of 2016 I accepted a job offer and left IU with masters degree to write Haskell for a startup.</p></li>
<li><p>In 2017 I worked for this startup for a year. I wrote lots of networking and concurrent code, and learned a lot about these topics and exception handling in Haskell. Until this my Haskell experience was mainly in the context of compilers, so this was quite educational for me.</p>
<p>I left the company at the end of that year to join Well-Typed to work on GHC full-time.</p></li>
<li><p>My time at Well-Typed was great, but also full of challenges, mainly related to working remotely.</p>
<p>I worked on GHC between 30 and 40 hours a week (some weeks as little as 24 hours, but no less than that). Few weeks after I joined I started working on <a href="https://osa1.net/posts/2018-10-22-gc-work-presented.html">a new garbage collector</a> with a colleague. When I joined the project there were only type definitions in header files, and almost no code. I implemented the first sequential prototype of the new collector. After that we started collaborating more closely with my colleague while implementing the concurrent version. We found many bugs in both the design and implementation, and sorted out many edge cases during this time. I thoroughly enjoyed working on this project, even though it was clearly the most challenging project I ever worked on.</p>
<p>After the garbage collector I kept working as a maintainer until I left the company on a Sunday, Jun 21st, 2020. I made my last commit to <a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/3478">a merge request</a> that I was working on 21st.</p></li>
<li><p>On 22 Jun 2020 I joined <a href="https://dfinity.org/">DFINITY</a> to work on the <a href="https://sdk.dfinity.org/docs/language-guide/motoko.html">Motoko programming language</a>, and this is where the story ends.</p></li>
</ul>
<p>At the time of this writing I have 383 commits to GHC and I’m the 14th contributor with most commits. It feels bad to leave a project that I liked and contributed so much, but it’s also the right thing to do. After the GC was merged I started spending my time less and less productively, for many reasons, and I had lost my motivation to improve Haskell-the-language and GHC. Perhaps I can write more about these in another post.</p>]]></summary>
</entry>
<entry>
    <title>gdb breakpoints with conditions on backtrace</title>
    <link href="http://osa1.net/posts/2020-04-25-breakpoint-backtrace-conditionals.html" />
    <id>http://osa1.net/posts/2020-04-25-breakpoint-backtrace-conditionals.html</id>
    <published>2020-04-25T00:00:00Z</published>
    <updated>2020-04-25T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Being able so specify conditions in gdb breakpoints is quite useful. For example, if I’m interested in <code>mmap(NULL, ...)</code> calls I can do</p>
<pre><code>break mmap if addr == 0</code></pre>
<p>and gdb doesn’t break on <code>mmap</code> when the <code>addr == 0</code> condition doesn’t hold.</p>
<p>I’ve used this many times to great effect, but it’s not always sufficient, sometimes I need to break not when a variable or argument has a specific value but the function is called (directly or indirectly) from another function. For example, when debugging a GHC RTS issue I sometimes want to inspect <code>mmap</code> calls made by the garbage collector.</p>
<p>As far as I know this is not possible using the standard <code>break</code> syntax, but gdb provides a <a href="https://sourceware.org/gdb/onlinedocs/gdb/Python-API.html">Python API</a> that allows setting breakpoints with conditions implemented in Python. Using this API it’s takes a few lines to implement this:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="kw">class</span> FrameBp(gdb.Breakpoint):</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, spec, <span class="op">*</span>args, frame<span class="op">=</span><span class="va">None</span>, <span class="op">**</span>kwargs):</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a>        <span class="va">self</span>.frame <span class="op">=</span> frame</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a>        <span class="bu">super</span>(FrameBp, <span class="va">self</span>).<span class="fu">__init__</span>(spec, <span class="op">*</span>args, <span class="op">**</span>kwargs)</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a>    <span class="kw">def</span> stop (<span class="va">self</span>):</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a>        frame <span class="op">=</span> gdb.selected_frame().older()</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true"></a>        <span class="cf">while</span> frame:</span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true"></a>            <span class="cf">if</span> frame.name() <span class="op">==</span> <span class="va">self</span>.frame:</span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true"></a>                <span class="cf">return</span> <span class="va">True</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true"></a></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true"></a>            frame <span class="op">=</span> frame.older()</span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true"></a></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true"></a>        <span class="cf">return</span> <span class="va">False</span></span></code></pre></div>
<p>When calling the constructor the first argument is the breakpoint specifier, which is basically the part after <code>break ...</code> in gdb’s break command. The <code>frame</code> argument is the function we look for before actually breaking. We only break if the function exists in the backtrace. Here’s an example use:</p>
<pre><code>&gt;&gt;&gt; python FrameBp(&quot;mmap&quot;, frame=&quot;GarbageCollect&quot;)
Breakpoint 1 at 0x7f3366243f00: file ../sysdeps/unix/sysv/linux/mmap64.c, line 44.</code></pre>
<p>This will only break on <code>mmap</code> if the backtrace has <code>GarbageCollect</code> at some point. An example backtrace when the breakpoint is hit:</p>
<pre><code>Breakpoint 1, __GI___mmap64 (addr=0x4200200000, len=1048576, prot=3, flags=50, fd=-1, offset=0) at ../sysdeps/unix/sysv/linux/mmap64.c:44
44        if (offset &amp; MMAP_OFF_MASK)

&gt;&gt;&gt; bt
#0  __GI___mmap64 (addr=0x4200200000, len=1048576, prot=3, flags=50, fd=-1, offset=0) at ../sysdeps/unix/sysv/linux/mmap64.c:44

...

#19 0x0000000003022c83 in GarbageCollect (collect_gen=0, do_heap_census=false, deadlock_detect=false, gc_type=0, cap=0x37ef500
&lt;MainCapability&gt;, idle_cap=0x0) at rts/sm/GC.c:449

...</code></pre>
<p>With some effort you could probably turn this into a proper gdb command and run it without the <code>python ...</code> part, but so far this works good enough for me.</p>]]></summary>
</entry>
<entry>
    <title>New blog post published on Well-Typed's blog</title>
    <link href="http://osa1.net/posts/2020-03-25-new-blog-post.html" />
    <id>http://osa1.net/posts/2020-03-25-new-blog-post.html</id>
    <published>2020-03-25T00:00:00Z</published>
    <updated>2020-03-25T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I recently published a new post on <a href="http://blog.well-typed.com/">Well-Typed’s blog</a>: <a href="http://www.well-typed.com/blog/2020/03/functions-in-compact-regions/">“The problem with adding functions to compact regions”</a>.</p>
<p>It’s also shared on <a href="https://twitter.com/welltyped/status/1242765765658447873">Twitter</a> and <a href="https://www.reddit.com/r/haskell/comments/foob2l/the_problem_with_adding_functions_to_compact/">/r/haskell</a>. If you have any questions/comments feel free to ping me in any of these places, or add a comment below!</p>]]></summary>
</entry>
<entry>
    <title>Knot-tying: two more examples, and an alternative</title>
    <link href="http://osa1.net/posts/2020-02-27-knot-tying-an-alternative.html" />
    <id>http://osa1.net/posts/2020-02-27-knot-tying-an-alternative.html</id>
    <published>2020-02-27T00:00:00Z</published>
    <updated>2020-02-27T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>In the <a href="/posts/2020-02-21-knot-tying-why-how-opinions.html">previous post</a> we’ve looked at a representation of expressions in a programming language, what the representation makes easy and where we have to use knot-tying.</p>
<p>In this post I’m going to give two more examples, using the same expression representation from the previous post, and then talk about how to implement our passes using a different representation, without knot-tying.</p>
<h1 id="example-attaching-typing-information-to-ids">Example: attaching typing information to Ids</h1>
<p>Previously we attached arity and unfolding information to <code>Id</code>s. Now suppose that our language is typed, and up to some point our transformations rely on typing information. Similar to arity and unfolding fields we add one more field to <code>Id</code>:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Id</span> <span class="ot">=</span> <span class="dt">Id</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a>  { <span class="op">..</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>  ,<span class="ot"> idType ::</span> <span class="dt">Maybe</span> <span class="dt">Type</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a>  }</span></code></pre></div>
<p>The <code>Maybe</code> part is because when we no longer need the types we want to be able to clear the type fields to make the AST smaller. While we have only one heap object per <code>Id</code>, in an average program there’s still a lot of different <code>Id</code>s, and <code>Type</code> representation can get quite large, so this is worthwhile. This makes the working set smaller, which causes less GC work and improves compiler performance.</p>
<p>In our cyclic AST representation the only way to implement this without losing sharing is with a full-pass over the entire program, using knot-tying. The code is similar to the ones in the previous post.</p>
<h1 id="example-attaching-unfoldings-to-ids">Example: attaching unfoldings to Ids</h1>
<p>Remember that in the previous post we represented the AST as:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Expr</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a>  <span class="ot">=</span> <span class="dt">IdE</span> <span class="dt">Id</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a>  <span class="op">|</span> <span class="dt">IntE</span> <span class="dt">Int</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a>  <span class="op">|</span> <span class="dt">Lam</span> <span class="dt">Id</span> <span class="dt">Expr</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a>  <span class="op">|</span> <span class="dt">App</span> <span class="dt">Expr</span> <span class="dt">Expr</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a>  <span class="op">|</span> <span class="dt">IfE</span> <span class="dt">Expr</span> <span class="dt">Expr</span> <span class="dt">Expr</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a>  <span class="op">|</span> <span class="dt">Let</span> <span class="dt">Id</span> <span class="dt">Expr</span> <span class="dt">Expr</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Id</span> <span class="ot">=</span> <span class="dt">Id</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true"></a>  {<span class="ot"> idName ::</span> <span class="dt">String</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true"></a>    <span class="co">-- ^ Unique name of the identifier</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true"></a>  ,<span class="ot"> idArity ::</span> <span class="dt">Int</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true"></a>    <span class="co">-- ^ Arity of a lambda. 0 for non-lambdas.</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true"></a>  ,<span class="ot"> idUnfolding ::</span> <span class="dt">Maybe</span> <span class="dt">Expr</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true"></a>    <span class="co">-- ^ RHS of a binder, used for inlining</span></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true"></a>  }</span></code></pre></div>
<p>In this representation if I have a recursive definition like</p>
<pre><code>let fac = \x . if x then x * fac (x - 1) else 1 in fac 5</code></pre>
<p>In <code>fac</code> used in lambda body I want to be able to do <code>idUnfolding</code> and get the definition of this lambda. So the lambda refers to the <code>Id</code> for <code>fac</code>, and <code>fac</code> refers to the lambda in its <code>idUnfolding</code> field, forming a cycle.</p>
<p>In this representation only way to implement this is with knot-tying. An implementation that maintains a map from binders to their RHSs to update unfoldings of <code>Id</code>s in occurrence position does not work, because when we update an occurrence of the binder in its own RHS (i.e. in a recursive <code>let</code>) we end up invalidating the <code>RHS</code> that we’ve added to the map.</p>
<p>Here’s a knot-tying implementation that adds unfoldings (only the interesting bits):</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="ot">addUnfoldings ::</span> <span class="dt">Expr</span> <span class="ot">-&gt;</span> <span class="dt">Expr</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a>addUnfoldings <span class="ot">=</span> go M.empty</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a>  <span class="kw">where</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a><span class="ot">    go ::</span> <span class="dt">M.Map</span> <span class="dt">String</span> <span class="dt">Id</span> <span class="ot">-&gt;</span> <span class="dt">Expr</span> <span class="ot">-&gt;</span> <span class="dt">Expr</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true"></a>    go ids e <span class="ot">=</span> <span class="kw">case</span> e <span class="kw">of</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true"></a></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true"></a>      <span class="dt">IdE</span> <span class="fu">id</span> <span class="ot">-&gt;</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true"></a>        <span class="dt">IdE</span> (fromMaybe <span class="fu">id</span> (M.lookup (idName <span class="fu">id</span>) ids))</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true"></a></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true"></a>      <span class="dt">Let</span> bndr rhs body <span class="ot">-&gt;</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true"></a>        <span class="kw">let</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true"></a>          ids&#39; <span class="ot">=</span> M.insert (idName bndr) bndr&#39; ids</span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true"></a>          rhs&#39; <span class="ot">=</span> go ids&#39; rhs</span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true"></a>          bndr&#39; <span class="ot">=</span> bndr{ idUnfolding <span class="ot">=</span> <span class="dt">Just</span> rhs&#39; }</span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true"></a>        <span class="kw">in</span></span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true"></a>          <span class="dt">Let</span> bndr{ idUnfolding <span class="ot">=</span> <span class="dt">Just</span> rhs&#39; } rhs&#39; (go ids&#39; body)</span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true"></a></span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true"></a>      <span class="op">...</span></span></code></pre></div>
<p>As before we tie the knot in <code>let</code> case and use it in <code>Id</code> case.</p>
<p>It’s also possible to initialize <code>idUnfolding</code> fields when parsing, using monadic knot-tying (<a href="http://hackage.haskell.org/package/base-4.12.0.0/docs/Control-Monad-Fix.html">MonadFix</a>). Full code is shown at the end of this post, but the interesting bit is when parsing <code>let</code>s and <code>Id</code>s:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="ot">parseLet ::</span> <span class="dt">Parser</span> <span class="dt">Expr</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a>parseLet <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a>    _ <span class="ot">&lt;-</span> string <span class="st">&quot;let&quot;</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a>    id_name <span class="ot">&lt;-</span> parseIdName</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true"></a>    _ <span class="ot">&lt;-</span> char <span class="ch">&#39;=&#39;</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true"></a></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true"></a>    (<span class="fu">id</span>, rhs) <span class="ot">&lt;-</span> mfix <span class="op">$</span> \ <span class="op">~</span>(id_, _rhs) <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true"></a>      modify (Map.insert id_name id_)</span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true"></a>      rhs <span class="ot">&lt;-</span> parseExpr</span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true"></a>      <span class="fu">return</span> (<span class="dt">Id</span>{ idName <span class="ot">=</span> id_name, idArity <span class="ot">=</span> <span class="dv">0</span>, idUnfolding <span class="ot">=</span> <span class="dt">Just</span> rhs }, rhs)</span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true"></a></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true"></a>    _ <span class="ot">&lt;-</span> string <span class="st">&quot;in&quot;</span></span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true"></a>    body <span class="ot">&lt;-</span> parseExpr</span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true"></a>    <span class="fu">return</span> (<span class="dt">Let</span> <span class="fu">id</span> rhs body)</span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true"></a></span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true"></a><span class="ot">parseId&#39; ::</span> <span class="dt">Parser</span> <span class="dt">Id</span></span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true"></a>parseId&#39; <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true"></a>    name <span class="ot">&lt;-</span> parseIdName</span>
<span id="cb5-19"><a href="#cb5-19" aria-hidden="true"></a>    id_map <span class="ot">&lt;-</span> get</span>
<span id="cb5-20"><a href="#cb5-20" aria-hidden="true"></a>    <span class="kw">let</span> def <span class="ot">=</span> <span class="dt">Id</span>{ idName <span class="ot">=</span> name, idArity <span class="ot">=</span> <span class="dv">0</span>, idUnfolding <span class="ot">=</span> <span class="dt">Nothing</span> }</span>
<span id="cb5-21"><a href="#cb5-21" aria-hidden="true"></a>    <span class="fu">return</span> (fromMaybe def (Map.lookup name id_map))</span></code></pre></div>
<p>The idea is very similar. When parsing a <code>let</code> we add a thunk for the binder with correct unfolding to a map. The map is then used when parsing <code>Id</code>s in the RHS and body of the <code>let</code>.</p>
<h1 id="an-alternative">An alternative</h1>
<p>A well-known way of associating information with identifiers in a compiler is by using a “symbol table”. Instead of adding information about <code>Id</code>s directly in the <code>Id</code> fields, we maintain a table (or multiple tables) that map <code>Id</code>s to the relevant information. Here’s one way to do this in our language:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Expr</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a>  <span class="ot">=</span> <span class="dt">IdE</span> <span class="dt">String</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a>  <span class="op">...</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">IdInfo</span> <span class="ot">=</span> <span class="dt">IdInfo</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true"></a>  {<span class="ot"> idArity ::</span> <span class="dt">Int</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true"></a>    <span class="co">-- ^ Arity of a lambda. 0 for non-lambdas.</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true"></a>  ,<span class="ot"> idUnfolding ::</span> <span class="dt">Maybe</span> <span class="dt">Expr</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true"></a>    <span class="co">-- ^ RHS of a binder, used for inlining</span></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true"></a>  }</span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true"></a></span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">SymTbl</span> <span class="ot">=</span> <span class="dt">Map.Map</span> <span class="dt">String</span> <span class="dt">IdInfo</span></span></code></pre></div>
<p>In this representation we have to refer to the table for <code>idArity</code> or <code>idUnfolding</code>. That’s slightly more work than the previous representation where we could simply use the fields of an <code>Id</code>, but a lot of other things become much simpler and efficient.</p>
<p>Here’s <code>dropUnusedBindings</code> in this representation (only the interesting bits, full code is at the end of this post):</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a><span class="ot">dropUnusedBindings ::</span> <span class="dt">Expr</span> <span class="ot">-&gt;</span> <span class="dt">State</span> <span class="dt">SymTbl</span> <span class="dt">Expr</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a>dropUnusedBindings <span class="ot">=</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true"></a>    <span class="fu">fmap</span> <span class="fu">snd</span> <span class="op">.</span> go Set.empty</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true"></a>  <span class="kw">where</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true"></a><span class="ot">    go ::</span> <span class="dt">Set.Set</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Expr</span> <span class="ot">-&gt;</span> <span class="dt">State</span> <span class="dt">SymTbl</span> (<span class="dt">Set.Set</span> <span class="dt">String</span>, <span class="dt">Expr</span>)</span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true"></a>    go free_vars e0 <span class="ot">=</span> <span class="kw">case</span> e0 <span class="kw">of</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true"></a></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true"></a>      <span class="dt">Let</span> bndr e1 e2 <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true"></a>        (free2, e2&#39;) <span class="ot">&lt;-</span> go free_vars e2</span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true"></a>        <span class="kw">if</span> Set.member bndr free2 <span class="kw">then</span> <span class="kw">do</span></span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true"></a>          (free1, e1&#39;) <span class="ot">&lt;-</span> go free_vars e1</span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true"></a>          setIdArity bndr (countLambdas e1&#39;)</span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true"></a>          <span class="fu">return</span> (Set.delete bndr (Set.union free1 free2), <span class="dt">Let</span> bndr e1&#39; e2&#39;)</span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true"></a>        <span class="kw">else</span></span>
<span id="cb7-15"><a href="#cb7-15" aria-hidden="true"></a>          <span class="fu">return</span> (free2, e2&#39;)</span>
<span id="cb7-16"><a href="#cb7-16" aria-hidden="true"></a></span>
<span id="cb7-17"><a href="#cb7-17" aria-hidden="true"></a>      <span class="op">...</span></span></code></pre></div>
<p>Our pass is now stateful (updates the symbol table) and written in monadic style. Knot-tying is gone. We update the symbol table after processing a <code>let</code> RHS. Because <code>Id</code>s no longer have the arity information we don’t need to update anything other than the symbol table.</p>
<p>It’s now trivial to implement <code>addUnfoldings</code>:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a><span class="ot">addUnfoldings ::</span> <span class="dt">Expr</span> <span class="ot">-&gt;</span> <span class="dt">State</span> <span class="dt">SymTbl</span> ()</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true"></a>addUnfoldings e0 <span class="ot">=</span> <span class="kw">case</span> e0 <span class="kw">of</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true"></a></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true"></a>    <span class="dt">IdE</span>{} <span class="ot">-&gt;</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true"></a>      <span class="fu">return</span> ()</span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true"></a></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true"></a>    <span class="dt">IntE</span>{} <span class="ot">-&gt;</span></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true"></a>      <span class="fu">return</span> ()</span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true"></a></span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true"></a>    <span class="dt">Lam</span> arg body <span class="ot">-&gt;</span></span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true"></a>      addUnfoldings body</span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true"></a></span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true"></a>    <span class="dt">App</span> e1 e2 <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true"></a>      addUnfoldings e1</span>
<span id="cb8-15"><a href="#cb8-15" aria-hidden="true"></a>      addUnfoldings e2</span>
<span id="cb8-16"><a href="#cb8-16" aria-hidden="true"></a></span>
<span id="cb8-17"><a href="#cb8-17" aria-hidden="true"></a>    <span class="dt">IfE</span> e1 e2 e3 <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb8-18"><a href="#cb8-18" aria-hidden="true"></a>      addUnfoldings e1</span>
<span id="cb8-19"><a href="#cb8-19" aria-hidden="true"></a>      addUnfoldings e2</span>
<span id="cb8-20"><a href="#cb8-20" aria-hidden="true"></a>      addUnfoldings e3</span>
<span id="cb8-21"><a href="#cb8-21" aria-hidden="true"></a></span>
<span id="cb8-22"><a href="#cb8-22" aria-hidden="true"></a>    <span class="dt">Let</span> bndr e1 e2 <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb8-23"><a href="#cb8-23" aria-hidden="true"></a>      addUnfoldings e1</span>
<span id="cb8-24"><a href="#cb8-24" aria-hidden="true"></a>      addUnfoldings e2</span>
<span id="cb8-25"><a href="#cb8-25" aria-hidden="true"></a>      setIdUnfolding bndr e1</span></code></pre></div>
<p>Doing it during parsing is also trivial, and shown in the full code at the end of this post. Updating typing information when we no longer need them is simply</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true"></a><span class="ot">dropTypes ::</span> <span class="dt">State</span> <span class="dt">SymTbl</span> ()</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true"></a>dropTypes <span class="ot">=</span> modify (Map.map (\id_info <span class="ot">-&gt;</span> id_info{ idType <span class="ot">=</span> <span class="dt">Nothing</span> }))</span></code></pre></div>
<p>We could also maintain a separate table for typing information, in which case all we had to do would be to stop using that table.</p>
<p>Easy!</p>
<h1 id="final-remarks">Final remarks</h1>
<p>Cyclic AST representation in a purely functional language necessitates knot-tying and relies on lazy evaluation. A well-known alternative is using symbol tables. It works across languages (does not rely on lazy evaluation) and keeps the code simple.</p>
<p>Cyclic representations make using the information easier, while symbol tables make updating easier. Code for updating the information is shown above and the previous post. For using the information, compare:</p>
<pre><code>-- Get the information in a cyclic representation
... (idUnfolding id) ...

-- Get the information using a symbol table
arity &lt;- getIdUnfolding id</code></pre>
<p>To me the monadic version is not too bad in terms of verbosity or convenience, especially because Haskell makes state passing so easy.</p>
<p>Some of the problems with knot-tying is as explained at the end of the <a href="/posts/2020-02-21-knot-tying-why-how-opinions.html">previous post</a>. What I did not mention in the previous post is the problems with efficiency, which are demonstrated better in this post.</p>
<ul>
<li><p>In the “typing information” example, with the cyclic representation I need to copy the entire AST to update every single <code>Id</code> occurrence and binder. With the symbol table I need to update just the table, which is much smaller than the AST.</p></li>
<li><p>In the unfolding example, with the cyclic representation I again need to copy the entire AST or use <code>MonadFix</code> if I’m doing it in parsing. With a symbol table the pass does not update the AST, only updates the table. If I’m doing it in parsing then I simply add an entry to the table after parsing a <code>let</code>. (full code at the end of this post)</p></li>
</ul>
<p>In use sites, <code>getIdArity</code> (a map lookup) does more work than <code>idArity</code> (just follows a pointer). While I don’t have any benchmarks on this, I doubt that this is bad enough to make cyclic representation and knot-tying preferable.</p>
<p>Examples in these two posts are inspired by GHC:</p>
<ul>
<li>GHC keeps information about <code>Id</code>s in an <a href="https://gitlab.haskell.org/ghc/ghc/blob/1b1067d14b656bbbfa7c47f156ec2700c9751549/compiler%2FbasicTypes%2FVar.hs#L251"><code>Id</code> field</a> with type <code>IdInfo</code>.</li>
<li><a href="https://gitlab.haskell.org/ghc/ghc/blob/1b1067d14b656bbbfa7c47f156ec2700c9751549/compiler%2FbasicTypes%2FIdInfo.hs#L242-275"><code>IdInfo</code></a> type holds information like arity and unfolding.</li>
<li>For type information <code>Id</code> has another field: <a href="https://gitlab.haskell.org/ghc/ghc/blob/1b1067d14b656bbbfa7c47f156ec2700c9751549/compiler%2FbasicTypes%2FVar.hs#L248"><code>varType</code></a>.</li>
<li>The process of throwing away information that are no longer needed is called “zapping”. It happens in many places in GHC, one example is the tidying pass (prepares code for interface file generation) that <a href="https://gitlab.haskell.org/ghc/ghc/blob/1b1067d14b656bbbfa7c47f156ec2700c9751549/compiler%2FGHC%2FIface%2FTidy.hs#L1210">zaps unfoldings</a>.</li>
<li>Knot-tying is used in many places in the compiler, <a href="https://gitlab.haskell.org/ghc/ghc/blob/1b1067d14b656bbbfa7c47f156ec2700c9751549/compiler%2Fmain%2FUpdateCafInfos.hs#L36">here’s an example</a> where we use knot-tying to update <code>IdInfo</code>s with code generator-generated information.</li>
</ul>
<p>In the first post I mostly argued that knot-tying makes things more complicated, and in this post I showed that knot-tying is necessary because of the cyclic representation. If we want to do the same without knot-tying we either have to introduce mutable references (e.g. <code>IORef</code>s) in our AST (not shown in this post), or have to use a non-cyclic representation with symbol tables.</p>
<p>Between these two representations, I think non-cyclic representation with symbol tables is a better choice.</p>
<details>
<p><summary>Full code (knot-tying)</summary></p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true"></a><span class="co">-- Tried with GHC 8.6.4</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true"></a></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true"></a><span class="ot">{-# OPTIONS_GHC -Wall #-}</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true"></a></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true"></a><span class="ot">{-# LANGUAGE ScopedTypeVariables #-}</span></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true"></a><span class="ot">{-# LANGUAGE FlexibleInstances #-}</span></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true"></a></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Data.List</span></span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Data.Maybe</span></span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Prelude</span> <span class="kw">hiding</span> (id)</span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true"></a></span>
<span id="cb11-12"><a href="#cb11-12" aria-hidden="true"></a><span class="co">-- mtl-2.2</span></span>
<span id="cb11-13"><a href="#cb11-13" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Control.Monad.State</span></span>
<span id="cb11-14"><a href="#cb11-14" aria-hidden="true"></a></span>
<span id="cb11-15"><a href="#cb11-15" aria-hidden="true"></a><span class="co">-- containers-0.6</span></span>
<span id="cb11-16"><a href="#cb11-16" aria-hidden="true"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.Map</span> <span class="kw">as</span> <span class="dt">Map</span></span>
<span id="cb11-17"><a href="#cb11-17" aria-hidden="true"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.Set</span> <span class="kw">as</span> <span class="dt">Set</span></span>
<span id="cb11-18"><a href="#cb11-18" aria-hidden="true"></a></span>
<span id="cb11-19"><a href="#cb11-19" aria-hidden="true"></a><span class="co">-- megaparsec-7.0</span></span>
<span id="cb11-20"><a href="#cb11-20" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Text.Megaparsec</span> <span class="kw">hiding</span> (<span class="dt">State</span>)</span>
<span id="cb11-21"><a href="#cb11-21" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Text.Megaparsec.Char</span></span>
<span id="cb11-22"><a href="#cb11-22" aria-hidden="true"></a></span>
<span id="cb11-23"><a href="#cb11-23" aria-hidden="true"></a><span class="co">-- pretty-show-1.10</span></span>
<span id="cb11-24"><a href="#cb11-24" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Text.Show.Pretty</span></span>
<span id="cb11-25"><a href="#cb11-25" aria-hidden="true"></a></span>
<span id="cb11-26"><a href="#cb11-26" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Expr</span></span>
<span id="cb11-27"><a href="#cb11-27" aria-hidden="true"></a>  <span class="ot">=</span> <span class="dt">IdE</span> <span class="dt">Id</span></span>
<span id="cb11-28"><a href="#cb11-28" aria-hidden="true"></a>  <span class="op">|</span> <span class="dt">IntE</span> <span class="dt">Int</span></span>
<span id="cb11-29"><a href="#cb11-29" aria-hidden="true"></a>  <span class="op">|</span> <span class="dt">Lam</span> <span class="dt">Id</span> <span class="dt">Expr</span></span>
<span id="cb11-30"><a href="#cb11-30" aria-hidden="true"></a>  <span class="op">|</span> <span class="dt">App</span> <span class="dt">Expr</span> <span class="dt">Expr</span></span>
<span id="cb11-31"><a href="#cb11-31" aria-hidden="true"></a>  <span class="op">|</span> <span class="dt">IfE</span> <span class="dt">Expr</span> <span class="dt">Expr</span> <span class="dt">Expr</span></span>
<span id="cb11-32"><a href="#cb11-32" aria-hidden="true"></a>  <span class="op">|</span> <span class="dt">Let</span> <span class="dt">Id</span> <span class="dt">Expr</span> <span class="dt">Expr</span></span>
<span id="cb11-33"><a href="#cb11-33" aria-hidden="true"></a>  <span class="kw">deriving</span> (<span class="dt">Show</span>)</span>
<span id="cb11-34"><a href="#cb11-34" aria-hidden="true"></a></span>
<span id="cb11-35"><a href="#cb11-35" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Id</span> <span class="ot">=</span> <span class="dt">Id</span></span>
<span id="cb11-36"><a href="#cb11-36" aria-hidden="true"></a>  {<span class="ot"> idName ::</span> <span class="dt">String</span></span>
<span id="cb11-37"><a href="#cb11-37" aria-hidden="true"></a>    <span class="co">-- ^ Unique name of the identifier</span></span>
<span id="cb11-38"><a href="#cb11-38" aria-hidden="true"></a>  ,<span class="ot"> idArity ::</span> <span class="dt">Int</span></span>
<span id="cb11-39"><a href="#cb11-39" aria-hidden="true"></a>    <span class="co">-- ^ Arity of a lambda. 0 for non-lambdas.</span></span>
<span id="cb11-40"><a href="#cb11-40" aria-hidden="true"></a>  ,<span class="ot"> idUnfolding ::</span> <span class="dt">Maybe</span> <span class="dt">Expr</span></span>
<span id="cb11-41"><a href="#cb11-41" aria-hidden="true"></a>    <span class="co">-- ^ RHS of a binder, used for inlining</span></span>
<span id="cb11-42"><a href="#cb11-42" aria-hidden="true"></a>  }</span>
<span id="cb11-43"><a href="#cb11-43" aria-hidden="true"></a></span>
<span id="cb11-44"><a href="#cb11-44" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Show</span> <span class="dt">Id</span> <span class="kw">where</span></span>
<span id="cb11-45"><a href="#cb11-45" aria-hidden="true"></a>  <span class="fu">show</span> (<span class="dt">Id</span> name arity _) <span class="ot">=</span> <span class="st">&quot;(Id &quot;</span> <span class="op">++</span> <span class="fu">show</span> name <span class="op">++</span> <span class="st">&quot; &quot;</span> <span class="op">++</span> <span class="fu">show</span> arity <span class="op">++</span> <span class="st">&quot;)&quot;</span></span>
<span id="cb11-46"><a href="#cb11-46" aria-hidden="true"></a></span>
<span id="cb11-47"><a href="#cb11-47" aria-hidden="true"></a><span class="co">--------------------------------------------------------------------------------</span></span>
<span id="cb11-48"><a href="#cb11-48" aria-hidden="true"></a><span class="co">-- Initializing unfolding fields in parse time via MonadFix</span></span>
<span id="cb11-49"><a href="#cb11-49" aria-hidden="true"></a></span>
<span id="cb11-50"><a href="#cb11-50" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">IdMap</span> <span class="ot">=</span> <span class="dt">Map.Map</span> <span class="dt">String</span> <span class="dt">Id</span></span>
<span id="cb11-51"><a href="#cb11-51" aria-hidden="true"></a></span>
<span id="cb11-52"><a href="#cb11-52" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">Parser</span> <span class="ot">=</span> <span class="dt">ParsecT</span> <span class="dt">String</span> <span class="dt">String</span> (<span class="dt">State</span> <span class="dt">IdMap</span>)</span>
<span id="cb11-53"><a href="#cb11-53" aria-hidden="true"></a></span>
<span id="cb11-54"><a href="#cb11-54" aria-hidden="true"></a><span class="ot">parseExpr ::</span> <span class="dt">Parser</span> <span class="dt">Expr</span></span>
<span id="cb11-55"><a href="#cb11-55" aria-hidden="true"></a>parseExpr <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb11-56"><a href="#cb11-56" aria-hidden="true"></a>    exprs <span class="ot">&lt;-</span> some <span class="op">$</span></span>
<span id="cb11-57"><a href="#cb11-57" aria-hidden="true"></a>      choice <span class="op">$</span></span>
<span id="cb11-58"><a href="#cb11-58" aria-hidden="true"></a>      <span class="fu">map</span> (\p <span class="ot">-&gt;</span> p <span class="op">&lt;*</span> space)</span>
<span id="cb11-59"><a href="#cb11-59" aria-hidden="true"></a>        [ parseParens, parseIf, parseLam, parseInt,</span>
<span id="cb11-60"><a href="#cb11-60" aria-hidden="true"></a>          parseLet, try parseId ]</span>
<span id="cb11-61"><a href="#cb11-61" aria-hidden="true"></a>    <span class="fu">return</span> (foldl1&#39; <span class="dt">App</span> exprs)</span>
<span id="cb11-62"><a href="#cb11-62" aria-hidden="true"></a></span>
<span id="cb11-63"><a href="#cb11-63" aria-hidden="true"></a>parseParens, parseIf, parseLam, parseInt,</span>
<span id="cb11-64"><a href="#cb11-64" aria-hidden="true"></a>  parseLet,<span class="ot"> parseId ::</span> <span class="dt">Parser</span> <span class="dt">Expr</span></span>
<span id="cb11-65"><a href="#cb11-65" aria-hidden="true"></a></span>
<span id="cb11-66"><a href="#cb11-66" aria-hidden="true"></a>parseParens <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb11-67"><a href="#cb11-67" aria-hidden="true"></a>    _ <span class="ot">&lt;-</span> char <span class="ch">&#39;(&#39;</span></span>
<span id="cb11-68"><a href="#cb11-68" aria-hidden="true"></a>    space</span>
<span id="cb11-69"><a href="#cb11-69" aria-hidden="true"></a>    expr <span class="ot">&lt;-</span> parseExpr</span>
<span id="cb11-70"><a href="#cb11-70" aria-hidden="true"></a>    _ <span class="ot">&lt;-</span> char <span class="ch">&#39;)&#39;</span></span>
<span id="cb11-71"><a href="#cb11-71" aria-hidden="true"></a>    <span class="fu">return</span> expr</span>
<span id="cb11-72"><a href="#cb11-72" aria-hidden="true"></a></span>
<span id="cb11-73"><a href="#cb11-73" aria-hidden="true"></a>parseIf <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb11-74"><a href="#cb11-74" aria-hidden="true"></a>    _ <span class="ot">&lt;-</span> string <span class="st">&quot;if&quot;</span></span>
<span id="cb11-75"><a href="#cb11-75" aria-hidden="true"></a>    space</span>
<span id="cb11-76"><a href="#cb11-76" aria-hidden="true"></a>    condE <span class="ot">&lt;-</span> parseExpr</span>
<span id="cb11-77"><a href="#cb11-77" aria-hidden="true"></a></span>
<span id="cb11-78"><a href="#cb11-78" aria-hidden="true"></a>    _ <span class="ot">&lt;-</span> string <span class="st">&quot;then&quot;</span></span>
<span id="cb11-79"><a href="#cb11-79" aria-hidden="true"></a>    space</span>
<span id="cb11-80"><a href="#cb11-80" aria-hidden="true"></a>    thenE <span class="ot">&lt;-</span> parseExpr</span>
<span id="cb11-81"><a href="#cb11-81" aria-hidden="true"></a>    _ <span class="ot">&lt;-</span> string <span class="st">&quot;else&quot;</span></span>
<span id="cb11-82"><a href="#cb11-82" aria-hidden="true"></a>    space</span>
<span id="cb11-83"><a href="#cb11-83" aria-hidden="true"></a>    elseE <span class="ot">&lt;-</span> parseExpr</span>
<span id="cb11-84"><a href="#cb11-84" aria-hidden="true"></a>    <span class="fu">return</span> (<span class="dt">IfE</span> condE thenE elseE)</span>
<span id="cb11-85"><a href="#cb11-85" aria-hidden="true"></a></span>
<span id="cb11-86"><a href="#cb11-86" aria-hidden="true"></a>parseLam <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb11-87"><a href="#cb11-87" aria-hidden="true"></a>    _ <span class="ot">&lt;-</span> char <span class="ch">&#39;\\&#39;</span></span>
<span id="cb11-88"><a href="#cb11-88" aria-hidden="true"></a>    space</span>
<span id="cb11-89"><a href="#cb11-89" aria-hidden="true"></a>    <span class="fu">id</span> <span class="ot">&lt;-</span> parseId&#39;</span>
<span id="cb11-90"><a href="#cb11-90" aria-hidden="true"></a>    space</span>
<span id="cb11-91"><a href="#cb11-91" aria-hidden="true"></a>    _ <span class="ot">&lt;-</span> char <span class="ch">&#39;.&#39;</span></span>
<span id="cb11-92"><a href="#cb11-92" aria-hidden="true"></a>    space</span>
<span id="cb11-93"><a href="#cb11-93" aria-hidden="true"></a>    body <span class="ot">&lt;-</span> parseExpr</span>
<span id="cb11-94"><a href="#cb11-94" aria-hidden="true"></a>    <span class="fu">return</span> (<span class="dt">Lam</span> <span class="fu">id</span> body)</span>
<span id="cb11-95"><a href="#cb11-95" aria-hidden="true"></a></span>
<span id="cb11-96"><a href="#cb11-96" aria-hidden="true"></a>parseInt <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb11-97"><a href="#cb11-97" aria-hidden="true"></a>    chars <span class="ot">&lt;-</span> some digitChar</span>
<span id="cb11-98"><a href="#cb11-98" aria-hidden="true"></a>    <span class="fu">return</span> (<span class="dt">IntE</span> (<span class="fu">read</span> chars))</span>
<span id="cb11-99"><a href="#cb11-99" aria-hidden="true"></a></span>
<span id="cb11-100"><a href="#cb11-100" aria-hidden="true"></a>parseLet <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb11-101"><a href="#cb11-101" aria-hidden="true"></a>    _ <span class="ot">&lt;-</span> string <span class="st">&quot;let&quot;</span></span>
<span id="cb11-102"><a href="#cb11-102" aria-hidden="true"></a>    space</span>
<span id="cb11-103"><a href="#cb11-103" aria-hidden="true"></a>    id_name <span class="ot">&lt;-</span> parseIdName</span>
<span id="cb11-104"><a href="#cb11-104" aria-hidden="true"></a>    space</span>
<span id="cb11-105"><a href="#cb11-105" aria-hidden="true"></a>    _ <span class="ot">&lt;-</span> char <span class="ch">&#39;=&#39;</span></span>
<span id="cb11-106"><a href="#cb11-106" aria-hidden="true"></a>    space</span>
<span id="cb11-107"><a href="#cb11-107" aria-hidden="true"></a></span>
<span id="cb11-108"><a href="#cb11-108" aria-hidden="true"></a>    (<span class="fu">id</span>, rhs) <span class="ot">&lt;-</span> mfix <span class="op">$</span> \ <span class="op">~</span>(id_, _rhs) <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb11-109"><a href="#cb11-109" aria-hidden="true"></a>      modify (Map.insert id_name id_)</span>
<span id="cb11-110"><a href="#cb11-110" aria-hidden="true"></a>      rhs <span class="ot">&lt;-</span> parseExpr</span>
<span id="cb11-111"><a href="#cb11-111" aria-hidden="true"></a>      <span class="fu">return</span> (<span class="dt">Id</span>{ idName <span class="ot">=</span> id_name, idArity <span class="ot">=</span> <span class="dv">0</span>, idUnfolding <span class="ot">=</span> <span class="dt">Just</span> rhs }, rhs)</span>
<span id="cb11-112"><a href="#cb11-112" aria-hidden="true"></a></span>
<span id="cb11-113"><a href="#cb11-113" aria-hidden="true"></a>    _ <span class="ot">&lt;-</span> string <span class="st">&quot;in&quot;</span></span>
<span id="cb11-114"><a href="#cb11-114" aria-hidden="true"></a>    space</span>
<span id="cb11-115"><a href="#cb11-115" aria-hidden="true"></a>    body <span class="ot">&lt;-</span> parseExpr</span>
<span id="cb11-116"><a href="#cb11-116" aria-hidden="true"></a>    <span class="fu">return</span> (<span class="dt">Let</span> <span class="fu">id</span> rhs body)</span>
<span id="cb11-117"><a href="#cb11-117" aria-hidden="true"></a></span>
<span id="cb11-118"><a href="#cb11-118" aria-hidden="true"></a>parseId <span class="ot">=</span> <span class="dt">IdE</span> <span class="op">&lt;$&gt;</span> parseId&#39;</span>
<span id="cb11-119"><a href="#cb11-119" aria-hidden="true"></a></span>
<span id="cb11-120"><a href="#cb11-120" aria-hidden="true"></a><span class="ot">kws ::</span> <span class="dt">Set.Set</span> <span class="dt">String</span></span>
<span id="cb11-121"><a href="#cb11-121" aria-hidden="true"></a>kws <span class="ot">=</span> Set.fromList [<span class="st">&quot;if&quot;</span>, <span class="st">&quot;then&quot;</span>, <span class="st">&quot;else&quot;</span>, <span class="st">&quot;let&quot;</span>, <span class="st">&quot;in&quot;</span>]</span>
<span id="cb11-122"><a href="#cb11-122" aria-hidden="true"></a></span>
<span id="cb11-123"><a href="#cb11-123" aria-hidden="true"></a><span class="ot">parseIdName ::</span> <span class="dt">Parser</span> <span class="dt">String</span></span>
<span id="cb11-124"><a href="#cb11-124" aria-hidden="true"></a>parseIdName <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb11-125"><a href="#cb11-125" aria-hidden="true"></a>    name <span class="ot">&lt;-</span> some letterChar</span>
<span id="cb11-126"><a href="#cb11-126" aria-hidden="true"></a>    guard (<span class="fu">not</span> (Set.member name kws))</span>
<span id="cb11-127"><a href="#cb11-127" aria-hidden="true"></a>    <span class="fu">return</span> name</span>
<span id="cb11-128"><a href="#cb11-128" aria-hidden="true"></a></span>
<span id="cb11-129"><a href="#cb11-129" aria-hidden="true"></a><span class="ot">parseId&#39; ::</span> <span class="dt">Parser</span> <span class="dt">Id</span></span>
<span id="cb11-130"><a href="#cb11-130" aria-hidden="true"></a>parseId&#39; <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb11-131"><a href="#cb11-131" aria-hidden="true"></a>    name <span class="ot">&lt;-</span> parseIdName</span>
<span id="cb11-132"><a href="#cb11-132" aria-hidden="true"></a>    id_map <span class="ot">&lt;-</span> get</span>
<span id="cb11-133"><a href="#cb11-133" aria-hidden="true"></a>    <span class="kw">let</span> def <span class="ot">=</span> <span class="dt">Id</span>{ idName <span class="ot">=</span> name, idArity <span class="ot">=</span> <span class="dv">0</span>, idUnfolding <span class="ot">=</span> <span class="dt">Nothing</span> }</span>
<span id="cb11-134"><a href="#cb11-134" aria-hidden="true"></a>    <span class="fu">return</span> (fromMaybe def (Map.lookup name id_map))</span>
<span id="cb11-135"><a href="#cb11-135" aria-hidden="true"></a></span>
<span id="cb11-136"><a href="#cb11-136" aria-hidden="true"></a><span class="ot">testPgm ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Expr</span></span>
<span id="cb11-137"><a href="#cb11-137" aria-hidden="true"></a>testPgm pgm <span class="ot">=</span></span>
<span id="cb11-138"><a href="#cb11-138" aria-hidden="true"></a>    <span class="kw">case</span> evalState (runParserT parseExpr <span class="st">&quot;&quot;</span> pgm) Map.empty <span class="kw">of</span></span>
<span id="cb11-139"><a href="#cb11-139" aria-hidden="true"></a>      <span class="dt">Left</span> (<span class="ot">err_bundle ::</span> <span class="dt">ParseErrorBundle</span> <span class="dt">String</span> <span class="dt">String</span>) <span class="ot">-&gt;</span></span>
<span id="cb11-140"><a href="#cb11-140" aria-hidden="true"></a>        <span class="fu">error</span> (errorBundlePretty err_bundle)</span>
<span id="cb11-141"><a href="#cb11-141" aria-hidden="true"></a>      <span class="dt">Right</span> expr <span class="ot">-&gt;</span></span>
<span id="cb11-142"><a href="#cb11-142" aria-hidden="true"></a>        expr</span>
<span id="cb11-143"><a href="#cb11-143" aria-hidden="true"></a></span>
<span id="cb11-144"><a href="#cb11-144" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">ShowErrorComponent</span> [<span class="dt">Char</span>] <span class="kw">where</span></span>
<span id="cb11-145"><a href="#cb11-145" aria-hidden="true"></a>    showErrorComponent x <span class="ot">=</span> x</span>
<span id="cb11-146"><a href="#cb11-146" aria-hidden="true"></a></span>
<span id="cb11-147"><a href="#cb11-147" aria-hidden="true"></a><span class="co">--------------------------------------------------------------------------------</span></span>
<span id="cb11-148"><a href="#cb11-148" aria-hidden="true"></a><span class="co">-- Initializing unfoldings with knot-tying</span></span>
<span id="cb11-149"><a href="#cb11-149" aria-hidden="true"></a></span>
<span id="cb11-150"><a href="#cb11-150" aria-hidden="true"></a><span class="ot">addUnfoldings ::</span> <span class="dt">Expr</span> <span class="ot">-&gt;</span> <span class="dt">Expr</span></span>
<span id="cb11-151"><a href="#cb11-151" aria-hidden="true"></a>addUnfoldings <span class="ot">=</span> go Map.empty</span>
<span id="cb11-152"><a href="#cb11-152" aria-hidden="true"></a>  <span class="kw">where</span></span>
<span id="cb11-153"><a href="#cb11-153" aria-hidden="true"></a><span class="ot">    go ::</span> <span class="dt">Map.Map</span> <span class="dt">String</span> <span class="dt">Id</span> <span class="ot">-&gt;</span> <span class="dt">Expr</span> <span class="ot">-&gt;</span> <span class="dt">Expr</span></span>
<span id="cb11-154"><a href="#cb11-154" aria-hidden="true"></a>    go ids e <span class="ot">=</span> <span class="kw">case</span> e <span class="kw">of</span></span>
<span id="cb11-155"><a href="#cb11-155" aria-hidden="true"></a></span>
<span id="cb11-156"><a href="#cb11-156" aria-hidden="true"></a>      <span class="co">-- Interesting bits ------------------------------------------------------</span></span>
<span id="cb11-157"><a href="#cb11-157" aria-hidden="true"></a>      <span class="dt">IdE</span> <span class="fu">id</span> <span class="ot">-&gt;</span></span>
<span id="cb11-158"><a href="#cb11-158" aria-hidden="true"></a>        <span class="dt">IdE</span> (fromMaybe <span class="fu">id</span> (Map.lookup (idName <span class="fu">id</span>) ids))</span>
<span id="cb11-159"><a href="#cb11-159" aria-hidden="true"></a></span>
<span id="cb11-160"><a href="#cb11-160" aria-hidden="true"></a>      <span class="dt">Let</span> bndr rhs body <span class="ot">-&gt;</span></span>
<span id="cb11-161"><a href="#cb11-161" aria-hidden="true"></a>        <span class="kw">let</span></span>
<span id="cb11-162"><a href="#cb11-162" aria-hidden="true"></a>          ids&#39; <span class="ot">=</span> Map.insert (idName bndr) bndr&#39; ids</span>
<span id="cb11-163"><a href="#cb11-163" aria-hidden="true"></a>          rhs&#39; <span class="ot">=</span> go ids&#39; rhs</span>
<span id="cb11-164"><a href="#cb11-164" aria-hidden="true"></a>          bndr&#39; <span class="ot">=</span> bndr{ idUnfolding <span class="ot">=</span> <span class="dt">Just</span> rhs&#39; }</span>
<span id="cb11-165"><a href="#cb11-165" aria-hidden="true"></a>        <span class="kw">in</span></span>
<span id="cb11-166"><a href="#cb11-166" aria-hidden="true"></a>          <span class="dt">Let</span> bndr{ idUnfolding <span class="ot">=</span> <span class="dt">Just</span> rhs&#39; } rhs&#39; (go ids&#39; body)</span>
<span id="cb11-167"><a href="#cb11-167" aria-hidden="true"></a>      <span class="co">--------------------------------------------------------------------------</span></span>
<span id="cb11-168"><a href="#cb11-168" aria-hidden="true"></a></span>
<span id="cb11-169"><a href="#cb11-169" aria-hidden="true"></a>      <span class="dt">IntE</span>{} <span class="ot">-&gt;</span></span>
<span id="cb11-170"><a href="#cb11-170" aria-hidden="true"></a>        e</span>
<span id="cb11-171"><a href="#cb11-171" aria-hidden="true"></a></span>
<span id="cb11-172"><a href="#cb11-172" aria-hidden="true"></a>      <span class="dt">Lam</span> arg body <span class="ot">-&gt;</span></span>
<span id="cb11-173"><a href="#cb11-173" aria-hidden="true"></a>        <span class="dt">Lam</span> arg (go ids body)</span>
<span id="cb11-174"><a href="#cb11-174" aria-hidden="true"></a></span>
<span id="cb11-175"><a href="#cb11-175" aria-hidden="true"></a>      <span class="dt">App</span> e1 e2 <span class="ot">-&gt;</span></span>
<span id="cb11-176"><a href="#cb11-176" aria-hidden="true"></a>        <span class="dt">App</span> (go ids e1) (go ids e2)</span>
<span id="cb11-177"><a href="#cb11-177" aria-hidden="true"></a></span>
<span id="cb11-178"><a href="#cb11-178" aria-hidden="true"></a>      <span class="dt">IfE</span> e1 e2 e3 <span class="ot">-&gt;</span></span>
<span id="cb11-179"><a href="#cb11-179" aria-hidden="true"></a>        <span class="dt">IfE</span> (go ids e1) (go ids e2) (go ids e3)</span></code></pre></div>
</details>
<details>
<p><summary>Full code (symbol table)</summary></p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true"></a><span class="co">-- Tried with GHC 8.6.4</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true"></a></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true"></a><span class="ot">{-# OPTIONS_GHC -Wall #-}</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true"></a></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true"></a><span class="ot">{-# LANGUAGE ScopedTypeVariables #-}</span></span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true"></a><span class="ot">{-# LANGUAGE FlexibleInstances #-}</span></span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true"></a></span>
<span id="cb12-8"><a href="#cb12-8" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Data.List</span></span>
<span id="cb12-9"><a href="#cb12-9" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Data.Maybe</span></span>
<span id="cb12-10"><a href="#cb12-10" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Prelude</span> <span class="kw">hiding</span> (id)</span>
<span id="cb12-11"><a href="#cb12-11" aria-hidden="true"></a></span>
<span id="cb12-12"><a href="#cb12-12" aria-hidden="true"></a><span class="co">-- mtl-2.2</span></span>
<span id="cb12-13"><a href="#cb12-13" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Control.Monad.State</span></span>
<span id="cb12-14"><a href="#cb12-14" aria-hidden="true"></a></span>
<span id="cb12-15"><a href="#cb12-15" aria-hidden="true"></a><span class="co">-- containers-0.6</span></span>
<span id="cb12-16"><a href="#cb12-16" aria-hidden="true"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.Map</span> <span class="kw">as</span> <span class="dt">Map</span></span>
<span id="cb12-17"><a href="#cb12-17" aria-hidden="true"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.Set</span> <span class="kw">as</span> <span class="dt">Set</span></span>
<span id="cb12-18"><a href="#cb12-18" aria-hidden="true"></a></span>
<span id="cb12-19"><a href="#cb12-19" aria-hidden="true"></a><span class="co">-- megaparsec-7.0</span></span>
<span id="cb12-20"><a href="#cb12-20" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Text.Megaparsec</span> <span class="kw">hiding</span> (<span class="dt">State</span>)</span>
<span id="cb12-21"><a href="#cb12-21" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Text.Megaparsec.Char</span></span>
<span id="cb12-22"><a href="#cb12-22" aria-hidden="true"></a></span>
<span id="cb12-23"><a href="#cb12-23" aria-hidden="true"></a><span class="co">-- pretty-show-1.10</span></span>
<span id="cb12-24"><a href="#cb12-24" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Text.Show.Pretty</span></span>
<span id="cb12-25"><a href="#cb12-25" aria-hidden="true"></a></span>
<span id="cb12-26"><a href="#cb12-26" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Debug.Trace</span></span>
<span id="cb12-27"><a href="#cb12-27" aria-hidden="true"></a></span>
<span id="cb12-28"><a href="#cb12-28" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Expr</span></span>
<span id="cb12-29"><a href="#cb12-29" aria-hidden="true"></a>  <span class="ot">=</span> <span class="dt">IdE</span> <span class="dt">String</span></span>
<span id="cb12-30"><a href="#cb12-30" aria-hidden="true"></a>  <span class="op">|</span> <span class="dt">IntE</span> <span class="dt">Int</span></span>
<span id="cb12-31"><a href="#cb12-31" aria-hidden="true"></a>  <span class="op">|</span> <span class="dt">Lam</span> <span class="dt">String</span> <span class="dt">Expr</span></span>
<span id="cb12-32"><a href="#cb12-32" aria-hidden="true"></a>  <span class="op">|</span> <span class="dt">App</span> <span class="dt">Expr</span> <span class="dt">Expr</span></span>
<span id="cb12-33"><a href="#cb12-33" aria-hidden="true"></a>  <span class="op">|</span> <span class="dt">IfE</span> <span class="dt">Expr</span> <span class="dt">Expr</span> <span class="dt">Expr</span></span>
<span id="cb12-34"><a href="#cb12-34" aria-hidden="true"></a>  <span class="op">|</span> <span class="dt">Let</span> <span class="dt">String</span> <span class="dt">Expr</span> <span class="dt">Expr</span></span>
<span id="cb12-35"><a href="#cb12-35" aria-hidden="true"></a>  <span class="kw">deriving</span> (<span class="dt">Show</span>)</span>
<span id="cb12-36"><a href="#cb12-36" aria-hidden="true"></a></span>
<span id="cb12-37"><a href="#cb12-37" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">IdInfo</span> <span class="ot">=</span> <span class="dt">IdInfo</span></span>
<span id="cb12-38"><a href="#cb12-38" aria-hidden="true"></a>  {<span class="ot"> idArity ::</span> <span class="dt">Int</span></span>
<span id="cb12-39"><a href="#cb12-39" aria-hidden="true"></a>    <span class="co">-- ^ Arity of a lambda. 0 for non-lambdas.</span></span>
<span id="cb12-40"><a href="#cb12-40" aria-hidden="true"></a>  ,<span class="ot"> idUnfolding ::</span> <span class="dt">Maybe</span> <span class="dt">Expr</span></span>
<span id="cb12-41"><a href="#cb12-41" aria-hidden="true"></a>    <span class="co">-- ^ RHS of a binder, used for inlining</span></span>
<span id="cb12-42"><a href="#cb12-42" aria-hidden="true"></a>  ,<span class="ot"> idType ::</span> <span class="dt">Maybe</span> <span class="dt">Type</span></span>
<span id="cb12-43"><a href="#cb12-43" aria-hidden="true"></a>    <span class="co">-- ^ Type of the id.</span></span>
<span id="cb12-44"><a href="#cb12-44" aria-hidden="true"></a>  }</span>
<span id="cb12-45"><a href="#cb12-45" aria-hidden="true"></a></span>
<span id="cb12-46"><a href="#cb12-46" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Type</span> <span class="ot">=</span> <span class="dt">Type</span> <span class="co">-- Assume a large type</span></span>
<span id="cb12-47"><a href="#cb12-47" aria-hidden="true"></a></span>
<span id="cb12-48"><a href="#cb12-48" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Show</span> <span class="dt">IdInfo</span> <span class="kw">where</span></span>
<span id="cb12-49"><a href="#cb12-49" aria-hidden="true"></a>  <span class="fu">show</span> (<span class="dt">IdInfo</span> arity _ _) <span class="ot">=</span> <span class="st">&quot;(IdInfo &quot;</span> <span class="op">++</span> <span class="fu">show</span> arity <span class="op">++</span> <span class="st">&quot;)&quot;</span></span>
<span id="cb12-50"><a href="#cb12-50" aria-hidden="true"></a></span>
<span id="cb12-51"><a href="#cb12-51" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">SymTbl</span> <span class="ot">=</span> <span class="dt">Map.Map</span> <span class="dt">String</span> <span class="dt">IdInfo</span></span>
<span id="cb12-52"><a href="#cb12-52" aria-hidden="true"></a></span>
<span id="cb12-53"><a href="#cb12-53" aria-hidden="true"></a><span class="ot">getIdInfo ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">State</span> <span class="dt">SymTbl</span> (<span class="dt">Maybe</span> <span class="dt">IdInfo</span>)</span>
<span id="cb12-54"><a href="#cb12-54" aria-hidden="true"></a>getIdInfo <span class="fu">id</span> <span class="ot">=</span></span>
<span id="cb12-55"><a href="#cb12-55" aria-hidden="true"></a>    Map.lookup <span class="fu">id</span> <span class="op">&lt;$&gt;</span> get</span>
<span id="cb12-56"><a href="#cb12-56" aria-hidden="true"></a></span>
<span id="cb12-57"><a href="#cb12-57" aria-hidden="true"></a><span class="ot">setIdArity ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">State</span> <span class="dt">SymTbl</span> ()</span>
<span id="cb12-58"><a href="#cb12-58" aria-hidden="true"></a>setIdArity <span class="fu">id</span> arity <span class="ot">=</span> modify (Map.alter alter <span class="fu">id</span>)</span>
<span id="cb12-59"><a href="#cb12-59" aria-hidden="true"></a>  <span class="kw">where</span></span>
<span id="cb12-60"><a href="#cb12-60" aria-hidden="true"></a>    alter <span class="dt">Nothing</span> <span class="ot">=</span></span>
<span id="cb12-61"><a href="#cb12-61" aria-hidden="true"></a>      <span class="dt">Just</span> <span class="dt">IdInfo</span>{ idArity <span class="ot">=</span> arity, idUnfolding <span class="ot">=</span> <span class="dt">Nothing</span>, idType <span class="ot">=</span> <span class="dt">Nothing</span> }</span>
<span id="cb12-62"><a href="#cb12-62" aria-hidden="true"></a>    alter (<span class="dt">Just</span> id_info) <span class="ot">=</span></span>
<span id="cb12-63"><a href="#cb12-63" aria-hidden="true"></a>      <span class="dt">Just</span> id_info{ idArity <span class="ot">=</span> arity }</span>
<span id="cb12-64"><a href="#cb12-64" aria-hidden="true"></a></span>
<span id="cb12-65"><a href="#cb12-65" aria-hidden="true"></a><span class="ot">setIdUnfolding ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Expr</span> <span class="ot">-&gt;</span> <span class="dt">State</span> <span class="dt">SymTbl</span> ()</span>
<span id="cb12-66"><a href="#cb12-66" aria-hidden="true"></a>setIdUnfolding <span class="fu">id</span> unfolding <span class="ot">=</span> modify (Map.alter alter <span class="fu">id</span>)</span>
<span id="cb12-67"><a href="#cb12-67" aria-hidden="true"></a>  <span class="kw">where</span></span>
<span id="cb12-68"><a href="#cb12-68" aria-hidden="true"></a>    alter <span class="dt">Nothing</span> <span class="ot">=</span></span>
<span id="cb12-69"><a href="#cb12-69" aria-hidden="true"></a>      <span class="dt">Just</span> <span class="dt">IdInfo</span>{ idUnfolding <span class="ot">=</span> <span class="dt">Just</span> unfolding, idArity <span class="ot">=</span> <span class="dv">0</span>, idType <span class="ot">=</span> <span class="dt">Nothing</span> }</span>
<span id="cb12-70"><a href="#cb12-70" aria-hidden="true"></a>    alter (<span class="dt">Just</span> id_info) <span class="ot">=</span></span>
<span id="cb12-71"><a href="#cb12-71" aria-hidden="true"></a>      <span class="dt">Just</span> id_info{ idUnfolding <span class="ot">=</span> <span class="dt">Just</span> unfolding }</span>
<span id="cb12-72"><a href="#cb12-72" aria-hidden="true"></a></span>
<span id="cb12-73"><a href="#cb12-73" aria-hidden="true"></a><span class="ot">countLambdas ::</span> <span class="dt">Expr</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb12-74"><a href="#cb12-74" aria-hidden="true"></a>countLambdas (<span class="dt">Lam</span> _ rhs) <span class="ot">=</span> <span class="dv">1</span> <span class="op">+</span> countLambdas rhs</span>
<span id="cb12-75"><a href="#cb12-75" aria-hidden="true"></a>countLambdas _ <span class="ot">=</span> <span class="dv">0</span></span>
<span id="cb12-76"><a href="#cb12-76" aria-hidden="true"></a></span>
<span id="cb12-77"><a href="#cb12-77" aria-hidden="true"></a><span class="ot">dropUnusedBindings ::</span> <span class="dt">Expr</span> <span class="ot">-&gt;</span> <span class="dt">State</span> <span class="dt">SymTbl</span> <span class="dt">Expr</span></span>
<span id="cb12-78"><a href="#cb12-78" aria-hidden="true"></a>dropUnusedBindings <span class="ot">=</span></span>
<span id="cb12-79"><a href="#cb12-79" aria-hidden="true"></a>    <span class="fu">fmap</span> <span class="fu">snd</span> <span class="op">.</span> go Set.empty</span>
<span id="cb12-80"><a href="#cb12-80" aria-hidden="true"></a>  <span class="kw">where</span></span>
<span id="cb12-81"><a href="#cb12-81" aria-hidden="true"></a><span class="ot">    go ::</span> <span class="dt">Set.Set</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Expr</span> <span class="ot">-&gt;</span> <span class="dt">State</span> <span class="dt">SymTbl</span> (<span class="dt">Set.Set</span> <span class="dt">String</span>, <span class="dt">Expr</span>)</span>
<span id="cb12-82"><a href="#cb12-82" aria-hidden="true"></a>    go free_vars e0 <span class="ot">=</span> <span class="kw">case</span> e0 <span class="kw">of</span></span>
<span id="cb12-83"><a href="#cb12-83" aria-hidden="true"></a></span>
<span id="cb12-84"><a href="#cb12-84" aria-hidden="true"></a>      <span class="dt">IdE</span> <span class="fu">id</span> <span class="ot">-&gt;</span></span>
<span id="cb12-85"><a href="#cb12-85" aria-hidden="true"></a>        <span class="fu">return</span> (Set.insert <span class="fu">id</span> free_vars, e0)</span>
<span id="cb12-86"><a href="#cb12-86" aria-hidden="true"></a></span>
<span id="cb12-87"><a href="#cb12-87" aria-hidden="true"></a>      <span class="dt">IntE</span>{} <span class="ot">-&gt;</span></span>
<span id="cb12-88"><a href="#cb12-88" aria-hidden="true"></a>        <span class="fu">return</span> (free_vars, e0)</span>
<span id="cb12-89"><a href="#cb12-89" aria-hidden="true"></a></span>
<span id="cb12-90"><a href="#cb12-90" aria-hidden="true"></a>      <span class="dt">Lam</span> arg body <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb12-91"><a href="#cb12-91" aria-hidden="true"></a>        (free_vars&#39;, body&#39;) <span class="ot">&lt;-</span> go free_vars body</span>
<span id="cb12-92"><a href="#cb12-92" aria-hidden="true"></a>        <span class="fu">return</span> (Set.delete arg free_vars&#39;, <span class="dt">Lam</span> arg body&#39;)</span>
<span id="cb12-93"><a href="#cb12-93" aria-hidden="true"></a></span>
<span id="cb12-94"><a href="#cb12-94" aria-hidden="true"></a>      <span class="dt">App</span> e1 e2 <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb12-95"><a href="#cb12-95" aria-hidden="true"></a>        (free1, e1&#39;) <span class="ot">&lt;-</span> go free_vars e1</span>
<span id="cb12-96"><a href="#cb12-96" aria-hidden="true"></a>        (free2, e2&#39;) <span class="ot">&lt;-</span> go free_vars e2</span>
<span id="cb12-97"><a href="#cb12-97" aria-hidden="true"></a>        <span class="fu">return</span> (Set.union free1 free2, <span class="dt">App</span> e1&#39; e2&#39;)</span>
<span id="cb12-98"><a href="#cb12-98" aria-hidden="true"></a></span>
<span id="cb12-99"><a href="#cb12-99" aria-hidden="true"></a>      <span class="dt">IfE</span> e1 e2 e3 <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb12-100"><a href="#cb12-100" aria-hidden="true"></a>        (free1, e1&#39;) <span class="ot">&lt;-</span> go free_vars e1</span>
<span id="cb12-101"><a href="#cb12-101" aria-hidden="true"></a>        (free2, e2&#39;) <span class="ot">&lt;-</span> go free_vars e2</span>
<span id="cb12-102"><a href="#cb12-102" aria-hidden="true"></a>        (free3, e3&#39;) <span class="ot">&lt;-</span> go free_vars e3</span>
<span id="cb12-103"><a href="#cb12-103" aria-hidden="true"></a>        <span class="fu">return</span> (Set.unions [free1, free2, free3], <span class="dt">IfE</span> e1&#39; e2&#39; e3&#39;)</span>
<span id="cb12-104"><a href="#cb12-104" aria-hidden="true"></a></span>
<span id="cb12-105"><a href="#cb12-105" aria-hidden="true"></a>      <span class="dt">Let</span> bndr e1 e2 <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb12-106"><a href="#cb12-106" aria-hidden="true"></a>        (free2, e2&#39;) <span class="ot">&lt;-</span> go free_vars e2</span>
<span id="cb12-107"><a href="#cb12-107" aria-hidden="true"></a>        <span class="kw">if</span> Set.member bndr free2 <span class="kw">then</span> <span class="kw">do</span></span>
<span id="cb12-108"><a href="#cb12-108" aria-hidden="true"></a>          (free1, e1&#39;) <span class="ot">&lt;-</span> go free_vars e1</span>
<span id="cb12-109"><a href="#cb12-109" aria-hidden="true"></a>          trace (ppShow e1&#39;) (<span class="fu">return</span> ())</span>
<span id="cb12-110"><a href="#cb12-110" aria-hidden="true"></a>          setIdArity bndr (countLambdas e1&#39;)</span>
<span id="cb12-111"><a href="#cb12-111" aria-hidden="true"></a>          <span class="fu">return</span> (Set.delete bndr (Set.union free1 free2), <span class="dt">Let</span> bndr e1&#39; e2&#39;)</span>
<span id="cb12-112"><a href="#cb12-112" aria-hidden="true"></a>        <span class="kw">else</span></span>
<span id="cb12-113"><a href="#cb12-113" aria-hidden="true"></a>          <span class="fu">return</span> (free2, e2&#39;)</span>
<span id="cb12-114"><a href="#cb12-114" aria-hidden="true"></a></span>
<span id="cb12-115"><a href="#cb12-115" aria-hidden="true"></a><span class="ot">addUnfoldings ::</span> <span class="dt">Expr</span> <span class="ot">-&gt;</span> <span class="dt">State</span> <span class="dt">SymTbl</span> ()</span>
<span id="cb12-116"><a href="#cb12-116" aria-hidden="true"></a>addUnfoldings e0 <span class="ot">=</span> <span class="kw">case</span> e0 <span class="kw">of</span></span>
<span id="cb12-117"><a href="#cb12-117" aria-hidden="true"></a></span>
<span id="cb12-118"><a href="#cb12-118" aria-hidden="true"></a>    <span class="dt">IdE</span>{} <span class="ot">-&gt;</span></span>
<span id="cb12-119"><a href="#cb12-119" aria-hidden="true"></a>      <span class="fu">return</span> ()</span>
<span id="cb12-120"><a href="#cb12-120" aria-hidden="true"></a></span>
<span id="cb12-121"><a href="#cb12-121" aria-hidden="true"></a>    <span class="dt">IntE</span>{} <span class="ot">-&gt;</span></span>
<span id="cb12-122"><a href="#cb12-122" aria-hidden="true"></a>      <span class="fu">return</span> ()</span>
<span id="cb12-123"><a href="#cb12-123" aria-hidden="true"></a></span>
<span id="cb12-124"><a href="#cb12-124" aria-hidden="true"></a>    <span class="dt">Lam</span> _ body <span class="ot">-&gt;</span></span>
<span id="cb12-125"><a href="#cb12-125" aria-hidden="true"></a>      addUnfoldings body</span>
<span id="cb12-126"><a href="#cb12-126" aria-hidden="true"></a></span>
<span id="cb12-127"><a href="#cb12-127" aria-hidden="true"></a>    <span class="dt">App</span> e1 e2 <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb12-128"><a href="#cb12-128" aria-hidden="true"></a>      addUnfoldings e1</span>
<span id="cb12-129"><a href="#cb12-129" aria-hidden="true"></a>      addUnfoldings e2</span>
<span id="cb12-130"><a href="#cb12-130" aria-hidden="true"></a></span>
<span id="cb12-131"><a href="#cb12-131" aria-hidden="true"></a>    <span class="dt">IfE</span> e1 e2 e3 <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb12-132"><a href="#cb12-132" aria-hidden="true"></a>      addUnfoldings e1</span>
<span id="cb12-133"><a href="#cb12-133" aria-hidden="true"></a>      addUnfoldings e2</span>
<span id="cb12-134"><a href="#cb12-134" aria-hidden="true"></a>      addUnfoldings e3</span>
<span id="cb12-135"><a href="#cb12-135" aria-hidden="true"></a></span>
<span id="cb12-136"><a href="#cb12-136" aria-hidden="true"></a>    <span class="dt">Let</span> bndr e1 e2 <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb12-137"><a href="#cb12-137" aria-hidden="true"></a>      addUnfoldings e1</span>
<span id="cb12-138"><a href="#cb12-138" aria-hidden="true"></a>      addUnfoldings e2</span>
<span id="cb12-139"><a href="#cb12-139" aria-hidden="true"></a>      setIdUnfolding bndr e1</span>
<span id="cb12-140"><a href="#cb12-140" aria-hidden="true"></a></span>
<span id="cb12-141"><a href="#cb12-141" aria-hidden="true"></a><span class="ot">dropTypes ::</span> <span class="dt">State</span> <span class="dt">SymTbl</span> ()</span>
<span id="cb12-142"><a href="#cb12-142" aria-hidden="true"></a>dropTypes <span class="ot">=</span> modify (Map.map (\id_info <span class="ot">-&gt;</span> id_info{ idType <span class="ot">=</span> <span class="dt">Nothing</span> }))</span>
<span id="cb12-143"><a href="#cb12-143" aria-hidden="true"></a></span>
<span id="cb12-144"><a href="#cb12-144" aria-hidden="true"></a><span class="ot">pgm ::</span> <span class="dt">Expr</span></span>
<span id="cb12-145"><a href="#cb12-145" aria-hidden="true"></a>pgm <span class="ot">=</span> <span class="dt">Let</span> <span class="st">&quot;fac&quot;</span> rhs body</span>
<span id="cb12-146"><a href="#cb12-146" aria-hidden="true"></a>  <span class="kw">where</span></span>
<span id="cb12-147"><a href="#cb12-147" aria-hidden="true"></a>    rhs <span class="ot">=</span> <span class="dt">Lam</span> <span class="st">&quot;x&quot;</span> (<span class="dt">IfE</span> (<span class="dt">IdE</span> <span class="st">&quot;x&quot;</span>) (<span class="dt">App</span> (<span class="dt">App</span> (<span class="dt">IdE</span> <span class="st">&quot;*&quot;</span>) (<span class="dt">IdE</span> <span class="st">&quot;x&quot;</span>))</span>
<span id="cb12-148"><a href="#cb12-148" aria-hidden="true"></a>                                      (<span class="dt">App</span> (<span class="dt">IdE</span> <span class="st">&quot;fac&quot;</span>)</span>
<span id="cb12-149"><a href="#cb12-149" aria-hidden="true"></a>                                           (<span class="dt">App</span> (<span class="dt">App</span> (<span class="dt">IdE</span> <span class="st">&quot;-&quot;</span>) (<span class="dt">IdE</span> <span class="st">&quot;x&quot;</span>)) (<span class="dt">IntE</span> <span class="dv">1</span>))))</span>
<span id="cb12-150"><a href="#cb12-150" aria-hidden="true"></a>                                 (<span class="dt">IntE</span> <span class="dv">1</span>))</span>
<span id="cb12-151"><a href="#cb12-151" aria-hidden="true"></a>    body <span class="ot">=</span> <span class="dt">App</span> (<span class="dt">IdE</span> <span class="st">&quot;fac&quot;</span>) (<span class="dt">IntE</span> <span class="dv">5</span>)</span>
<span id="cb12-152"><a href="#cb12-152" aria-hidden="true"></a></span>
<span id="cb12-153"><a href="#cb12-153" aria-hidden="true"></a><span class="co">--------------------------------------------------------------------------------</span></span>
<span id="cb12-154"><a href="#cb12-154" aria-hidden="true"></a><span class="co">-- Initializing unfolding fields in parse time, the boring way</span></span>
<span id="cb12-155"><a href="#cb12-155" aria-hidden="true"></a></span>
<span id="cb12-156"><a href="#cb12-156" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">Parser</span> <span class="ot">=</span> <span class="dt">ParsecT</span> <span class="dt">String</span> <span class="dt">String</span> (<span class="dt">State</span> <span class="dt">SymTbl</span>)</span>
<span id="cb12-157"><a href="#cb12-157" aria-hidden="true"></a></span>
<span id="cb12-158"><a href="#cb12-158" aria-hidden="true"></a><span class="ot">parseExpr ::</span> <span class="dt">Parser</span> <span class="dt">Expr</span></span>
<span id="cb12-159"><a href="#cb12-159" aria-hidden="true"></a>parseExpr <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb12-160"><a href="#cb12-160" aria-hidden="true"></a>    exprs <span class="ot">&lt;-</span> some <span class="op">$</span></span>
<span id="cb12-161"><a href="#cb12-161" aria-hidden="true"></a>      choice <span class="op">$</span></span>
<span id="cb12-162"><a href="#cb12-162" aria-hidden="true"></a>      <span class="fu">map</span> (\p <span class="ot">-&gt;</span> p <span class="op">&lt;*</span> space)</span>
<span id="cb12-163"><a href="#cb12-163" aria-hidden="true"></a>        [ parseParens, parseIf, parseLam, parseInt,</span>
<span id="cb12-164"><a href="#cb12-164" aria-hidden="true"></a>          parseLet, try parseId ]</span>
<span id="cb12-165"><a href="#cb12-165" aria-hidden="true"></a>    <span class="fu">return</span> (foldl1&#39; <span class="dt">App</span> exprs)</span>
<span id="cb12-166"><a href="#cb12-166" aria-hidden="true"></a></span>
<span id="cb12-167"><a href="#cb12-167" aria-hidden="true"></a>parseParens, parseIf, parseLam, parseInt,</span>
<span id="cb12-168"><a href="#cb12-168" aria-hidden="true"></a>  parseLet,<span class="ot"> parseId ::</span> <span class="dt">Parser</span> <span class="dt">Expr</span></span>
<span id="cb12-169"><a href="#cb12-169" aria-hidden="true"></a></span>
<span id="cb12-170"><a href="#cb12-170" aria-hidden="true"></a>parseParens <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb12-171"><a href="#cb12-171" aria-hidden="true"></a>    _ <span class="ot">&lt;-</span> char <span class="ch">&#39;(&#39;</span></span>
<span id="cb12-172"><a href="#cb12-172" aria-hidden="true"></a>    space</span>
<span id="cb12-173"><a href="#cb12-173" aria-hidden="true"></a>    expr <span class="ot">&lt;-</span> parseExpr</span>
<span id="cb12-174"><a href="#cb12-174" aria-hidden="true"></a>    _ <span class="ot">&lt;-</span> char <span class="ch">&#39;)&#39;</span></span>
<span id="cb12-175"><a href="#cb12-175" aria-hidden="true"></a>    <span class="fu">return</span> expr</span>
<span id="cb12-176"><a href="#cb12-176" aria-hidden="true"></a></span>
<span id="cb12-177"><a href="#cb12-177" aria-hidden="true"></a>parseIf <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb12-178"><a href="#cb12-178" aria-hidden="true"></a>    _ <span class="ot">&lt;-</span> string <span class="st">&quot;if&quot;</span></span>
<span id="cb12-179"><a href="#cb12-179" aria-hidden="true"></a>    space</span>
<span id="cb12-180"><a href="#cb12-180" aria-hidden="true"></a>    condE <span class="ot">&lt;-</span> parseExpr</span>
<span id="cb12-181"><a href="#cb12-181" aria-hidden="true"></a></span>
<span id="cb12-182"><a href="#cb12-182" aria-hidden="true"></a>    _ <span class="ot">&lt;-</span> string <span class="st">&quot;then&quot;</span></span>
<span id="cb12-183"><a href="#cb12-183" aria-hidden="true"></a>    space</span>
<span id="cb12-184"><a href="#cb12-184" aria-hidden="true"></a>    thenE <span class="ot">&lt;-</span> parseExpr</span>
<span id="cb12-185"><a href="#cb12-185" aria-hidden="true"></a>    _ <span class="ot">&lt;-</span> string <span class="st">&quot;else&quot;</span></span>
<span id="cb12-186"><a href="#cb12-186" aria-hidden="true"></a>    space</span>
<span id="cb12-187"><a href="#cb12-187" aria-hidden="true"></a>    elseE <span class="ot">&lt;-</span> parseExpr</span>
<span id="cb12-188"><a href="#cb12-188" aria-hidden="true"></a>    <span class="fu">return</span> (<span class="dt">IfE</span> condE thenE elseE)</span>
<span id="cb12-189"><a href="#cb12-189" aria-hidden="true"></a></span>
<span id="cb12-190"><a href="#cb12-190" aria-hidden="true"></a>parseLam <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb12-191"><a href="#cb12-191" aria-hidden="true"></a>    _ <span class="ot">&lt;-</span> char <span class="ch">&#39;\\&#39;</span></span>
<span id="cb12-192"><a href="#cb12-192" aria-hidden="true"></a>    space</span>
<span id="cb12-193"><a href="#cb12-193" aria-hidden="true"></a>    <span class="fu">id</span> <span class="ot">&lt;-</span> parseId&#39;</span>
<span id="cb12-194"><a href="#cb12-194" aria-hidden="true"></a>    space</span>
<span id="cb12-195"><a href="#cb12-195" aria-hidden="true"></a>    _ <span class="ot">&lt;-</span> char <span class="ch">&#39;.&#39;</span></span>
<span id="cb12-196"><a href="#cb12-196" aria-hidden="true"></a>    space</span>
<span id="cb12-197"><a href="#cb12-197" aria-hidden="true"></a>    body <span class="ot">&lt;-</span> parseExpr</span>
<span id="cb12-198"><a href="#cb12-198" aria-hidden="true"></a>    <span class="fu">return</span> (<span class="dt">Lam</span> <span class="fu">id</span> body)</span>
<span id="cb12-199"><a href="#cb12-199" aria-hidden="true"></a></span>
<span id="cb12-200"><a href="#cb12-200" aria-hidden="true"></a>parseInt <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb12-201"><a href="#cb12-201" aria-hidden="true"></a>    chars <span class="ot">&lt;-</span> some digitChar</span>
<span id="cb12-202"><a href="#cb12-202" aria-hidden="true"></a>    <span class="fu">return</span> (<span class="dt">IntE</span> (<span class="fu">read</span> chars))</span>
<span id="cb12-203"><a href="#cb12-203" aria-hidden="true"></a></span>
<span id="cb12-204"><a href="#cb12-204" aria-hidden="true"></a>parseLet <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb12-205"><a href="#cb12-205" aria-hidden="true"></a>    _ <span class="ot">&lt;-</span> string <span class="st">&quot;let&quot;</span></span>
<span id="cb12-206"><a href="#cb12-206" aria-hidden="true"></a>    space</span>
<span id="cb12-207"><a href="#cb12-207" aria-hidden="true"></a>    <span class="fu">id</span> <span class="ot">&lt;-</span> parseId&#39;</span>
<span id="cb12-208"><a href="#cb12-208" aria-hidden="true"></a>    space</span>
<span id="cb12-209"><a href="#cb12-209" aria-hidden="true"></a>    _ <span class="ot">&lt;-</span> char <span class="ch">&#39;=&#39;</span></span>
<span id="cb12-210"><a href="#cb12-210" aria-hidden="true"></a>    space</span>
<span id="cb12-211"><a href="#cb12-211" aria-hidden="true"></a>    rhs <span class="ot">&lt;-</span> parseExpr</span>
<span id="cb12-212"><a href="#cb12-212" aria-hidden="true"></a>    _ <span class="ot">&lt;-</span> string <span class="st">&quot;in&quot;</span></span>
<span id="cb12-213"><a href="#cb12-213" aria-hidden="true"></a>    space</span>
<span id="cb12-214"><a href="#cb12-214" aria-hidden="true"></a>    body <span class="ot">&lt;-</span> parseExpr</span>
<span id="cb12-215"><a href="#cb12-215" aria-hidden="true"></a>    lift (setIdUnfolding <span class="fu">id</span> rhs)</span>
<span id="cb12-216"><a href="#cb12-216" aria-hidden="true"></a>    <span class="fu">return</span> (<span class="dt">Let</span> <span class="fu">id</span> rhs body)</span>
<span id="cb12-217"><a href="#cb12-217" aria-hidden="true"></a></span>
<span id="cb12-218"><a href="#cb12-218" aria-hidden="true"></a>parseId <span class="ot">=</span> <span class="dt">IdE</span> <span class="op">&lt;$&gt;</span> parseId&#39;</span>
<span id="cb12-219"><a href="#cb12-219" aria-hidden="true"></a></span>
<span id="cb12-220"><a href="#cb12-220" aria-hidden="true"></a><span class="ot">kws ::</span> <span class="dt">Set.Set</span> <span class="dt">String</span></span>
<span id="cb12-221"><a href="#cb12-221" aria-hidden="true"></a>kws <span class="ot">=</span> Set.fromList [<span class="st">&quot;if&quot;</span>, <span class="st">&quot;then&quot;</span>, <span class="st">&quot;else&quot;</span>, <span class="st">&quot;let&quot;</span>, <span class="st">&quot;in&quot;</span>]</span>
<span id="cb12-222"><a href="#cb12-222" aria-hidden="true"></a></span>
<span id="cb12-223"><a href="#cb12-223" aria-hidden="true"></a><span class="ot">parseId&#39; ::</span> <span class="dt">Parser</span> <span class="dt">String</span></span>
<span id="cb12-224"><a href="#cb12-224" aria-hidden="true"></a>parseId&#39; <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb12-225"><a href="#cb12-225" aria-hidden="true"></a>    name <span class="ot">&lt;-</span> some letterChar</span>
<span id="cb12-226"><a href="#cb12-226" aria-hidden="true"></a>    guard (<span class="fu">not</span> (Set.member name kws))</span>
<span id="cb12-227"><a href="#cb12-227" aria-hidden="true"></a>    <span class="fu">return</span> name</span>
<span id="cb12-228"><a href="#cb12-228" aria-hidden="true"></a></span>
<span id="cb12-229"><a href="#cb12-229" aria-hidden="true"></a><span class="ot">testPgm ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Expr</span></span>
<span id="cb12-230"><a href="#cb12-230" aria-hidden="true"></a>testPgm pgm <span class="ot">=</span></span>
<span id="cb12-231"><a href="#cb12-231" aria-hidden="true"></a>    <span class="kw">case</span> evalState (runParserT parseExpr <span class="st">&quot;&quot;</span> pgm) Map.empty <span class="kw">of</span></span>
<span id="cb12-232"><a href="#cb12-232" aria-hidden="true"></a>      <span class="dt">Left</span> (<span class="ot">err_bundle ::</span> <span class="dt">ParseErrorBundle</span> <span class="dt">String</span> <span class="dt">String</span>) <span class="ot">-&gt;</span></span>
<span id="cb12-233"><a href="#cb12-233" aria-hidden="true"></a>        <span class="fu">error</span> (errorBundlePretty err_bundle)</span>
<span id="cb12-234"><a href="#cb12-234" aria-hidden="true"></a>      <span class="dt">Right</span> expr <span class="ot">-&gt;</span></span>
<span id="cb12-235"><a href="#cb12-235" aria-hidden="true"></a>        expr</span>
<span id="cb12-236"><a href="#cb12-236" aria-hidden="true"></a></span>
<span id="cb12-237"><a href="#cb12-237" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">ShowErrorComponent</span> [<span class="dt">Char</span>] <span class="kw">where</span></span>
<span id="cb12-238"><a href="#cb12-238" aria-hidden="true"></a>    showErrorComponent x <span class="ot">=</span> x</span></code></pre></div>
</details>]]></summary>
</entry>

</feed>
