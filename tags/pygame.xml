<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>osa1.net - Posts tagged pygame</title>
    <link href="http://osa1.net/tags/pygame.xml" rel="self" />
    <link href="http://osa1.net" />
    <id>http://osa1.net/tags/pygame.xml</id>
    <author>
        <name>Ömer Sinan Ağacan</name>
        <email>omeragaca@gmail.com</email>
    </author>
    <updated>2011-09-08T00:00:00Z</updated>
    <entry>
    <title>Pygame ve düzensiz sprite sheetlerle çalışmak</title>
    <link href="http://osa1.net/posts/2011-09-08-pygame-ve-duzensiz-sprite-sheetlerle-calismak.html" />
    <id>http://osa1.net/posts/2011-09-08-pygame-ve-duzensiz-sprite-sheetlerle-calismak.html</id>
    <published>2011-09-08T00:00:00Z</published>
    <updated>2011-09-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Pazartesi günü başlayacak <a href="http://pyweek.org/">Pyweek</a>’e katılacağım, benim ilk oyunum olacağından daha en temel problemler bile benim için yeni, ve çözümlerini yavaş yavaş keşfediyorum. Birkaç gündür basit oyunlar yapıyorum ve iş bir yerden sonra animasyonlara geldi.</p>
<p>2d oyunlarla ilgilendiyseniz, animasyonların aslında sprite adı verilen png/gif/vs. dosyalarından oluştuğunu bilirsiniz. Animasyonlar çoğu zaman(AAA oyunladan bahsetmiyoruz tabii ki) birkaç kareden oluşuyor ve bunlar genelde tek bir dosyaya aralıklarla yerleştirilmiş oluyorlar. Bunlara sprite sheet deniyor. Örneğin bir karakter koşuyorsa, ilk kare, yukarıdan 100, soldan 50. pixelden itibaren, 40px yüksekliğinde ve 30px genişliğinde oluyor. Bir sonraki kare onun biraz yanında vs. Bu şekilde çalışmak gayet kolay oluyor. Bir kere büyük resmi yükledikten sonra, ondan <code>subsurface</code>lar oluşturuyorsunuz. Peki neden ayrı ayrı resimler değil? Bunun hakkında iki güzel kaynak: <a href="http://stackoverflow.com/questions/3473151/what-are-the-pros-and-cons-of-a-sprite-sheet-compared-to-an-image-sequence">1</a>, <a href="http://gamedev.stackexchange.com/questions/10417/sprite-sheet-or-multiple-resources">2</a>.</p>
<p>Çizim işinden hiç anlamadığımdan, sprite sheetleri genelde deviantart’dan ediniyorum. Fakat şu ana kadar basit bir şekilde kullanılabilir bir sprite sheet görmedim. Sprite sheetleri basitce ayrıştırmak için en azından spriteların resim üzerinde eşit aralıklarla falan bölünmesi lazım. Benim bulduklarımın hiçbiri bu şekilde değil. Ne eşit aralıklılar, ne de eşit boyutlu. Tüm kareleri tespit edebilmek için, ya elle ölçecektim, ya da benim için ölçecek bir program yazacaktım :) .</p>
<p>Tabii ki program yazdım. Aşağıda nasıl çalıştığının bir örneğini görebilirsiniz. Gösterdiğim sprite sheet’i tarayıp, birbirlerinden ayrılmış tüm parçaları bulup işaretliyor, mouse ile üzerine geldiğinizde, koordinatlarını ve boyutlarını yazıyor. Bunu sadece Pygame kullanarak yapıyor.(büyültmek için üzerine tıklayın)</p>
<p><a href="/images/sprite_parse2.png"><img src="/images/sprite_parse2_k.png" /></a></p>
<p>Biraz da işin en zevkli kısmından, problemin çözümünden ve algoritmadan bahsedeyim. Program şu şekilde çalışıyor:</p>
<p>Her bir pixel için, eğer pixel colorkey’e eşit değilse(colorkey saydam olacak kısmın rengi ve derinliği oluyor), pixelin içinde olduğu veya komşu olduğu grubu ara. Burda grup bir <code>pygame.Rect</code>. Yani dikdörtgensel bir alan. Eğer bu pixeli içeren bir grup yoksa, bu pixeli içeren en küçük Rect’i gruplara ekle. Eğer piksel Rect’in içindeyse, birşey yapma, komşuysa, Rect’i o pixeli kapsayacak şekilde büyült. Eğer bir pixel birden fazla gruba komşuysa(veya içindeyse), bu iki grubu birleştir. Grupların son hali de ekran görüntülerinde gördüğünüz kırmızı alanlar. Aşağıda bir de Travis Touchdown(No More Heroes’dan) sprite sheeti üzerinde çalışmasını görebilirsiniz.</p>
<p><a href="/images/sprite_parse3.png"><img src="/images/sprite_parse3_k.png" /></a></p>
<p>Böyle işte. Scripti <a href="https://gist.github.com/1204263">şurdan</a> görebilirsiniz. Konuyla alakalı her türlü algoritma öneri/tavsiye/eleştirisine açığım. Hatta mutlu olurum yani, acımasızca eleştirin lütfen :) .</p>]]></summary>
</entry>
<entry>
    <title>Arduino ile ilk denemeler</title>
    <link href="http://osa1.net/posts/2011-07-06-arduino-ile-ilk-denemeler.html" />
    <id>http://osa1.net/posts/2011-07-06-arduino-ile-ilk-denemeler.html</id>
    <published>2011-07-06T00:00:00Z</published>
    <updated>2011-07-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Dün ilk Arduino’m elime geçti. Ne olup bittiğini biraz kavradıktan sonra bugün ilk denemelerimi yapmaya başladım. Aşağıdak, Python ile Arduino’ya serial port üzerinden komut gönderme denemelerimin ilki:</p>
<iframe width="425" height="349" src="http://www.youtube.com/embed/e1MC7re1r0s" frameborder="0" allowfullscreen>
</iframe>
<p>Arduino’nun yaptığı, serial port’u dinleyip, gelen verinin 0’dan büyük bir takam olduğunu varsayarak(<code>val -= '0'</code>), bu veriye göre ledleri yakıp söndürmek.</p>
<pre class="sourceCode c"><code class="sourceCode c"><span class="ot">#define ledPin1 13</span>
<span class="ot">#define ledPin2 12</span>
<span class="ot">#define ledPin3 11</span>

<span class="dt">int</span> val = <span class="dv">0</span>;

<span class="dt">void</span> setup() {
    pinMode(ledPin1, OUTPUT);
    pinMode(ledPin2, OUTPUT);
    pinMode(ledPin3, OUTPUT);
    Serial.begin(<span class="dv">9600</span>);
}

<span class="dt">void</span> loop () {
    <span class="kw">if</span> (Serial.available()) {
        val = Serial.read();
        val -= &#39;<span class="dv">0</span>&#39;;

        <span class="kw">if</span> (val == <span class="dv">1</span>) {
            digitalWrite(ledPin1, HIGH);
        } <span class="kw">else</span> <span class="kw">if</span> (val == <span class="dv">2</span>) {
            digitalWrite(ledPin2, HIGH);
        } <span class="kw">else</span> <span class="kw">if</span> (val == <span class="dv">3</span>) {
            digitalWrite(ledPin3, HIGH);
        } <span class="kw">else</span> <span class="kw">if</span> (val == <span class="dv">4</span>) {
            digitalWrite(ledPin1, LOW);
        } <span class="kw">else</span> <span class="kw">if</span> (val == <span class="dv">5</span>) {
            digitalWrite(ledPin2, LOW);
        } <span class="kw">else</span> <span class="kw">if</span> (val == <span class="dv">6</span>) {
            digitalWrite(ledPin3, LOW);
        }
    }
}</code></pre>
<p>Python ve Pygame ile de klavyeyi izleyip, tuşların basılması veya bırakılması durumlarında serial port’a gerekli verileri gönderdim:</p>
<pre class="sourceCode python"><code class="sourceCode python"><span class="ch">import</span> serial
<span class="ch">import</span> pygame

s = serial.Serial(<span class="st">&#39;/dev/ttyACM2&#39;</span>, <span class="dv">9600</span>)
screen = pygame.display.set_mode((<span class="dv">100</span>, <span class="dv">100</span>))
clock = pygame.time.Clock()

keydwn = {pygame.K_LEFT : <span class="st">&quot;1&quot;</span>,
          pygame.K_RIGHT: <span class="st">&quot;2&quot;</span>,
          pygame.K_DOWN : <span class="st">&quot;3&quot;</span>}

keyup  = {pygame.K_LEFT : <span class="st">&quot;4&quot;</span>,
          pygame.K_RIGHT: <span class="st">&quot;5&quot;</span>,
          pygame.K_DOWN : <span class="st">&quot;6&quot;</span>}

running = <span class="dv">1</span>
<span class="kw">while</span> running:
    screen.fill((<span class="dv">00</span>, <span class="dv">00</span>, <span class="dv">00</span>))
    <span class="kw">for</span> event in pygame.event.get():
        <span class="kw">if</span> event.<span class="dt">type</span> == pygame.QUIT:
            running = <span class="ot">False</span>
        <span class="kw">elif</span> event.<span class="dt">type</span> == pygame.KEYDOWN:
            s.write(keydwn.get(event.key, <span class="st">&quot;&quot;</span>))
        <span class="kw">elif</span> event.<span class="dt">type</span> == pygame.KEYUP:
            s.write(keyup.get(event.key, <span class="st">&quot;&quot;</span>))

    time = clock.tick(<span class="dv">30</span>)</code></pre>
<p>İlk deneme için gayet basit ve güzel :) . Aslında amacım, Python ve Pygame ile yaptığım şeyleri Clojure ile(Pygame kısmı için AWT gerekecekti sanırım) yapmaktı ama sırt ağrım bir yerden sonra dayanılmaz hale geldi(zaten çalışma ortamım rahat değil, bir de Arduino için masaya eğilince) ve bir an önce bitirmeye çalıştım. Bundan sonraki denemelerimi Clojure ile yapmaya çalışacağım.</p>
<p>Onun dışında, Arduino kodunu Pardus ortamında bir türlü derleyemedim, gerekli kütüphaneler/bağımlılıklar yüzünden. Bir ara onunla uğraşacağım.</p>]]></summary>
</entry>
<entry>
    <title>Pygame ve basit bir fizik motoru 2, çarpışma tespiti ve yansıma</title>
    <link href="http://osa1.net/posts/2011-04-11-pygame-ve-basit-bir-fizik-motoru-2-carpisma-tespiti-ve-yansima.html" />
    <id>http://osa1.net/posts/2011-04-11-pygame-ve-basit-bir-fizik-motoru-2-carpisma-tespiti-ve-yansima.html</id>
    <published>2011-04-11T00:00:00Z</published>
    <updated>2011-04-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Geçen yazıda <a href="http://www.wildbunny.co.uk/blog/2011/04/06/physics-engines-for-dummies/">şurdaki</a> örnekleri Pygame’de yazmaya çalıştığımdan bahsetmiştim ve ilk örnek için mouse pozisyonuna göre yönü ayarlanabilen bir çerçeve çizmek için birkaç bilgi vermiştim(kaynaklar github’da).</p>
<p>Bugün çarpışma tespiti ve yansımaları da hallettim. Çarpışma tespiti için çok fazla yöntem var, ben Stack Overflow’da gördüğüm <a href="http://stackoverflow.com/questions/1073336/circle-line-collision-detection">şu yazıdakilerden</a> birinden esinlendim.</p>
<p>Yaptığım şey kısaca şu:</p>
<p>vm1, çarpacak cismimizin merkezinden, 1. yüzeyin merkezine vektör olsun. m1b, 1. yüzeyin merkezinden düzlem merkezini gösteren birim vektör olsun vm1’in m1b izdüşümü(<a href="http://en.wikipedia.org/wiki/Vector_projection">projection</a>) yeterince küçükse(örneğin cisim topsa, yarıçapından küçükse), çarpışacaklar demektir.</p>
<p>Kendi yazdığım Vector sınıfıyla beraber kod şöyle birşey oluyor:</p>
<pre class="sourceCode python"><code class="sourceCode python"><span class="kw">if</span> <span class="dt">abs</span>((m1b*vm1.dot_product(m1b)).length) &lt; <span class="dv">5</span>:
        <span class="co"># carpisma!</span></code></pre>
<p>Bu yöntemi başka bir yöntemden esinlenerek kendim ürettiğimden, pek sağlıklı olmayabilir. Bu uygulama için gayet güzel çalışıyor ama. Zaten çarptıracağınız yüzeye ve çarpan cisme göre farklı algoritmalar daha mantıklı oluyor.</p>
<p>Yansıma için de <a href="http://pfirth.co.uk/Reflection.html">reflection vector</a> kullandım. Şöyle birşey:</p>
<p>R = V - 2<em>N</em>(V DOT N) . Bizim şartlar altında, R yansıyan hız vektörü, V gelen hız, N de yüzeyin normal vektörü. Yine kendi yazdığım Vector sınıfımla beraber şöyle birşey yani:</p>
<pre class="sourceCode python"><code class="sourceCode python">ref_v = v_hiz - m1b*<span class="dv">2</span>*(v_hiz.dot_product(m1b))</code></pre>
<p>Programdaki küçük(ya da bir daha düşündüm de, büyük) hata ise, toplar yüzeylere çarpmak üzereyken yüzeyleri hareket ettirirseniz, toplar alandan dışarı çıkıyorlar. Ekranın dışına çıktıklarında diğer taraftan tekrar girmelerini sağladığımdan, tekrardan alan içerisine alabiliyorum, ehaeuhe. Neden olduğu hakkında az da olsa fikrim var, bir şekilde çözeceğiz artık.</p>
<div class="figure">
<img src="/images/collision.png" />

</div>
<p>Bundan sonra 3. örnek, zıplayan toplar var. Önce topların alandan dışarı çıkmasını engellemeye çalışacağım sanırım.</p>
<p>Bu arada tüm kodlar <a href="http://github.com/osa1">github</a>’da.</p>]]></summary>
</entry>
<entry>
    <title>Pygame ve basit bir fizik motoru 1</title>
    <link href="http://osa1.net/posts/2011-04-10-pygame-ve-basit-bir-fizik-motoru-1.html" />
    <id>http://osa1.net/posts/2011-04-10-pygame-ve-basit-bir-fizik-motoru-1.html</id>
    <published>2011-04-10T00:00:00Z</published>
    <updated>2011-04-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Hazırlıktayken Pygame ile bir süre uğraşmıştım, hiçbir zaman oynanabilir bir oyun üretemedim ama birkaç deneme ile bu işlerin zorluğunu az da olsa tecrübe etmiştim.</p>
<p>Bugün <a href="http://www.wildbunny.co.uk/blog/2011/04/06/physics-engines-for-dummies/">şu</a> sayfayı gördüm. Basit bir fizik motoru yapımından bahsediyor. Ordaki ilk örneği zaten <a href="http://osa1.net/pygame-denemeleri-1-ve-okunacaklar/">yapmıştım</a>(yöntemim biraz farklı ama olsun). Diğerleri de çok zor gözükmedi gözüme. Sonuçta, adım adım ilerleyerek zor gibi gözüken en son örnek bile halledilebilir.</p>
<p>Beklenmedik bir şekilde zor oldu :) . Öncelikle, genel olarak bu iş böyle mi yürüyor bilmiyorum ama, Pygame’de koordinat düzlemi biraz farklı. Aşağıdaki gibi.</p>
<div class="figure">
<img src="/images/koordinat.png" />

</div>
<p>Yani ekranın üst sol köşesi (0, 0) noktası, Y ekseni aşağı indikçe artıyor. Bilgiğimiz kartezyen düzlemin X eksenine göre döndürülmüş hali gibi yani. Bu tüm işleri zorlaştırıyor.</p>
<p>Topları falan eklemeden önce, 2. örnekteki siyah çerçeveyi yapmaya başladım. Aklımdaki fikir şuydu, ekranın ortasından(orijin) mouse’u gösteren bir birim vektör yardımıyla, ona paralel ve dik doğrular çizip kaydıracaktım. Tabii ekranın ortası, üstteki şekildeki düzene göre, (150, 150) oluyor.</p>
<p>Bu şu ana kadar alıştığımız düzenden çok farklı ve üzerinde hesap yapmak çok zor. Bunun yerine benim yapmaya çalıştığım, ekranın ortasını (0, 0) noktası alıp, işlemleri yapıp, daha sonra bir fonksiyondan geçirerek koordinatları ve vektörleri Pygame’deki düzleme uyarlamaktı. Şöyle bir fonksiyonla örneğin:</p>
<pre class="sourceCode python"><code class="sourceCode python"><span class="kw">def</span> _(v):
    <span class="kw">return</span> v[^<span class="dv">0</span>]SCREENX/<span class="dv">2</span>, SCREENY/<span class="dv">2</span>-v[^<span class="dv">1</span>]</code></pre>
<p>Ekranın ortasını (0, 0) alarak hesapladığınız vektörü veya koordinat çiftini Pygame düzenine getiriyor. Bundan sonrası biraz daha kolay.</p>
<p>3 adımda tamamladım, ilk başta ekranın ortasından, mouse’u gösteren birim vektörle aynı ve zıt yönlerde doğrular çizdirdim. Daha sonra birim vektöre dik yönlerde. Fakat burda dikkat edilmesi gereken şey, Pygame mouse koordinatlarını verirken kendi düzenine göre veriyor, yani kullanabilmek için önce ekranın ortasının (0, 0) olduğu düzene dönüştürmemiz gerekiyor. Şu şekilde:</p>
<pre class="sourceCode python"><code class="sourceCode python">posx = ekran_genisligi / <span class="dv">2</span>
posy = ekran_yuksekligi / <span class="dv">2</span>
<span class="kw">for</span> event in pygame.event.get():
        <span class="kw">if</span> event.<span class="dt">type</span> == pygame.MOUSEMOTION:
            r = [event.pos[^<span class="dv">0</span>]posx, -event.pos[^<span class="dv">1</span>]posy]</code></pre>
<p>Bunu şöyle bir fonksiyondan geçirerek birim vektör haline getiriyorum:</p>
<pre class="sourceCode python"><code class="sourceCode python"><span class="kw">def</span> birim_vektor(n1, n2):
    <span class="co">&quot;&quot;&quot;</span>
<span class="co">    n1, n2 noktalar ([x, y])</span>
<span class="co">    iki vektor nokta arasindaki birim vektoru verir.</span>
<span class="co">    baslangic n1, bitis n2 seklinde</span>
<span class="co">    &quot;&quot;&quot;</span>
    v = [n2[^<span class="dv">0</span>]n1[^<span class="dv">0</span>] n2[^<span class="dv">1</span>]n1[^<span class="dv">1</span>]
    uzaklik = sqrt(v[^<span class="dv">0</span>]*<span class="dv">2</span> + v[^<span class="dv">1</span>]*<span class="dv">2</span>)
    v[^<span class="dv">0</span>]/= uzaklik
    v[^<span class="dv">1</span>]/= uzaklik
    <span class="kw">return</span> v</code></pre>
<p>Daha sonra bu vektöre dik ve zıt yönlü vektörler elde edip(koordinatlarını değiştirerek, - ile çarparak), ne uzunlukta istiyorsam koordinatlarını çarparak çizeceğim doğrunun diğer ucunu elde ediyorum(ilk ucu ekranın ortası zaten). Şöyle birşey:</p>
<div class="figure">
<img src="/images/pyg1.png" />

</div>
<p>Bundan sonra yapmam gereken, merkezden başlayarak, çizgilerin uç kısımlarına kalan olan kısmı vektör haline getirip, toplamam. Toplam vektörü bana oluşturmaya çalıştığım karenin köşelerini verecek:</p>
<div class="figure">
<img src="/images/pyg2.png" />

</div>
<p>Sonrası da zaten noktaları silip, bulundukları yere <code>pygame.draw.aaline()</code> ile çizgiler çizdirmek:</p>
<div class="figure">
<img src="/images/pyg3.png" />

</div>
<p>Kolay gibi gözükebilir, ama saatlerimi aldı. Koordinat düzlemi çok kafa karıştırıcı, ilk yazdığım fonksiyonu en başta yazıp, direkt normal, bildiğimiz kartezyen düzlemde çalışmaya başlamalıydım. İkinci olarak, vektörlerin bu kadar kullanışlı olacağını hiç bilmezdim, daha önce de hiç kullanmamıştım zaten. Onu öğrendim. Kapsamlı bir vektör sınıfı yazılabilir(vektörel/skaler çarpım, toplama, çıkarma, vb. işlemler için). Çarpışma için de sürekli kullanılacaklar zaten.</p>
<p>Başta verdiğim kaynaktaki tüm örnekleri yapmaya çalışacağım. Olduğu kadarını github’a koyacağım muhtemelen. Şu anda kod kötü durumda, düzenledikten sonra bu halini de koyabilirim.</p>
<p>Bu arada şunu farkettim, Pygame çok kolay bir kütüphane, öğrenme diye birşey yok, dökümantasyonu açıyorsunuz, ne gerekirsa 10 saniyede bakıp çiziyorsunuz. Programlamaya başlangıç veya başka testler için eğlenceli işler yapılabilir. Geçen seneden kalma Pygame kod arşivim var, font işlemler, çizgiler, resimler vs, ne işim olsa ordan bakarak yazıyorum. Mesela aklıma geldi, networking ile uğraşıyorum, Pygame yardımıyla basit bir pong yapılabilir. Pygame kısmı zaten 100 satırı bile geçmeyecektir.</p>]]></summary>
</entry>
<entry>
    <title>Pygame denemeleri 1 ve okunacaklar</title>
    <link href="http://osa1.net/posts/2010-08-15-pygame-denemeleri-1-ve-okunacaklar.html" />
    <id>http://osa1.net/posts/2010-08-15-pygame-denemeleri-1-ve-okunacaklar.html</id>
    <published>2010-08-15T00:00:00Z</published>
    <updated>2010-08-15T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Python ile Django’dan sonra pygame’e el attım biraz. Daha yeni başladım ve henüz pygame’in özelliklerinin çok azından yararlanarak birşeyler yapabiliyorum. Aşağıdaki kod ilk yazdığım basit bir çarpışma şeyi(neyi ben de bilmiyorum). İstediğiniz büyüklükte ekrana istediğiniz kadar top ekleyip onları rastgele hızlarda bir yerlere yolluyor ve çarpıştırıyor.</p>
<pre class="sourceCode python"><code class="sourceCode python"><span class="ch">import</span> pygame, random, math
screenx, screeny = <span class="dv">500</span>, <span class="dv">500</span> <span class="co">#ekran buyuklugu</span>
<span class="kw">class</span> Ball:
    <span class="kw">def</span> <span class="ot">__init__</span>(<span class="ot">self</span>, surface):
        <span class="ot">self</span>.surface = surface
        <span class="ot">self</span>.radius = <span class="dv">10</span>
        <span class="ot">self</span>.color = (<span class="dv">255</span>, <span class="dv">255</span>, <span class="dv">255</span>)
        <span class="ot">self</span>.x = random.randint(<span class="dv">0</span>+<span class="ot">self</span>.radius, screenx-<span class="ot">self</span>.radius)
        <span class="ot">self</span>.y = random.randint(<span class="dv">0</span>+<span class="ot">self</span>.radius, screeny-<span class="ot">self</span>.radius)
        <span class="ot">self</span>.vx = random.randint(<span class="dv">1</span>, <span class="dv">10</span>)
        <span class="ot">self</span>.vy = random.randint(<span class="dv">1</span>, <span class="dv">10</span>)
        
    <span class="kw">def</span> move(<span class="ot">self</span>, time_passed):
        <span class="kw">if</span> <span class="ot">self</span>.x &gt;= screenx-<span class="ot">self</span>.radius or <span class="ot">self</span>.x &lt;= <span class="ot">self</span>.radius:
            <span class="ot">self</span>.vx *= -<span class="dv">1</span>
        <span class="kw">if</span> <span class="ot">self</span>.y &gt;= screeny-<span class="ot">self</span>.radius or <span class="ot">self</span>.y &lt;= <span class="ot">self</span>.radius:
            <span class="ot">self</span>.vy *= -<span class="dv">1</span>
        <span class="ot">self</span>.x += <span class="ot">self</span>.vx * time_passed
        <span class="ot">self</span>.y += <span class="ot">self</span>.vy * time_passed
        
    <span class="kw">def</span> draw(<span class="ot">self</span>):
        pygame.draw.circle(<span class="ot">self</span>.surface, <span class="ot">self</span>.color, (<span class="ot">self</span>.x, <span class="ot">self</span>.y),
                           <span class="ot">self</span>.radius)
pygame.init()
clock = pygame.time.Clock()
screen = pygame.display.set_mode((screenx, screeny), <span class="dv">0</span>, <span class="dv">32</span>)
running = <span class="ot">True</span>
balls = []
<span class="kw">for</span> i in <span class="dt">range</span>(<span class="dv">1</span>, <span class="dv">21</span>): <span class="co">#top sayisi</span>
    balls.append(Ball(screen))
<span class="kw">def</span> CollisionDetect(b1):
    <span class="kw">for</span> b2 in balls:
        <span class="kw">if</span> b1 is not b2:
            <span class="dt">range</span> = math.sqrt((b1.x - b2.x)**<span class="dv">2</span> + (b1.y - b2.y)**<span class="dv">2</span>)
            <span class="kw">if</span> <span class="dt">range</span> &lt; (b1.radius + b2.radius):
                b1.vx, b2.vx = b2.vx, b1.vx
                b1.vy, b2.vy = b2.vy, b1.vy
                <span class="co">#b1.move(); b2.move()</span>
<span class="kw">while</span> running:
    <span class="kw">for</span> event in pygame.event.get():
        <span class="co">#print event</span>
        <span class="kw">if</span> event.<span class="dt">type</span> == pygame.QUIT:
            running = <span class="ot">False</span>
    
    time_passed = clock.tick(<span class="dv">50</span>)
    screen.fill((<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>))
    <span class="kw">for</span> b in balls:
        b.draw()
        CollisionDetect(b)
        b.move(time_passed)
    
    pygame.display.flip()</code></pre>
<p>Onun dışında kendime bir okunacaklar listesi hazırladım, ilk fırsatta okuyacaklarım:</p>
<ul>
<li><a href="http://www.pygame.org/docs/tut/MoveIt.html" class="uri">http://www.pygame.org/docs/tut/MoveIt.html</a></li>
<li><a href="http://eli.thegreenplace.net/2008/12/13/writing-a-game-in-python-with-pygame-part-i/" class="uri">http://eli.thegreenplace.net/2008/12/13/writing-a-game-in-python-with-pygame-part-i/</a></li>
<li><a href="http://ezide.com/games/writing-games.html" class="uri">http://ezide.com/games/writing-games.html</a></li>
<li><a href="http://stackoverflow.com/questions/739654/understanding-python-decorators">StackOverflow - Understanding Python Decorators</a></li>
<li><a href="http://stackoverflow.com/questions/231767/the-python-yield-keyword-explained">StackOverflow - Python yield Keyword</a></li>
</ul>]]></summary>
</entry>

</feed>
