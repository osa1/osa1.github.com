<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>osa1.net - Posts tagged javascript</title>
    <link href="http://osa1.net/tags/javascript.xml" rel="self" />
    <link href="http://osa1.net" />
    <id>http://osa1.net/tags/javascript.xml</id>
    <author>
        <name>Ömer Sinan Ağacan</name>
        <email>omeragaca@gmail.com</email>
    </author>
    <updated>2013-05-06T00:00:00Z</updated>
    <entry>
    <title>A converter from Lua tables to JavaScript objects</title>
    <link href="http://osa1.net/posts/2013-05-06-lua-tables-to-js-objs.html" />
    <id>http://osa1.net/posts/2013-05-06-lua-tables-to-js-objs.html</id>
    <published>2013-05-06T00:00:00Z</published>
    <updated>2013-05-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I wrote a simple Haskell program to convert some data encoded as Lua tables to JavaScript objects/arrays to be used in another project of mine:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb1-1" title="1"><span class="ot">{-# OPTIONS_GHC -Wall -fno-warn-name-shadowing #-}</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb1-3" title="3"></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="kw">import</span>           <span class="dt">Language.Lua.Parser</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="kw">import</span>           <span class="dt">Language.Lua.Types</span></a>
<a class="sourceLine" id="cb1-6" title="6"></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Language.ECMAScript3.Syntax</span>       <span class="kw">as</span> <span class="dt">JS</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="kw">import</span>           <span class="dt">Language.ECMAScript3.PrettyPrint</span>  (renderExpression)</a>
<a class="sourceLine" id="cb1-9" title="9"></a>
<a class="sourceLine" id="cb1-10" title="10"><span class="kw">import</span>           <span class="dt">System.Environment</span>                (getArgs)</a>
<a class="sourceLine" id="cb1-11" title="11"><span class="kw">import</span>           <span class="dt">Control.Monad</span></a>
<a class="sourceLine" id="cb1-12" title="12"><span class="kw">import</span>           <span class="dt">Prelude</span>                           <span class="kw">hiding</span> (exp)</a>
<a class="sourceLine" id="cb1-13" title="13"></a>
<a class="sourceLine" id="cb1-14" title="14"><span class="ot">unsupported ::</span> <span class="dt">Show</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> b</a>
<a class="sourceLine" id="cb1-15" title="15">unsupported <span class="fu">=</span> <span class="fu">error</span> <span class="fu">.</span> (<span class="st">&quot;unsupported exp: &quot;</span> <span class="fu">++</span>) <span class="fu">.</span> <span class="fu">show</span></a>
<a class="sourceLine" id="cb1-16" title="16"></a>
<a class="sourceLine" id="cb1-17" title="17"><span class="kw">class</span> <span class="dt">ToJsExp</span> a <span class="kw">where</span></a>
<a class="sourceLine" id="cb1-18" title="18"><span class="ot">    toJsExp ::</span> a <span class="ot">-&gt;</span> <span class="dt">JS.Expression</span> ()</a>
<a class="sourceLine" id="cb1-19" title="19"></a>
<a class="sourceLine" id="cb1-20" title="20"><span class="kw">instance</span> <span class="dt">ToJsExp</span> (<span class="dt">Exp</span> a) <span class="kw">where</span></a>
<a class="sourceLine" id="cb1-21" title="21">    toJsExp (<span class="dt">Nil</span> _) <span class="fu">=</span> <span class="dt">JS.NullLit</span> ()</a>
<a class="sourceLine" id="cb1-22" title="22">    toJsExp (<span class="dt">Bool</span> _ bool) <span class="fu">=</span> <span class="dt">JS.BoolLit</span> () bool</a>
<a class="sourceLine" id="cb1-23" title="23">    toJsExp (<span class="dt">Number</span> _ num) <span class="fu">=</span> <span class="dt">JS.NumLit</span> () (<span class="fu">read</span> num)</a>
<a class="sourceLine" id="cb1-24" title="24">    toJsExp (<span class="dt">String</span> _ str) <span class="fu">=</span> <span class="dt">JS.StringLit</span> () str</a>
<a class="sourceLine" id="cb1-25" title="25">    toJsExp (<span class="dt">TableConst</span> _ table) <span class="fu">=</span> toJsExp table</a>
<a class="sourceLine" id="cb1-26" title="26">    toJsExp unsupportedexp <span class="fu">=</span> unsupported (<span class="fu">fmap</span> (<span class="fu">const</span> ()) unsupportedexp)</a>
<a class="sourceLine" id="cb1-27" title="27"></a>
<a class="sourceLine" id="cb1-28" title="28"><span class="kw">instance</span> <span class="dt">ToJsExp</span> (<span class="dt">Table</span> a) <span class="kw">where</span></a>
<a class="sourceLine" id="cb1-29" title="29">    toJsExp (<span class="dt">Table</span> _ fields)</a>
<a class="sourceLine" id="cb1-30" title="30">      <span class="fu">|</span> <span class="fu">all</span> arrField fields <span class="fu">=</span></a>
<a class="sourceLine" id="cb1-31" title="31">          <span class="dt">JS.ArrayLit</span> () <span class="fu">$</span> <span class="fu">map</span> (\(<span class="dt">Field</span> _ <span class="fu">exp</span>) <span class="ot">-&gt;</span> toJsExp <span class="fu">exp</span>) fields</a>
<a class="sourceLine" id="cb1-32" title="32">      <span class="fu">|</span> <span class="fu">all</span> objField fields <span class="fu">=</span></a>
<a class="sourceLine" id="cb1-33" title="33">          <span class="dt">JS.ObjectLit</span> () <span class="fu">$</span> <span class="fu">map</span> (\(<span class="dt">NamedField</span> _ (<span class="dt">Name</span> _ name) <span class="fu">exp</span>) <span class="ot">-&gt;</span> (<span class="dt">JS.PropId</span> () (<span class="dt">JS.Id</span> () name), toJsExp <span class="fu">exp</span>)) fields</a>
<a class="sourceLine" id="cb1-34" title="34">      <span class="fu">|</span> <span class="fu">otherwise</span> <span class="fu">=</span> unsupported (<span class="fu">map</span> (<span class="fu">fmap</span> (<span class="fu">const</span> ())) fields)</a>
<a class="sourceLine" id="cb1-35" title="35"></a>
<a class="sourceLine" id="cb1-36" title="36">      <span class="kw">where</span></a>
<a class="sourceLine" id="cb1-37" title="37">        arrField <span class="dt">Field</span>{} <span class="fu">=</span> <span class="dt">True</span></a>
<a class="sourceLine" id="cb1-38" title="38">        arrField _       <span class="fu">=</span> <span class="dt">False</span></a>
<a class="sourceLine" id="cb1-39" title="39"></a>
<a class="sourceLine" id="cb1-40" title="40">        objField <span class="dt">NamedField</span>{} <span class="fu">=</span> <span class="dt">True</span></a>
<a class="sourceLine" id="cb1-41" title="41">        objField _            <span class="fu">=</span> <span class="dt">False</span></a>
<a class="sourceLine" id="cb1-42" title="42"></a>
<a class="sourceLine" id="cb1-43" title="43"><span class="ot">main ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb1-44" title="44">main <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb1-45" title="45">    args <span class="ot">&lt;-</span> getArgs</a>
<a class="sourceLine" id="cb1-46" title="46">    contents <span class="ot">&lt;-</span> <span class="fu">readFile</span> (<span class="fu">head</span> args)</a>
<a class="sourceLine" id="cb1-47" title="47">    <span class="kw">case</span> parseText <span class="fu">exp</span> contents <span class="kw">of</span></a>
<a class="sourceLine" id="cb1-48" title="48">      <span class="dt">Left</span> err <span class="ot">-&gt;</span> <span class="fu">print</span> err</a>
<a class="sourceLine" id="cb1-49" title="49">      <span class="dt">Right</span> result <span class="ot">-&gt;</span> <span class="fu">putStrLn</span> <span class="fu">$</span> renderExpression <span class="fu">$</span> toJsExp result</a></code></pre></div>
<p>It uses <a href="http://hackage.haskell.org/package/language-lua">language-lua</a>, a Lua parser and pretty-printer which I wrote to use in some other project of mine(a static analysis tool for Lua, I have big plans about it) and <a href="http://hackage.haskell.org/package/language-ecmascript">language-ecmascript</a>, JavaScript parser and pretty-printer.</p>]]></summary>
</entry>
<entry>
    <title>An interesting case of closures: is closed-over variable reference or value?</title>
    <link href="http://osa1.net/posts/2013-04-24-interesting-case-of-closures.html" />
    <id>http://osa1.net/posts/2013-04-24-interesting-case-of-closures.html</id>
    <published>2013-04-24T00:00:00Z</published>
    <updated>2013-04-24T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I discovered an interesting behavior of JavaScript’s closures while writing a nodejs script.</p>
<p>This behavior is pretty easy to observe when writing a nodejs application, because of it’s callback-based asynchronous nature, you’ll be writing callbacks all the time. Let’s say I’ll create a callback function which uses a variable defined in outer-scope, then do some actions using that variable:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb1-1" title="1"><span class="kw">var</span> callbacks <span class="op">=</span> []<span class="op">;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="kw">var</span> words <span class="op">=</span> [ <span class="st">&quot;foo&quot;</span><span class="op">,</span> <span class="st">&quot;bar&quot;</span><span class="op">,</span> <span class="st">&quot;baz&quot;</span> ]<span class="op">;</span></a>
<a class="sourceLine" id="cb1-3" title="3"></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="cf">for</span> (<span class="kw">var</span> idx <span class="kw">in</span> words) <span class="op">{</span></a>
<a class="sourceLine" id="cb1-5" title="5">    <span class="kw">var</span> say <span class="op">=</span> <span class="st">&quot;say &quot;</span> <span class="op">+</span> words[idx]<span class="op">;</span></a>
<a class="sourceLine" id="cb1-6" title="6">    <span class="va">callbacks</span>.<span class="at">push</span>(<span class="kw">function</span> () <span class="op">{</span></a>
<a class="sourceLine" id="cb1-7" title="7">        <span class="va">console</span>.<span class="at">log</span>(say)<span class="op">;</span></a>
<a class="sourceLine" id="cb1-8" title="8">    <span class="op">}</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb1-9" title="9"><span class="op">}</span></a>
<a class="sourceLine" id="cb1-10" title="10"></a>
<a class="sourceLine" id="cb1-11" title="11"><span class="cf">for</span> (<span class="kw">var</span> idx <span class="kw">in</span> callbacks) <span class="op">{</span></a>
<a class="sourceLine" id="cb1-12" title="12">    callbacks[idx]()<span class="op">;</span></a>
<a class="sourceLine" id="cb1-13" title="13"><span class="op">}</span></a></code></pre></div>
<p>What I expect from this program is to print <code>foo\nbar\nbaz</code>, but it instead prints <code>baz\nbaz\nbaz</code>. It’s like <code>say</code> variable used inside the callback is a reference and not a value. But it’s still strange because the reference should be local to for-loop’s body, so each <code>var say = ...</code> assignment should create a separate reference.</p>
<p>I find this behavior very counterintuitive. Before moving to solutions to fix this, I tried same program with several other languages.</p>
<p>Python also has this problem<a href="#fn1" class="footnote-ref" id="fnref1"><sup>1</sup></a>:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><a class="sourceLine" id="cb2-1" title="1">callbacks <span class="op">=</span> []</a>
<a class="sourceLine" id="cb2-2" title="2"></a>
<a class="sourceLine" id="cb2-3" title="3"><span class="cf">for</span> i <span class="kw">in</span> [<span class="st">&quot;foo&quot;</span>, <span class="st">&quot;bar&quot;</span>, <span class="st">&quot;baz&quot;</span>]:</a>
<a class="sourceLine" id="cb2-4" title="4">    say <span class="op">=</span> <span class="st">&quot;say &quot;</span> <span class="op">+</span> i</a>
<a class="sourceLine" id="cb2-5" title="5">    <span class="kw">def</span> callback():</a>
<a class="sourceLine" id="cb2-6" title="6">        <span class="bu">print</span> say</a>
<a class="sourceLine" id="cb2-7" title="7">    callbacks.append(callback)</a>
<a class="sourceLine" id="cb2-8" title="8"></a>
<a class="sourceLine" id="cb2-9" title="9"><span class="cf">for</span> c <span class="kw">in</span> callbacks:</a>
<a class="sourceLine" id="cb2-10" title="10">    c()</a></code></pre></div>
<p>This prints same wrong output as with JavaScript.</p>
<p>Lua, my favorite dynamic language, does great:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode lua"><code class="sourceCode lua"><a class="sourceLine" id="cb3-1" title="1">callbacks <span class="op">=</span> <span class="op">{}</span></a>
<a class="sourceLine" id="cb3-2" title="2"></a>
<a class="sourceLine" id="cb3-3" title="3"><span class="cf">for</span> <span class="cn">_</span><span class="op">,</span> v <span class="kw">in</span> <span class="fu">pairs</span><span class="op">({</span> <span class="st">&quot;foo&quot;</span><span class="op">,</span> <span class="st">&quot;bar&quot;</span><span class="op">,</span> <span class="st">&quot;baz&quot;</span> <span class="op">})</span> <span class="cf">do</span></a>
<a class="sourceLine" id="cb3-4" title="4">    <span class="kw">local</span> say <span class="op">=</span> <span class="st">&quot;say &quot;</span> <span class="op">..</span> v</a>
<a class="sourceLine" id="cb3-5" title="5">    <span class="fu">table.insert</span><span class="op">(</span>callbacks<span class="op">,</span> <span class="kw">function</span> <span class="op">()</span> <span class="fu">print</span><span class="op">(</span>say<span class="op">)</span> <span class="cf">end</span><span class="op">)</span></a>
<a class="sourceLine" id="cb3-6" title="6"><span class="cf">end</span></a>
<a class="sourceLine" id="cb3-7" title="7"></a>
<a class="sourceLine" id="cb3-8" title="8"><span class="cf">for</span> <span class="cn">_</span><span class="op">,</span> v <span class="kw">in</span> <span class="fu">pairs</span><span class="op">(</span>callbacks<span class="op">)</span> <span class="cf">do</span></a>
<a class="sourceLine" id="cb3-9" title="9">    v<span class="op">()</span></a>
<a class="sourceLine" id="cb3-10" title="10"><span class="cf">end</span></a></code></pre></div>
<p>It prints <code>foo\nbar\nbaz</code> as expected. Trying this in functional languages may be pointless, since variables are actually not <em>variables</em>(they’re immutable), but it may be still useful for demonstration purposes, here’s the Haskell code that works as expected:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb4-1" title="1"><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb4-2" title="2"></a>
<a class="sourceLine" id="cb4-3" title="3">main <span class="fu">=</span> <span class="fu">sequence_</span> callbacks</a>
<a class="sourceLine" id="cb4-4" title="4">  <span class="kw">where</span> callbacks <span class="fu">=</span> <span class="fu">map</span> (<span class="fu">putStrLn</span> <span class="fu">.</span> (<span class="st">&quot;say &quot;</span> <span class="fu">++</span> )) [ <span class="st">&quot;foo&quot;</span>, <span class="st">&quot;bar&quot;</span>, <span class="st">&quot;baz&quot;</span> ]</a></code></pre></div>
<p>I’ll show how to get JavaScript’s behavior in languages that handle this right, and in Haskell it’s harder to get this behavior because we will need to use reference cells explicitly.</p>
<p>I think in Python it’s more understandable, because it doesn’t have any scope declarations. ie. we can’t reason about <code>say</code> variable’s scope by the look of it. In JavaScript, we have <code>var</code> keyword that indicates a new variable is created in the scope. But it still works wrong.</p>
<p>Indeed, in JavaScript, the worst language ever, <code>var</code> keyword is just like any other strange JavaScript feature and works in an unexpected way:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb5-1" title="1"><span class="op">&gt;</span> <span class="cf">for</span> (<span class="kw">var</span> v <span class="kw">in</span> [ <span class="dv">1</span><span class="op">,</span> <span class="dv">2</span><span class="op">,</span> <span class="dv">3</span> ]) <span class="op">{</span> <span class="va">console</span>.<span class="at">log</span>(v)<span class="op">;</span> <span class="op">}</span></a>
<a class="sourceLine" id="cb5-2" title="2"><span class="dv">0</span></a>
<a class="sourceLine" id="cb5-3" title="3"><span class="dv">1</span></a>
<a class="sourceLine" id="cb5-4" title="4"><span class="dv">2</span></a>
<a class="sourceLine" id="cb5-5" title="5"><span class="op">&gt;</span> v</a>
<a class="sourceLine" id="cb5-6" title="6"><span class="st">&quot;2&quot;</span></a></code></pre></div>
<p>So one explanation of this behavior may be this: In Python, we don’t know the scope of variable and it looks like it’s global. So in closure, it works like a reference. And in JavaScript, <code>var</code> keyword is simply broken(and also variable inside closure works like reference).</p>
<h1 id="fixing-it">Fixing it</h1>
<p>Let’s fix that in JavaScript and Python.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb6-1" title="1"><span class="kw">var</span> callbacks <span class="op">=</span> []<span class="op">;</span></a>
<a class="sourceLine" id="cb6-2" title="2"><span class="kw">var</span> words <span class="op">=</span> [ <span class="st">&quot;foo&quot;</span><span class="op">,</span> <span class="st">&quot;bar&quot;</span><span class="op">,</span> <span class="st">&quot;baz&quot;</span> ]<span class="op">;</span></a>
<a class="sourceLine" id="cb6-3" title="3"></a>
<a class="sourceLine" id="cb6-4" title="4"><span class="cf">for</span> (<span class="kw">var</span> idx <span class="kw">in</span> words) <span class="op">{</span></a>
<a class="sourceLine" id="cb6-5" title="5">    <span class="kw">var</span> say <span class="op">=</span> <span class="st">&quot;say &quot;</span> <span class="op">+</span> words[idx]<span class="op">;</span></a>
<a class="sourceLine" id="cb6-6" title="6">    <span class="va">callbacks</span>.<span class="at">push</span>((<span class="kw">function</span> (say) <span class="op">{</span></a>
<a class="sourceLine" id="cb6-7" title="7">      <span class="cf">return</span> <span class="kw">function</span> () <span class="op">{</span></a>
<a class="sourceLine" id="cb6-8" title="8">        <span class="va">console</span>.<span class="at">log</span>(say)<span class="op">;</span></a>
<a class="sourceLine" id="cb6-9" title="9">      <span class="op">}</span></a>
<a class="sourceLine" id="cb6-10" title="10">    <span class="op">}</span>)(say))<span class="op">;</span></a>
<a class="sourceLine" id="cb6-11" title="11"><span class="op">}</span></a>
<a class="sourceLine" id="cb6-12" title="12"></a>
<a class="sourceLine" id="cb6-13" title="13"><span class="cf">for</span> (<span class="kw">var</span> idx <span class="kw">in</span> callbacks) <span class="op">{</span></a>
<a class="sourceLine" id="cb6-14" title="14">    callbacks[idx]()<span class="op">;</span></a>
<a class="sourceLine" id="cb6-15" title="15"><span class="op">}</span></a></code></pre></div>
<p>Here we’re creating a new scope with function(remember the JavaScript module pattern?), and then passing <code>say</code> variable to it. This guarantees that we have <code>say</code> variable local to the function. Then in callback returned by wrapper function, we have a reference just like before, but it’s not shared with any other functions.</p>
<p>In Python, there’s a cleaner way to do same thing:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode python"><code class="sourceCode python"><a class="sourceLine" id="cb7-1" title="1">callbacks <span class="op">=</span> []</a>
<a class="sourceLine" id="cb7-2" title="2"></a>
<a class="sourceLine" id="cb7-3" title="3"><span class="cf">for</span> i <span class="kw">in</span> [<span class="st">&quot;foo&quot;</span>, <span class="st">&quot;bar&quot;</span>, <span class="st">&quot;baz&quot;</span>]:</a>
<a class="sourceLine" id="cb7-4" title="4">    say <span class="op">=</span> <span class="st">&quot;say &quot;</span> <span class="op">+</span> i</a>
<a class="sourceLine" id="cb7-5" title="5">    <span class="kw">def</span> callback(say<span class="op">=</span>say):</a>
<a class="sourceLine" id="cb7-6" title="6">        <span class="bu">print</span> say</a>
<a class="sourceLine" id="cb7-7" title="7">    callbacks.append(callback)</a>
<a class="sourceLine" id="cb7-8" title="8"></a>
<a class="sourceLine" id="cb7-9" title="9"><span class="cf">for</span> c <span class="kw">in</span> callbacks:</a>
<a class="sourceLine" id="cb7-10" title="10">    c()</a></code></pre></div>
<p>Here the parameter is passed implicitly. (to me it’s still very strange and it shouldn’t be working, but for now I’ll just keep this post short)</p>
<h1 id="breaking-it">Breaking it</h1>
<p>Let’s have JavaScript’s behavior in Haskell:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb8-1" title="1"><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb8-2" title="2"></a>
<a class="sourceLine" id="cb8-3" title="3"><span class="kw">import</span> <span class="dt">Data.IORef</span></a>
<a class="sourceLine" id="cb8-4" title="4"></a>
<a class="sourceLine" id="cb8-5" title="5">printFromRef r <span class="fu">=</span> <span class="fu">putStrLn</span> <span class="fu">=&lt;&lt;</span> readIORef r</a>
<a class="sourceLine" id="cb8-6" title="6"></a>
<a class="sourceLine" id="cb8-7" title="7">mkCallbacks (w<span class="fu">:</span>ws) <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb8-8" title="8">    ref <span class="ot">&lt;-</span> newIORef w</a>
<a class="sourceLine" id="cb8-9" title="9">    r   <span class="ot">&lt;-</span> iter ref ws</a>
<a class="sourceLine" id="cb8-10" title="10">    <span class="fu">return</span> <span class="fu">$</span> printFromRef ref <span class="fu">:</span> r</a>
<a class="sourceLine" id="cb8-11" title="11">  <span class="kw">where</span> iter ref []     <span class="fu">=</span> <span class="fu">return</span> []</a>
<a class="sourceLine" id="cb8-12" title="12">        iter ref (w<span class="fu">:</span>ws) <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb8-13" title="13">          writeIORef ref w</a>
<a class="sourceLine" id="cb8-14" title="14">          cs <span class="ot">&lt;-</span> iter ref ws</a>
<a class="sourceLine" id="cb8-15" title="15">          <span class="fu">return</span> <span class="fu">$</span> printFromRef ref <span class="fu">:</span> cs</a>
<a class="sourceLine" id="cb8-16" title="16"></a>
<a class="sourceLine" id="cb8-17" title="17">main <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb8-18" title="18">  callbacks <span class="ot">&lt;-</span> mkCallbacks [ <span class="st">&quot;foo&quot;</span>, <span class="st">&quot;bar&quot;</span>, <span class="st">&quot;baz&quot;</span> ]</a>
<a class="sourceLine" id="cb8-19" title="19">  <span class="fu">sequence_</span> callbacks</a></code></pre></div>
<p>The reason this code is that long is because we need to create and pass references explicitly.</p>
<section class="footnotes">
<hr />
<ol>
<li id="fn1"><p>Calling this behavior <em>problem</em> may be a bit wrong, maybe it’s just a design decision. To me it’s a <em>problem</em> because this behavior is really counterintuitive.<a href="#fnref1" class="footnote-back">↩</a></p></li>
</ol>
</section>]]></summary>
</entry>
<entry>
    <title>Life.js - Javascript + DOM ile Game of Life</title>
    <link href="http://osa1.net/posts/2011-08-22-life-js---javascript-dom-ile-game-of-life.html" />
    <id>http://osa1.net/posts/2011-08-22-life-js---javascript-dom-ile-game-of-life.html</id>
    <published>2011-08-22T00:00:00Z</published>
    <updated>2011-08-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Life.js, Javascript ile yazılmış basit bir Conway’s Game of Life oyunu(ya da adı her neyse işte).</p>
<p>Geçen hafta kurcalamaya başladığım Javascript ile dün yazdım. Amacım basit birkaç şey yazarak Javascript’i az da olsa anlayabilmekti. Grid’i çizdirmek ve hareketler için DOM ile, bir tablo çizdiriyorum ve tablodaki alanların arkaplan renklerini değiştiriyorum.</p>
<p>Aşağıdaki gibi, sayfanızın istediğiniz herine Game of Life gridi koyup, istediğiniz hücreleri canlandırabilirsiniz,</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode html"><code class="sourceCode html"><a class="sourceLine" id="cb1-1" title="1"><span class="kw">&lt;div</span><span class="ot"> id=</span><span class="st">&quot;lifegrid&quot;</span><span class="ot"> style=</span><span class="st">&quot;height: 300px;&quot;</span><span class="kw">&gt;&lt;/div&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="kw">&lt;script</span><span class="ot"> src=</span><span class="st">&quot;life.js&quot;</span><span class="kw">&gt;&lt;/script&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="kw">&lt;script&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4">    <span class="kw">var</span> opts <span class="op">=</span> <span class="op">{</span><span class="st">&#39;height&#39;</span><span class="op">:</span> <span class="dv">9</span><span class="op">,</span></a>
<a class="sourceLine" id="cb1-5" title="5">                <span class="st">&#39;width&#39;</span><span class="op">:</span> <span class="dv">22</span><span class="op">};</span></a>
<a class="sourceLine" id="cb1-6" title="6">    <span class="kw">var</span> life <span class="op">=</span> <span class="kw">new</span> <span class="at">Life</span>(opts)<span class="op">;</span></a>
<a class="sourceLine" id="cb1-7" title="7">    <span class="va">life</span>.<span class="at">revive</span>(<span class="va">life</span>.<span class="at">grid</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> <span class="dv">4</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb1-8" title="8">    <span class="va">life</span>.<span class="at">revive</span>(<span class="va">life</span>.<span class="at">grid</span><span class="op">,</span> <span class="dv">4</span><span class="op">,</span> <span class="dv">4</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb1-9" title="9">    <span class="va">life</span>.<span class="at">revive</span>(<span class="va">life</span>.<span class="at">grid</span><span class="op">,</span> <span class="dv">5</span><span class="op">,</span> <span class="dv">4</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb1-10" title="10">    <span class="va">life</span>.<span class="at">revive</span>(<span class="va">life</span>.<span class="at">grid</span><span class="op">,</span> <span class="dv">6</span><span class="op">,</span> <span class="dv">4</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb1-11" title="11">    <span class="va">life</span>.<span class="at">revive</span>(<span class="va">life</span>.<span class="at">grid</span><span class="op">,</span> <span class="dv">7</span><span class="op">,</span> <span class="dv">4</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb1-12" title="12">    <span class="va">life</span>.<span class="at">revive</span>(<span class="va">life</span>.<span class="at">grid</span><span class="op">,</span> <span class="dv">8</span><span class="op">,</span> <span class="dv">4</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb1-13" title="13">    <span class="va">life</span>.<span class="at">revive</span>(<span class="va">life</span>.<span class="at">grid</span><span class="op">,</span> <span class="dv">9</span><span class="op">,</span> <span class="dv">4</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb1-14" title="14">    <span class="va">life</span>.<span class="at">revive</span>(<span class="va">life</span>.<span class="at">grid</span><span class="op">,</span> <span class="dv">10</span><span class="op">,</span> <span class="dv">4</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb1-15" title="15">    <span class="va">life</span>.<span class="at">revive</span>(<span class="va">life</span>.<span class="at">grid</span><span class="op">,</span> <span class="dv">11</span><span class="op">,</span> <span class="dv">4</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb1-16" title="16">    <span class="va">life</span>.<span class="at">revive</span>(<span class="va">life</span>.<span class="at">grid</span><span class="op">,</span> <span class="dv">12</span><span class="op">,</span> <span class="dv">4</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb1-17" title="17">    <span class="va">life</span>.<span class="at">drawTable</span>(<span class="va">document</span>.<span class="at">getElementById</span>(<span class="st">&quot;lifegrid&quot;</span>))<span class="op">;</span></a>
<a class="sourceLine" id="cb1-18" title="18">    <span class="va">life</span>.<span class="at">run</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb1-19" title="19"><span class="kw">&lt;/script&gt;</span></a></code></pre></div>
<p>Ya da rastgele oluşturulmuş bir oyun(yeniden oluşturmak için üstüne tıklayın):</p>
<script src="http://osa1.net/media/javascript/life.js"></script>
<div id="lifegrid2" style="height: 300px;">

</div>
<script>
    var opts = {'height': 30,
                'width': 30};
    var life = new Life(opts);
    life.fillRandom();
    life.drawTable(document.getElementById("lifegrid2"));
    life.run();
</script>
<div class="sourceCode" id="cb2"><pre class="sourceCode html"><code class="sourceCode html"><a class="sourceLine" id="cb2-1" title="1"><span class="kw">&lt;div</span><span class="ot"> id=</span><span class="st">&quot;lifegrid&quot;</span><span class="kw">&gt;&lt;/div&gt;</span></a>
<a class="sourceLine" id="cb2-2" title="2"><span class="kw">&lt;script&gt;</span></a>
<a class="sourceLine" id="cb2-3" title="3">    <span class="kw">var</span> opts <span class="op">=</span> <span class="op">{</span><span class="st">&#39;height&#39;</span><span class="op">:</span> <span class="dv">30</span><span class="op">,</span></a>
<a class="sourceLine" id="cb2-4" title="4">                <span class="st">&#39;width&#39;</span><span class="op">:</span> <span class="dv">30</span><span class="op">};</span></a>
<a class="sourceLine" id="cb2-5" title="5">    <span class="kw">var</span> life <span class="op">=</span> <span class="kw">new</span> <span class="at">Life</span>(opts)<span class="op">;</span></a>
<a class="sourceLine" id="cb2-6" title="6">    <span class="va">life</span>.<span class="at">fillRandom</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb2-7" title="7">    <span class="va">life</span>.<span class="at">drawTable</span>(<span class="va">document</span>.<span class="at">getElementById</span>(<span class="st">&quot;lifegrid&quot;</span>))<span class="op">;</span></a>
<a class="sourceLine" id="cb2-8" title="8">    <span class="va">life</span>.<span class="at">run</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb2-9" title="9"><span class="kw">&lt;/script&gt;</span></a></code></pre></div>
<p>Henüz Javascript konusunda bir karara varamadım. Bir süre daha kurcalamaya devam edeceğim sanırım. Web programlama/tasarım olaylarından hiç hoşlanmayan biri olarak, Javascript’e başlama sebebim, neden sürekli farkı dillerden Javascript’e derleyicilerin yazıldığını(CoffeeScript, ClojureScript, Pyjamas, HaXe) ve <a href="http://bellard.org/jslinux/">Javascript içerisinde Linux</a> veya <a href="http://hell.student.utwente.nl/paratrooper/">Javascript PC emulator</a> gibi uygulamaların nasıl ve neden yapıldığını, V8, Node.js tarayıcı eklentileri ve DOM gibi şeyleri az da olsa anlayabilmekti. DOM kısmı hariç henüz amacıma yaklaşamadım diyebilirim.</p>
<p>DOM kısmı işin en kolayı diyebilirim(ya da en azından başlangıç seviyesinde öyle gözüküyor). Daha önceden XML parse etmekle vs. uğraştıysanız muhtemelen yabancılık çekmeyeceksiniz. DOM öğrenmenin en eğlenceli yolu, bence, rastgele sayfaları açıp, resimler veya içeriği başka şeylerle değiştirmek, butonlar vb. şeyler eklemek. HTML konusunda iyi olmadığımdan çok fazla birşey yapamadım ama en azından Google logosu yerine lolcat veya osa1 logosu koymak güzel oluyor(<code>$('hplogo').style.cssText += &quot;background-image: url(http://osa1.net/media/logo.png)&quot;</code> :)</p>
<p><a href="http://osa1.net/media/javascript/life.js">Şurdan</a> indirebilirsiniz. Javascript ile yazdığım ilk uygulamam olmasından ve öğrenmem + uygulamayı yazmamın toplam 4-5 akşam sürmesinden dolayı, kod iyi bir Javascript kodu sayılmaz muhtemelen. Tüm tarayıcılarda da çalışmayabilir(hatta içimden bir ses IE’de çalışmayacağını söylüyor nedense, test etme şansım yok), Firefox ve Chromium ile çalışıyor en azından. Onun dışında Javascript’de OOP konusunu hala tam olarak çözebilmiş değilim(prototype’lar hakkında kafama yatmayan birkaç şey, private methodların nasıl uygulanabileceği vs.). Onun dışında JSLint’de bir sürü uyarı veriyor ama henüz neden JSLint’i dinlemem gerektiğini bilmediğimden pek bir çaba sarfetmedim açıkçası.</p>
<p>Kaynak olarak ağırlıklı olarak <a href="http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742/ref=sr_1_1?ie=UTF8&amp;qid=1314040474&amp;sr=8-1">Javascript: The Good Parts</a> kullandım. Javascript gibi bir sürü ilk bakışta anlamsız gelen(ve çoğunun gerçekten anlamsız olduğu(inner fonksiyonlardaki <code>this</code> referansı, namespace problemleri, <code>new</code> keywordunun kullanımı vs.)) özelliklere sahip bir dili öğrenmek için mükemmel bir kitap(programlamaya yeni başlayanlar için değil). Onun dışında DOM ve eventlar hakkında <a href="http://eloquentjavascript.net/">Eloquent Javascript</a>’e başvurdum. Bu aşamadan sonra sanırım <a href="http://www.yuiblog.com/crockford/">Douglas Crockford’un Javascript videoları</a>nı izleyip, birkaç uygulama daha yazacağım. Daha sonra hoşuma giderse Javascript ile devam edebilirim.</p>
<p>Genel olarak programlama dilleri ve implementasyonları çok ilgimi çekiyor ve herhangi bir farklı özellik/yöntem için yeni bir programlama dili öğrenebilirim. Python ile başlayıp, dersler gereği Java, C, C++, daha sonra Common Lisp, Clojure ve şimdi de Javascript ile devam eden programlama dilleri maceram hakkında bir yazı yazıyorum. Eğer bitirip, sonuçtan memnun kalırsam herhande birkaç gün içinde ekleyeceğim.</p>]]></summary>
</entry>

</feed>
