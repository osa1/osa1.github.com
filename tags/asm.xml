<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>osa1.net - Posts tagged asm</title>
    <link href="http://osa1.net/tags/asm.xml" rel="self" />
    <link href="http://osa1.net" />
    <id>http://osa1.net/tags/asm.xml</id>
    <author>
        <name>Ömer Sinan Ağacan</name>
        <email>omeragaca@gmail.com</email>
    </author>
    <updated>2013-11-14T00:00:00Z</updated>
    <entry>
    <title>Testing assembly programs using Haskell, QuickCheck (and FFI)</title>
    <link href="http://osa1.net/posts/2013-11-14-testing-asm-using-haskell.html" />
    <id>http://osa1.net/posts/2013-11-14-testing-asm-using-haskell.html</id>
    <published>2013-11-14T00:00:00Z</published>
    <updated>2013-11-14T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I’ve been studying 64bit calling conventions for x64 family recently. To do this, I was writing some function in assembly and then calling my functions from a C program to be sure that parameter passing and returning values are working correctly.</p>
<p>It generally works fine, and linking C program with assembly programs are easy enough. Today I got the idea of using Haskell + QuickCheck to test my assembly programs, this way I could also be more confident that not only parameter passing/return values work correctly, but my implementation of algorithm in assembly is also correct.</p>
<p>Linking assembly programs with a Haskell program is surprisingly easy. In the rest of this post, I’ll explain how to compile and link power function written in assembly to test program written in Haskell.</p>
<p>Here’s a power function that works on 64bit unsigned numbers, implemented using x64 ABI conventions:</p>
<pre class="assembly"><code>section .text
global power
power:
	mov rbx, rdi        ; move first parameter to rbx
	mov rcx, rsi        ; move second parameter to rcx

	cmp rcx, 0          ; return 1 if power is 0
	je end_power_one

	mov rax, rbx        ; move result to rax for multiplication

power_loop_start:
	cmp rcx, 1
	je end_power

	mul rbx
	dec rcx
	jmp power_loop_start

end_power_one:
	mov rax, 1

end_power:
	ret</code></pre>
<p>This is written using <a href="http://www.nasm.us/">Netwide Assembler</a>(best assembly syntax, IMO). Since we’re working on 64bit system, we need to compile it to <code>elf64</code> format:</p>
<pre><code>nasm -f elf64 power_lib.s -o power_lib.o</code></pre>
<p>Once we have our compiled file for power function, we need to declare it in Haskell as a foreign function, using correct types. A short tour in <code>Foreign.C.Types</code> library showed that <code>CULong</code> type is actually a newtype wrapper around <code>Word64</code>, which is 64bit unsigned number type:</p>
<pre><code>ghci&gt; :m + Foreign.C.Types 
ghci&gt; :info CULong
newtype CULong = CULong GHC.Word.Word64
        -- Defined in `Foreign.C.Types&#39;</code></pre>
<p>(not that this part should be different on 32bit systems – eg. on 32bit system you should see <code>CULong GHC.Word.Word32</code> instead of <code>Word64</code>)</p>
<p>We also need a <code>Arbitrary</code> instance for <code>CULong</code> type to be able to use QuickCheck on this type. Since <code>CULong</code> is just a newtype wrapper over <code>Word64</code>, and <code>Word64</code> already has instance defined in QuickCheck library, we can have that for free. In the end, our test code is:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb4-1" title="1"><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb4-2" title="2"></a>
<a class="sourceLine" id="cb4-3" title="3"><span class="kw">import</span> <span class="dt">Foreign.C.Types</span></a>
<a class="sourceLine" id="cb4-4" title="4"><span class="kw">import</span> <span class="dt">Test.QuickCheck</span></a>
<a class="sourceLine" id="cb4-5" title="5"></a>
<a class="sourceLine" id="cb4-6" title="6">foreign <span class="kw">import</span> ccall &quot;power&quot;</a>
<a class="sourceLine" id="cb4-7" title="7"><span class="ot">    power ::</span> <span class="dt">CULong</span> <span class="ot">-&gt;</span> <span class="dt">CULong</span> <span class="ot">-&gt;</span> <span class="dt">CULong</span></a>
<a class="sourceLine" id="cb4-8" title="8"></a>
<a class="sourceLine" id="cb4-9" title="9"><span class="kw">instance</span> <span class="dt">Arbitrary</span> <span class="dt">CULong</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb4-10" title="10">    arbitrary <span class="fu">=</span> <span class="fu">fmap</span> <span class="dt">CULong</span> arbitrary</a>
<a class="sourceLine" id="cb4-11" title="11">    shrink (<span class="dt">CULong</span> i) <span class="fu">=</span> <span class="fu">map</span> <span class="dt">CULong</span> <span class="fu">$</span> shrink i</a>
<a class="sourceLine" id="cb4-12" title="12"></a>
<a class="sourceLine" id="cb4-13" title="13">test_prop b p <span class="fu">=</span> power b p <span class="fu">==</span> b <span class="fu">^</span> p</a>
<a class="sourceLine" id="cb4-14" title="14"></a>
<a class="sourceLine" id="cb4-15" title="15"><span class="ot">main ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb4-16" title="16">main <span class="fu">=</span> quickCheck test_prop</a></code></pre></div>
<p>and that’s it. Very simple, 16 lines of code. To compile this, I also wrote a Makefile:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode makefile"><code class="sourceCode makefile"><a class="sourceLine" id="cb5-1" title="1"><span class="dv">power:</span><span class="dt"> power_test.hs power_lib.o</span></a>
<a class="sourceLine" id="cb5-2" title="2">	ghc --make <span class="ch">$^</span></a>
<a class="sourceLine" id="cb5-3" title="3"></a>
<a class="sourceLine" id="cb5-4" title="4"><span class="dv">power_lib.o:</span><span class="dt"> power_lib.s</span></a>
<a class="sourceLine" id="cb5-5" title="5">	nasm -f elf64 <span class="ch">$&lt;</span> -o <span class="ch">$@</span></a>
<a class="sourceLine" id="cb5-6" title="6"></a>
<a class="sourceLine" id="cb5-7" title="7"><span class="dv">clean:</span></a>
<a class="sourceLine" id="cb5-8" title="8">	<span class="ch">-</span><span class="fu">rm power_lib.o</span></a>
<a class="sourceLine" id="cb5-9" title="9">	<span class="ch">-</span><span class="fu">rm power_test power_test.hi power_test.o</span></a></code></pre></div>
<p>(this may be helpful to see how compilation work)</p>
<p>I think this is also a good demonstration of how easy it is to interact with foreign functions in Haskell.</p>]]></summary>
</entry>

</feed>
