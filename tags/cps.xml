<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>osa1.net - Posts tagged cps</title>
    <link href="http://osa1.net/tags/cps.xml" rel="self" />
    <link href="http://osa1.net" />
    <id>http://osa1.net/tags/cps.xml</id>
    <author>
        <name>Ömer Sinan Ağacan</name>
        <email>omeragaca@gmail.com</email>
    </author>
    <updated>2013-10-21T00:00:00Z</updated>
    <entry>
    <title>Memoized parsing in continuation-passing style</title>
    <link href="http://osa1.net/posts/2013-10-21-memoized-parsing-cps.html" />
    <id>http://osa1.net/posts/2013-10-21-memoized-parsing-cps.html</id>
    <published>2013-10-21T00:00:00Z</published>
    <updated>2013-10-21T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Continuations are truly magical things. They’re the “ultimate abstractions of control flow”. Even without using any fancy language features like <code>call/cc</code>, you can have seriously cool and mind-boggling programs.</p>
<p>In <a href="http://arxiv.org/pdf/cmp-lg/9504016">“Memoization in Top-Down Parsing”</a> paper, Mark Johnson builds up from memoizing top-down parsers and describes a way to handle left recursion in top-down parsers by combining memoization techniques with continuations.</p>
<p>I ported the code to Lua to experiment, you can see it <a href="https://gist.github.com/osa1/7089333">here</a>. Most interesting part is the memoized CPS parser generator from a normal CPS parser function:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode lua"><code class="sourceCode lua"><a class="sourceLine" id="cb1-1" data-line-number="1"><span class="kw">function</span> memo<span class="ot">(</span>parser<span class="ot">)</span></a>
<a class="sourceLine" id="cb1-2" data-line-number="2">    <span class="do">-- </span><span class="al">WARNING</span><span class="do">: this function is badly implemented in the sense that</span></a>
<a class="sourceLine" id="cb1-3" data-line-number="3">    <span class="do">-- if you parser generated by this function on two different streams</span></a>
<a class="sourceLine" id="cb1-4" data-line-number="4">    <span class="do">-- it will generate wrong results</span></a>
<a class="sourceLine" id="cb1-5" data-line-number="5">    <span class="kw">local</span> tbl <span class="ot">=</span> <span class="ot">{}</span></a>
<a class="sourceLine" id="cb1-6" data-line-number="6">    <span class="kw">return</span> <span class="kw">function</span> <span class="ot">(</span>stream<span class="ot">,</span> idx<span class="ot">,</span> cont<span class="ot">)</span></a>
<a class="sourceLine" id="cb1-7" data-line-number="7">        <span class="kw">if</span> tbl<span class="ot">[</span>idx<span class="ot">]</span> <span class="ot">==</span> <span class="kw">nil</span> <span class="kw">then</span></a>
<a class="sourceLine" id="cb1-8" data-line-number="8">            tbl<span class="ot">[</span>idx<span class="ot">]</span> <span class="ot">=</span> <span class="ot">{</span> results <span class="ot">=</span> <span class="ot">{},</span> conts <span class="ot">=</span> <span class="ot">{}</span> <span class="ot">}</span></a>
<a class="sourceLine" id="cb1-9" data-line-number="9">            <span class="fu">table.insert</span><span class="ot">(</span>tbl<span class="ot">[</span>idx<span class="ot">].</span>conts<span class="ot">,</span> cont<span class="ot">)</span></a>
<a class="sourceLine" id="cb1-10" data-line-number="10">            parser<span class="ot">(</span>stream<span class="ot">,</span> idx<span class="ot">,</span> <span class="kw">function</span> <span class="ot">(</span>parse_result<span class="ot">)</span></a>
<a class="sourceLine" id="cb1-11" data-line-number="11">                <span class="do">-- check if same parse_result is already in the table</span></a>
<a class="sourceLine" id="cb1-12" data-line-number="12">                <span class="kw">local</span> exists <span class="ot">=</span> <span class="kw">false</span></a>
<a class="sourceLine" id="cb1-13" data-line-number="13">                <span class="kw">for</span> _<span class="ot">,</span> result <span class="kw">in</span> <span class="fu">ipairs</span><span class="ot">(</span>tbl<span class="ot">[</span>idx<span class="ot">].</span>results<span class="ot">)</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb1-14" data-line-number="14">                    <span class="kw">if</span> result <span class="ot">==</span> parse_result <span class="kw">then</span> <span class="do">-- </span><span class="al">TODO</span><span class="do">: this equality is probably wrong</span></a>
<a class="sourceLine" id="cb1-15" data-line-number="15">                        exists <span class="ot">=</span> <span class="kw">true</span></a>
<a class="sourceLine" id="cb1-16" data-line-number="16">                        <span class="kw">break</span></a>
<a class="sourceLine" id="cb1-17" data-line-number="17">                    <span class="kw">end</span></a>
<a class="sourceLine" id="cb1-18" data-line-number="18">                <span class="kw">end</span></a>
<a class="sourceLine" id="cb1-19" data-line-number="19"> </a>
<a class="sourceLine" id="cb1-20" data-line-number="20">                <span class="kw">if</span> <span class="kw">not</span> exists <span class="kw">then</span></a>
<a class="sourceLine" id="cb1-21" data-line-number="21">                    <span class="fu">table.insert</span><span class="ot">(</span>tbl<span class="ot">[</span>idx<span class="ot">].</span>results<span class="ot">,</span> parse_result<span class="ot">)</span></a>
<a class="sourceLine" id="cb1-22" data-line-number="22">                    <span class="kw">for</span> _<span class="ot">,</span> cont <span class="kw">in</span> <span class="fu">ipairs</span><span class="ot">(</span>tbl<span class="ot">[</span>idx<span class="ot">].</span>conts<span class="ot">)</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb1-23" data-line-number="23">                        cont<span class="ot">(</span>parse_result<span class="ot">)</span></a>
<a class="sourceLine" id="cb1-24" data-line-number="24">                    <span class="kw">end</span></a>
<a class="sourceLine" id="cb1-25" data-line-number="25">                <span class="kw">end</span></a>
<a class="sourceLine" id="cb1-26" data-line-number="26">            <span class="kw">end</span><span class="ot">)</span></a>
<a class="sourceLine" id="cb1-27" data-line-number="27">        <span class="kw">else</span></a>
<a class="sourceLine" id="cb1-28" data-line-number="28">            <span class="fu">table.insert</span><span class="ot">(</span>tbl<span class="ot">[</span>idx<span class="ot">].</span>conts<span class="ot">,</span> cont<span class="ot">)</span></a>
<a class="sourceLine" id="cb1-29" data-line-number="29">            <span class="kw">for</span> _<span class="ot">,</span> result <span class="kw">in</span> <span class="fu">ipairs</span><span class="ot">(</span>tbl<span class="ot">[</span>idx<span class="ot">].</span>results<span class="ot">)</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb1-30" data-line-number="30">                cont<span class="ot">(</span>result<span class="ot">)</span></a>
<a class="sourceLine" id="cb1-31" data-line-number="31">            <span class="kw">end</span></a>
<a class="sourceLine" id="cb1-32" data-line-number="32">        <span class="kw">end</span></a>
<a class="sourceLine" id="cb1-33" data-line-number="33">        <span class="kw">return</span> tbl<span class="ot">[</span>idx<span class="ot">]</span></a>
<a class="sourceLine" id="cb1-34" data-line-number="34">    <span class="kw">end</span></a>
<a class="sourceLine" id="cb1-35" data-line-number="35"><span class="kw">end</span></a></code></pre></div>
<p>(btw, I found porting this code to a purely functional setting very hard thing to do. If you find a way to do this, please send me your code. Thanks.)</p>
<p>This piece of code didn’t make sense to me for a while. I think the key to understand this function is to find answer to this question:</p>
<p>How is this different from keeping a set of productions visited without consuming any input from input stream and when you come to the same production, just failing instead of trying to parse? Because trying to derive same production without consuming any input means you’ll end up with infinite loop.</p>
<p>This function different in that it accounts for parsing same production after following a different path of production. Think this CFG as an example:</p>
<pre><code>T ::= T + T
    | int</code></pre>
<p>In order to derive first production, it first needs to parse a <code>T</code>. But then it will be already noted that it was already trying to parse <code>T</code>, and add the continuation to the list of continuations to be called when a T at input position 1 is parsed.</p>
<p>While trying alternatives, it will parse an <code>int</code>, and derive <code>T -&gt; int</code> at input position 1. And since it had saved the continuations to call when it successfully parse a <code>T</code> at location 1, it will call this continuations and thus parsing will continue.</p>
<p>I hope this helps other people to understand the trick.</p>]]></summary>
</entry>

</feed>
