<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>osa1.net - Posts tagged parsing</title>
    <link href="http://osa1.net/tags/parsing.xml" rel="self" />
    <link href="http://osa1.net" />
    <id>http://osa1.net/tags/parsing.xml</id>
    <author>
        <name>Ömer Sinan Ağacan</name>
        <email>omeragaca@gmail.com</email>
    </author>
    <updated>2015-01-29T00:00:00Z</updated>
    <entry>
    <title>Top-down expression parsing is easy</title>
    <link href="http://osa1.net/posts/2015-01-29-top-down-expr-parsing-easy.html" />
    <id>http://osa1.net/posts/2015-01-29-top-down-expr-parsing-easy.html</id>
    <published>2015-01-29T00:00:00Z</published>
    <updated>2015-01-29T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I recently fixed <a href="http://hackage.haskell.org/package/language-lua">language-lua</a>’s 2-years-old expression parsing bug. Previously it was using <a href="http://hackage.haskell.org/package/parsec-3.1.8/docs/Text-Parsec-Expr.html">Parsec’s expression parser</a>, which is actually horrible because it can’t handle chained unary operators.</p>
<p>Two weeks ago I decided to take a look into Lua’s original implementation, and in about an hour or so the algorithm was crystal clear to me. I immediately <a href="https://github.com/osa1/language-lua/commit/b4bebe36e927dcc671dbe6dd19572b83073dc556#diff-630bbd2d118baf109da6ad79d3f168bfR257">implemented it</a> and closed the <a href="https://github.com/osa1/language-lua/issues/2">2-years-old bug report</a>.</p>
<p>This implementation is essentially a port of Lua’s expression parser. Recently I thought about the algorithm and I was wondering if this has a name – the algorithm looked pretty obvious to me once I understand and given how much we know about parsing I thought this should have a name.</p>
<p>I found <a href="http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing">this algorithm named “precedence climbing”</a>. This is almost the same algorithm, only difference is that instead of using <code>lookahead</code> I’m just consuming the binary operator and returning it to the caller(which is parsing an expression with lower precedence than current parser) if precedence is lower. Associativity handling is also different(I use different left and right precedences to handle associativity) but the idea is really the same.</p>
<p>Now, there is also another algorithm called Pratt, and I can’t read the original paper(paywall), but according to <a href="http://lambda-the-ultimate.org/node/3682">this LtU discussion</a> it should also be similar. Indeed, <a href="http://journal.stuffwithstuff.com/2011/03/19/pratt-parsers-expression-parsing-made-easy/">this explanation of it</a> looks pretty similar, and <a href="http://stackoverflow.com/a/13637731/691032">this StackOverflow answer</a> says that Lua’s implementation is “Pratt style parsing”.</p>
<p>So it seems like we have two, or maybe one since they’re actually very similar, solution(s) to solve top-down expression parsing problem and Haskell implementation using Parsec is possible in only 12 lines of code.</p>
<h1 id="a-challenge">A challenge</h1>
<p>One challenge might be to modify Parsec’s expression parser so that internally it generates a Pratt/precedence climbing parser. I’m hoping to spare some time to work on this.</p>]]></summary>
</entry>
<entry>
    <title>An idea to handle left-recursion in Parsec</title>
    <link href="http://osa1.net/posts/2014-03-07-parsec-left-recursion.html" />
    <id>http://osa1.net/posts/2014-03-07-parsec-left-recursion.html</id>
    <published>2014-03-07T00:00:00Z</published>
    <updated>2014-03-07T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I recently realized that it may be possible to handle left-recursion in Parsec style parser combinator libraries. I quickly wrote a simple prototype implementation that demonstrates the idea.</p>
<p>The idea is to keep track of parser functions that are called without consuming any tokens from input stream. You should be able to run failure procedures when same parser function is encountered more than one time without consuming any tokens. When a token is consumed, state that is used to keep track of parser functions should be reset.</p>
<p>One assumption here is that I’m assuming parser functions do not alter any states. Otherwise when you come across a same parser, you can have different state and parser may behave differently.</p>
<p>Implementing the idea is easy even without having any extra support from Parsec. Here’s a demonstration on my favorite ambiguous grammar:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="co">-- Exp ::= Int</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a><span class="co">--      |  Exp `+` Exp</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Exp</span> <span class="ot">=</span> <span class="dt">Int</span> <span class="dt">Int</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a>         <span class="op">|</span> <span class="dt">Add</span> <span class="dt">Exp</span> <span class="dt">Exp</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a>         <span class="kw">deriving</span> (<span class="dt">Show</span>)</span></code></pre></div>
<p>Parsers for non-terminals are easy:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a>plus <span class="ot">=</span> char <span class="ch">&#39;+&#39;</span> <span class="op">&gt;&gt;</span> spaces</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a>int  <span class="ot">=</span> <span class="fu">fmap</span> (<span class="dt">Int</span> <span class="op">.</span> <span class="fu">read</span>) <span class="op">$</span> many1 digit <span class="op">&lt;*</span> spaces</span></code></pre></div>
<p>I’m using a set to keep track of already visited parsers:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">MarksSeen</span> <span class="ot">=</span> <span class="dt">S.Set</span> <span class="dt">Int</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">RecParser</span> s m a <span class="ot">=</span> <span class="dt">ParsecT</span> s <span class="dt">MarksSeen</span> m a</span></code></pre></div>
<p>Auxiliary functions to alter the state that keeps track of visited parsers:</p>
<pre><code>putMark i = do
    is &lt;- getState
    if S.member i is
      then fail &quot;recursion&quot;
      else putState $ S.insert i is

resetMarks = putState S.empty</code></pre>
<p>Now the interesting part, <code>add</code> parser marks itself as first thing to do, and calls <code>exp</code> parser. Since <code>exp</code> parser is entry point, this means an indirect recursive call. When same <code>putMark</code> call is made, Parsec runs failure actions instead of going into infinte loop:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a>add <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a>    putMark <span class="dv">1</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a>    e1 <span class="ot">&lt;-</span> <span class="fu">exp</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a>    resetMarks</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true"></a>    plus</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true"></a>    e2 <span class="ot">&lt;-</span> <span class="fu">exp</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true"></a>    spaces</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true"></a>    <span class="fu">return</span> <span class="op">$</span> <span class="dt">Add</span> e1 e2</span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true"></a></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true"></a><span class="fu">exp</span> <span class="ot">=</span> choice [try add, int]</span></code></pre></div>
<p><code>resetMarks</code> call is also important, <code>exp</code> has to consume some tokens, so after parsing <code>e1</code>, I’m calling <code>resetMarks</code>.</p>
<p>Here’s an example call of this parser:</p>
<pre><code>ghci&gt; runParser exp S.empty &quot;&quot; &quot;1 + 2 + 3 + 4&quot;
Right (Add (Int 1) (Add (Int 2) (Add (Int 3) (Int 4))))</code></pre>
<p>You can observe that parser gets into an infinite loop when marks are removed. Here’s an example demonstrating the error message:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a>rec <span class="ot">=</span> putMark <span class="dv">0</span> <span class="op">&gt;&gt;</span> rec <span class="op">&gt;&gt;</span> resetMarks</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true"></a>ghci<span class="op">&gt;</span> runParser rec S.empty <span class="st">&quot;&quot;</span> <span class="st">&quot;&quot;</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true"></a><span class="dt">Left</span> (line <span class="dv">1</span>, column <span class="dv">1</span>)<span class="op">:</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true"></a>recursion</span></code></pre></div>
<p>One problem with this approach is that it requires more typing, and you should be careful too. Marks can be placed using TemplateHaskell to ensure unique numbers are given to each <code>putMark</code> call. As a second improvement, I think with some modifications on Parsec we can make Parsec to reset marks when a token is consumed(using <em>consumed-ok</em> continuation of <code>ParsecT</code>).</p>
<p>You can see the complete program <a href="https://gist.github.com/osa1/9414577">here</a>.</p>
<hr />
<p>Removing left-recursions in your grammar may not be a huge problem – except when you’re working on functional languages with ML-like syntax. Then you’re out of luck because being functional means you’re <code>Exp</code> non-terminal contains several dozen of productions and function applications is a part of that too, and it’s left-recursive:</p>
<pre><code>Exp ::= ...
     |  Exp Exp_1 ... Exp_N [left-associative]
     ... a hundred more productions ...</code></pre>
<p>Whenever I need to write a parser for a grammar like this, I’m thinking for an easier way to parse it. I still couldn’t come up with a solution. Idea I just explained does not solve it, because it parses right-associatively. There is one workaround, but I’m not sure if that results with a parser for same grammar:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true"></a>app <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true"></a>    putMark <span class="dv">2</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true"></a>    fn <span class="ot">&lt;-</span> <span class="fu">exp</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true"></a>    resetMarks</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true"></a></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true"></a>    putMark <span class="dv">2</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true"></a>    as <span class="ot">&lt;-</span> many1 <span class="fu">exp</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true"></a>    resetMarks</span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true"></a></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true"></a>    <span class="fu">return</span> <span class="op">$</span> <span class="fu">foldl</span> <span class="dt">App</span> fn as</span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true"></a></span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true"></a></span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true"></a>ghci<span class="op">&gt;</span> runParser pgm S.empty <span class="st">&quot;&quot;</span> <span class="st">&quot;1 2 3 4 + 5 + 6 7&quot;</span></span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true"></a><span class="dt">Right</span> (<span class="dt">Add</span> (<span class="dt">App</span> (<span class="dt">App</span> (<span class="dt">App</span> (<span class="dt">Int</span> <span class="dv">1</span>) (<span class="dt">Int</span> <span class="dv">2</span>)) (<span class="dt">Int</span> <span class="dv">3</span>)) (<span class="dt">Int</span> <span class="dv">4</span>)) (<span class="dt">Add</span> (<span class="dt">Int</span> <span class="dv">5</span>) (<span class="dt">App</span> (<span class="dt">Int</span> <span class="dv">6</span>) (<span class="dt">Int</span> <span class="dv">7</span>))))</span>
<span id="cb9-15"><a href="#cb9-15" aria-hidden="true"></a></span>
<span id="cb9-16"><a href="#cb9-16" aria-hidden="true"></a>ghci<span class="op">&gt;</span> runParser pgm S.empty <span class="st">&quot;&quot;</span> <span class="st">&quot;1 + 2 + 3 4&quot;</span></span>
<span id="cb9-17"><a href="#cb9-17" aria-hidden="true"></a><span class="dt">Right</span> (<span class="dt">Add</span> (<span class="dt">Int</span> <span class="dv">1</span>) (<span class="dt">Add</span> (<span class="dt">Int</span> <span class="dv">2</span>) (<span class="dt">App</span> (<span class="dt">Int</span> <span class="dv">3</span>) (<span class="dt">Int</span> <span class="dv">4</span>))))</span></code></pre></div>]]></summary>
</entry>
<entry>
    <title>Memoized parsing in continuation-passing style</title>
    <link href="http://osa1.net/posts/2013-10-21-memoized-parsing-cps.html" />
    <id>http://osa1.net/posts/2013-10-21-memoized-parsing-cps.html</id>
    <published>2013-10-21T00:00:00Z</published>
    <updated>2013-10-21T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Continuations are truly magical things. They’re the “ultimate abstractions of control flow”. Even without using any fancy language features like <code>call/cc</code>, you can have seriously cool and mind-boggling programs.</p>
<p>In <a href="http://arxiv.org/pdf/cmp-lg/9504016">“Memoization in Top-Down Parsing”</a> paper, Mark Johnson builds up from memoizing top-down parsers and describes a way to handle left recursion in top-down parsers by combining memoization techniques with continuations.</p>
<p>I ported the code to Lua to experiment, you can see it <a href="https://gist.github.com/osa1/7089333">here</a>. Most interesting part is the memoized CPS parser generator from a normal CPS parser function:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode lua"><code class="sourceCode lua"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="kw">function</span> memo<span class="op">(</span>parser<span class="op">)</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a>    <span class="co">-- </span><span class="al">WARNING</span><span class="co">: this function is badly implemented in the sense that</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>    <span class="co">-- if you parser generated by this function on two different streams</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a>    <span class="co">-- it will generate wrong results</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a>    <span class="kw">local</span> tbl <span class="op">=</span> <span class="op">{}</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a>    <span class="cf">return</span> <span class="kw">function</span> <span class="op">(</span>stream<span class="op">,</span> idx<span class="op">,</span> cont<span class="op">)</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a>        <span class="cf">if</span> tbl<span class="op">[</span>idx<span class="op">]</span> <span class="op">==</span> <span class="kw">nil</span> <span class="cf">then</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true"></a>            tbl<span class="op">[</span>idx<span class="op">]</span> <span class="op">=</span> <span class="op">{</span> results <span class="op">=</span> <span class="op">{},</span> conts <span class="op">=</span> <span class="op">{}</span> <span class="op">}</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true"></a>            <span class="fu">table.insert</span><span class="op">(</span>tbl<span class="op">[</span>idx<span class="op">].</span>conts<span class="op">,</span> cont<span class="op">)</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true"></a>            parser<span class="op">(</span>stream<span class="op">,</span> idx<span class="op">,</span> <span class="kw">function</span> <span class="op">(</span>parse_result<span class="op">)</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true"></a>                <span class="co">-- check if same parse_result is already in the table</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true"></a>                <span class="kw">local</span> exists <span class="op">=</span> <span class="kw">false</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true"></a>                <span class="cf">for</span> <span class="cn">_</span><span class="op">,</span> result <span class="kw">in</span> <span class="fu">ipairs</span><span class="op">(</span>tbl<span class="op">[</span>idx<span class="op">].</span>results<span class="op">)</span> <span class="cf">do</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true"></a>                    <span class="cf">if</span> result <span class="op">==</span> parse_result <span class="cf">then</span> <span class="co">-- </span><span class="al">TODO</span><span class="co">: this equality is probably wrong</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true"></a>                        exists <span class="op">=</span> <span class="kw">true</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true"></a>                        <span class="cf">break</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true"></a>                    <span class="cf">end</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true"></a>                <span class="cf">end</span></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true"></a> </span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true"></a>                <span class="cf">if</span> <span class="kw">not</span> exists <span class="cf">then</span></span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true"></a>                    <span class="fu">table.insert</span><span class="op">(</span>tbl<span class="op">[</span>idx<span class="op">].</span>results<span class="op">,</span> parse_result<span class="op">)</span></span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true"></a>                    <span class="cf">for</span> <span class="cn">_</span><span class="op">,</span> cont <span class="kw">in</span> <span class="fu">ipairs</span><span class="op">(</span>tbl<span class="op">[</span>idx<span class="op">].</span>conts<span class="op">)</span> <span class="cf">do</span></span>
<span id="cb1-23"><a href="#cb1-23" aria-hidden="true"></a>                        cont<span class="op">(</span>parse_result<span class="op">)</span></span>
<span id="cb1-24"><a href="#cb1-24" aria-hidden="true"></a>                    <span class="cf">end</span></span>
<span id="cb1-25"><a href="#cb1-25" aria-hidden="true"></a>                <span class="cf">end</span></span>
<span id="cb1-26"><a href="#cb1-26" aria-hidden="true"></a>            <span class="kw">end</span><span class="op">)</span></span>
<span id="cb1-27"><a href="#cb1-27" aria-hidden="true"></a>        <span class="cf">else</span></span>
<span id="cb1-28"><a href="#cb1-28" aria-hidden="true"></a>            <span class="fu">table.insert</span><span class="op">(</span>tbl<span class="op">[</span>idx<span class="op">].</span>conts<span class="op">,</span> cont<span class="op">)</span></span>
<span id="cb1-29"><a href="#cb1-29" aria-hidden="true"></a>            <span class="cf">for</span> <span class="cn">_</span><span class="op">,</span> result <span class="kw">in</span> <span class="fu">ipairs</span><span class="op">(</span>tbl<span class="op">[</span>idx<span class="op">].</span>results<span class="op">)</span> <span class="cf">do</span></span>
<span id="cb1-30"><a href="#cb1-30" aria-hidden="true"></a>                cont<span class="op">(</span>result<span class="op">)</span></span>
<span id="cb1-31"><a href="#cb1-31" aria-hidden="true"></a>            <span class="cf">end</span></span>
<span id="cb1-32"><a href="#cb1-32" aria-hidden="true"></a>        <span class="cf">end</span></span>
<span id="cb1-33"><a href="#cb1-33" aria-hidden="true"></a>        <span class="cf">return</span> tbl<span class="op">[</span>idx<span class="op">]</span></span>
<span id="cb1-34"><a href="#cb1-34" aria-hidden="true"></a>    <span class="kw">end</span></span>
<span id="cb1-35"><a href="#cb1-35" aria-hidden="true"></a><span class="kw">end</span></span></code></pre></div>
<p>(btw, I found porting this code to a purely functional setting very hard thing to do. If you find a way to do this, please send me your code. Thanks.)</p>
<p>This piece of code didn’t make sense to me for a while. I think the key to understand this function is to find answer to this question:</p>
<p>How is this different from keeping a set of productions visited without consuming any input from input stream and when you come to the same production, just failing instead of trying to parse? Because trying to derive same production without consuming any input means you’ll end up with infinite loop.</p>
<p>This function different in that it accounts for parsing same production after following a different path of production. Think this CFG as an example:</p>
<pre><code>T ::= T + T
    | int</code></pre>
<p>In order to derive first production, it first needs to parse a <code>T</code>. But then it will be already noted that it was already trying to parse <code>T</code>, and add the continuation to the list of continuations to be called when a T at input position 1 is parsed.</p>
<p>While trying alternatives, it will parse an <code>int</code>, and derive <code>T -&gt; int</code> at input position 1. And since it had saved the continuations to call when it successfully parse a <code>T</code> at location 1, it will call this continuations and thus parsing will continue.</p>
<p>I hope this helps other people to understand the trick.</p>]]></summary>
</entry>

</feed>
