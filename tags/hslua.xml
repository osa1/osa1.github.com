<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>osa1.net - Posts tagged hslua</title>
    <link href="http://osa1.net/tags/hslua.xml" rel="self" />
    <link href="http://osa1.net" />
    <id>http://osa1.net/tags/hslua.xml</id>
    <author>
        <name>Ömer Sinan Ağacan</name>
        <email>omeragaca@gmail.com</email>
    </author>
    <updated>2015-01-16T00:00:00Z</updated>
    <entry>
    <title>Loading dynamic Haskell libs in Lua</title>
    <link href="http://osa1.net/posts/2015-01-16-haskell-so-lua.html" />
    <id>http://osa1.net/posts/2015-01-16-haskell-so-lua.html</id>
    <published>2015-01-16T00:00:00Z</published>
    <updated>2015-01-16T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Last year I wrote <a href="http://osa1.net/posts/2014-04-27-calling-haskell-lua.html">a blog post</a> in which I explained how to call Lua from Haskell and Haskell from Lua using <a href="http://hackage.haskell.org/package/hslua">hslua</a> library. At the end of that blog post I mentioned that it should be possible to compile Haskell code to shared library and load that in Lua.</p>
<p>Today a friend in our research group <a href="https://github.com/iu-parfunc">parfunc</a> asked a question about compiling Haskell to shared libraries and loading generated libraries in other programs and I thought while I’m at it I can just update my blog post as well. So in this post I’m going to explain how to compile Haskell functions to shared libraries and load them in Lua.</p>
<p>Before diving into the code, a few remarks:</p>
<ul>
<li>All the code in this blog post is tried on Linux, with Lua 5.1 and latest LuaJIT.</li>
<li>To be able to load our function in Lua and register it, our functions should have C linkage and <a href="http://www.lua.org/manual/5.1/manual.html#lua_CFunction"><code>lua_CFunction</code></a> type. We can either write Haskell functions directly using this type, or write C wrapper functions around our Haskell functions to be able to use them in Lua. In this post I’m going to do first one.</li>
<li>We’ll need some intermediate C code to expose some Haskell RTS functions to Lua, like <code>hs_init</code> to start Haskell runtime and <code>hs_exit</code> to stop it.</li>
<li>To be able to <code>require</code> our shared library in Lua, we need to implement a <code>int luaopen_&lt;ourlibrary&gt;(lua_State *L)</code> function. While in theory it should be possible to implement that function in Haskell, I’ll implement it in C in this post, because I’m not sure how to write Lua wrappers for <code>hs_init</code> and <code>hs_exit</code> in Haskell.</li>
<li>To keep the code as simple as possible, our Haskell function will be a very dumb addition function.</li>
</ul>
<p>Let’s start.</p>
<h1 id="defining-lua-function-in-haskell">Defining Lua function in Haskell</h1>
<p>This is exactly the same as before: We just define a function with type: <code>LuaState -&gt; IO Int</code>. To keep the code simple, we don’t do error handling at all.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb1-1" data-line-number="1"><span class="kw">module</span> <span class="dt">LibArith</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb1-2" data-line-number="2"></a>
<a class="sourceLine" id="cb1-3" data-line-number="3"><span class="kw">import</span> <span class="dt">Data.Maybe</span></a>
<a class="sourceLine" id="cb1-4" data-line-number="4"><span class="kw">import</span> <span class="dt">Scripting.Lua</span> <span class="co">-- this one from hslua</span></a>
<a class="sourceLine" id="cb1-5" data-line-number="5"></a>
<a class="sourceLine" id="cb1-6" data-line-number="6">foreign export ccall</a>
<a class="sourceLine" id="cb1-7" data-line-number="7"><span class="ot">  add ::</span> <span class="dt">LuaState</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb1-8" data-line-number="8"></a>
<a class="sourceLine" id="cb1-9" data-line-number="9"><span class="ot">add ::</span> <span class="dt">LuaState</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb1-10" data-line-number="10">add l <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb1-11" data-line-number="11">  i1 <span class="ot">&lt;-</span> fromJust <span class="ot">`fmap`</span> peek l <span class="dv">1</span></a>
<a class="sourceLine" id="cb1-12" data-line-number="12">  i2 <span class="ot">&lt;-</span> fromJust <span class="ot">`fmap`</span> peek l <span class="dv">2</span></a>
<a class="sourceLine" id="cb1-13" data-line-number="13">  pop l <span class="dv">2</span></a>
<a class="sourceLine" id="cb1-14" data-line-number="14">  push l (i1 <span class="fu">+</span><span class="ot"> i2 ::</span> <span class="dt">Int</span>)</a>
<a class="sourceLine" id="cb1-15" data-line-number="15">  return <span class="dv">1</span></a></code></pre></div>
<h1 id="implementing-intermediate-c">Implementing intermediate C</h1>
<p>In our C glue code, we do two things:</p>
<ol type="1">
<li>Wrap <code>hs_init</code> and <code>hs_exit</code> Haskell runtime functions.</li>
<li>Implement Lua C module interface in which we register our functions to Lua. (see <a href="http://www.lua.org/manual/5.1/manual.html#pdf-package.loaders">related docs</a> for details)</li>
</ol>
<p>Here’s the code:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode c"><code class="sourceCode c"><a class="sourceLine" id="cb2-1" data-line-number="1"><span class="pp">#include </span><span class="im">&quot;LibArith_stub.h&quot;</span></a>
<a class="sourceLine" id="cb2-2" data-line-number="2"><span class="pp">#include </span><span class="im">&quot;lua.h&quot;</span></a>
<a class="sourceLine" id="cb2-3" data-line-number="3"></a>
<a class="sourceLine" id="cb2-4" data-line-number="4"><span class="dt">int</span> hs_init_lua(lua_State *L)</a>
<a class="sourceLine" id="cb2-5" data-line-number="5">{</a>
<a class="sourceLine" id="cb2-6" data-line-number="6">  hs_init(NULL, NULL);</a>
<a class="sourceLine" id="cb2-7" data-line-number="7">  <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb2-8" data-line-number="8">}</a>
<a class="sourceLine" id="cb2-9" data-line-number="9"></a>
<a class="sourceLine" id="cb2-10" data-line-number="10"><span class="dt">int</span> hs_exit_lua(lua_State *L)</a>
<a class="sourceLine" id="cb2-11" data-line-number="11">{</a>
<a class="sourceLine" id="cb2-12" data-line-number="12">  hs_exit();</a>
<a class="sourceLine" id="cb2-13" data-line-number="13">  <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb2-14" data-line-number="14">}</a>
<a class="sourceLine" id="cb2-15" data-line-number="15"></a>
<a class="sourceLine" id="cb2-16" data-line-number="16"><span class="dt">int</span> luaopen_lualibhelper(lua_State *L)</a>
<a class="sourceLine" id="cb2-17" data-line-number="17">{</a>
<a class="sourceLine" id="cb2-18" data-line-number="18">  lua_pushcfunction(L, add);</a>
<a class="sourceLine" id="cb2-19" data-line-number="19">  lua_setglobal(L, <span class="st">&quot;add_in_haskell&quot;</span>);</a>
<a class="sourceLine" id="cb2-20" data-line-number="20">  lua_pushcfunction(L, hs_init_lua);</a>
<a class="sourceLine" id="cb2-21" data-line-number="21">  lua_setglobal(L, <span class="st">&quot;hs_init&quot;</span>);</a>
<a class="sourceLine" id="cb2-22" data-line-number="22">  lua_pushcfunction(L, hs_exit_lua);</a>
<a class="sourceLine" id="cb2-23" data-line-number="23">  lua_setglobal(L, <span class="st">&quot;hs_exit&quot;</span>);</a>
<a class="sourceLine" id="cb2-24" data-line-number="24">  <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb2-25" data-line-number="25">}</a></code></pre></div>
<p>Some things to note:</p>
<ul>
<li><code>LibArith_stub.h</code> is generated by GHC. I’ll explain how to compile and link next.</li>
<li>Our Haskell function actually has type <code>HsInt (*)(void *)</code>. While this is not what Lua API expected(it expects <code>int (*)(lua_State *L)</code>), in my x86_64 Linux machine this is working fine. In the worst case, you may need to wrap the Haskell function in C and convert the types using Haskell RTS C API and Lua C API.</li>
</ul>
<h1 id="compiling-and-linking">Compiling and linking</h1>
<p>This is the tricky part, I wasted a good 2 hours trying to figure how to compile to <code>.so</code> and link it with correct set of libraries.</p>
<p>First step is to compile <code>hslua</code> in a sandbox, or at least make it reachable by GHC(by installing globally, using nix environments etc.). I’ll be giving commands assuming that you’re in a sandbox that has <code>hslua</code> installed, if you’re not, then just replace <code>cabal exec ghc --</code> part with <code>ghc</code> and it should just work.</p>
<p>Step 1, compile and link the Haskell code to generate a shared library:</p>
<pre><code>$ cabal exec ghc -- LibArith.hs -shared -dynamic -fPIC -o libarith.so -lHSrts-ghc7.8.3</code></pre>
<p>Note that if you’re using a different version of GHC, you’ll need to modify the last argument to make it link it with corrent GHC RTS library.(alternatively, you can link with debug or profiling versions etc.)</p>
<p>Step 2, compile the Lua module written in C(the C code above) and link it with our shared Haskell library:</p>
<pre><code>$ cabal exec ghc -- libarithhelper.c -no-hs-main -optl -larith -o lualibhelper.so -shared -fPIC -dynamic</code></pre>
<p>Note that you may need to pass extra linker parameters if you have Lua library/headers in non-standard locations. If that’s the case, <code>-optl</code> argument of GHC is used to add linker arguments, just use standard linker arguments with that(<code>-L</code>, <code>-I</code> etc.).</p>
<p>This command should print a warning like this:</p>
<pre><code>/home/omer/opt/luajit_bin/include/luajit-2.0/lua.h:168:16:
     note: expected ‘lua_CFunction’ but argument is of type ‘HsInt (*)(void *)’
     LUA_API void  (lua_pushcclosure) (lua_State *L, lua_CFunction fn, int n);</code></pre>
<p>Like mentioned above, this doesn’t make any difference on my x86_64 Linux machine. If that’s being a problem on your system, just wrap your Haskell function in intermediate C code above using Haskell RTS API.</p>
<p>Now you should have two shared libraries, one for our Haskell code and one for the intermediate C code. One problem is that the shared library generated from C is now depending on the one generated from Haskell. So Haskell library should be in your <code>LD_LIBRARY_PATH</code>.</p>
<p>A good improvement here would be to compile Haskell code to static library, and generate one dynamic library only. (which has Haskell library statically linked to it)</p>
<h1 id="loading-the-code-in-lua">Loading the code in Lua</h1>
<p>Before loading it, make sure that the dynamic linker can really find the shared library generated from Haskell. Run this:</p>
<pre><code>$ ldd lualibhelper.so | grep &quot;not found&quot;</code></pre>
<p>Make sure it’s not printing anything.</p>
<p>Now just run Lua and enjoy the library:</p>
<pre><code>$ luajit-2.0.3
LuaJIT 2.0.3 -- Copyright (C) 2005-2014 Mike Pall. http://luajit.org/
JIT: ON CMOV SSE2 SSE3 SSE4.1 fold cse dce fwd dse narrow loop abc sink fuse
&gt; require &quot;lualibhelper&quot;
&gt; hs_init()
&gt; print(add_in_haskell(1, 2))
3
&gt; print(add_in_haskell(-10, 20))
10</code></pre>
<p>Just for the amusement, let’s crash it by running Haskell function <em>after</em> stopping the Haskell runtime:</p>
<pre><code>&gt; hs_exit()
&gt; add_in_haskell(1, 2)
newBoundTask: RTS is not initialised; call hs_init() first</code></pre>
<p>Fun :)</p>
<h1 id="conclusion">Conclusion</h1>
<p>It turns out that extending Lua using Haskell is almost as easy as the doing it using the technique I explained in my <a href="http://osa1.net/posts/2014-04-27-calling-haskell-lua.html">previous blog post on this topic</a>.</p>
<p>This post also demonstrates one other thing, namely, compiling Haskell libraries to shared libraries and dynamically loading them in different programs. I’m hoping that this post helps fellow Haskellers to extend their programs written in different languages with Haskell.</p>]]></summary>
</entry>
<entry>
    <title>Calling Haskell from Lua and Lua from Haskell</title>
    <link href="http://osa1.net/posts/2014-04-27-calling-haskell-lua.html" />
    <id>http://osa1.net/posts/2014-04-27-calling-haskell-lua.html</id>
    <published>2014-04-27T00:00:00Z</published>
    <updated>2014-04-27T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>TL;DR: It’s possible to call Haskell functions from Lua and Lua function from Haskell using <a href="https://github.com/osa1/hslua">hslua</a>. <a href="https://github.com/osa1/hslua/tree/master/examples/callbacks">“Callbacks” example</a> in hslua repository shows how to do this.</p>
<hr />
<p>UPDATE: Also see the follow-up post <a href="http://osa1.net/posts/2015-01-16-haskell-so-lua.html">here</a>.</p>
<hr />
<p><a href="https://github.com/osa1/hslua"><code>hslua</code></a> provides Lua 5.1 C API to the programmer, and using it we can call Lua functions from Haskell and Haskell functions from Lua. In this post, I’m going to give two example Lua function implementations in Haskell. This functions will be mapped to a global name in Lua and one of them will be getting Lua functions as it’s arguments.</p>
<h1 id="two-ways-of-writing-lua-functions-in-haskell">Two ways of writing Lua functions in Haskell</h1>
<p>There are two ways of writing Lua functions in Haskell using hslua. First is the high-level method, where the Haskell function is just any function, provided that it’s type is an instance of <code>LuaImport</code>(we’ll come to this later). Second method is what I’d like to call the <em>raw</em> Haskell function method. <em>Raw</em> Haskell functions should have the type <code>LuaState -&gt; IO CInt</code>, where <code>LuaState</code> is Lua interpreter state provided by <code>hslua</code> and return type <code>CInt</code> represents the amount of return values(e.g. values that are left on the stack by this function). In <em>raw</em> functions, you need to do Lua stack manipulation using standard <a href="http://www.lua.org/manual/5.1/manual.html#3">Lua 5.1 API</a>.</p>
<p>While first method gives you a nice, abstracted way of writing Lua functions in Haskell, <em>raw</em> function method gives you the maximum amount of flexibility that Lua can provide. First method has lots of limitations when compared with <em>raw</em> method.</p>
<h1 id="higher-level-haskell-functions-in-lua">Higher-level Haskell functions in Lua</h1>
<p>In first method all you have to do is to write a Haskell function with it’s type is an instance of <code>LuaImport</code>. So let’s see what types are instances:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb1-1" data-line-number="1"><span class="kw">instance</span> (<span class="dt">StackValue</span> a) <span class="ot">=&gt;</span> <span class="dt">LuaImport</span> (<span class="dt">IO</span> a) <span class="kw">where</span></a>
<a class="sourceLine" id="cb1-2" data-line-number="2"><span class="kw">instance</span> (<span class="dt">StackValue</span> a, <span class="dt">LuaImport</span> b) <span class="ot">=&gt;</span> <span class="dt">LuaImport</span> (a <span class="ot">-&gt;</span> b)</a></code></pre></div>
<p>So basically every function type where it’s argument types are instances of <code>StackValue</code> and return type is <code>IO a</code> where <code>a</code> is also an instance of <code>StackValue</code> is an instance of <code>LuaImport</code> and thus can be used in this higher-level method of writing Lua functions in Haskell. Let’s see which types are <code>StackValue</code>s:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb2-1" data-line-number="1"><span class="kw">instance</span> <span class="dt">StackValue</span> <span class="dt">LuaInteger</span></a>
<a class="sourceLine" id="cb2-2" data-line-number="2"><span class="kw">instance</span> <span class="dt">StackValue</span> <span class="dt">LuaNumber</span></a>
<a class="sourceLine" id="cb2-3" data-line-number="3"><span class="kw">instance</span> <span class="dt">StackValue</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb2-4" data-line-number="4"><span class="kw">instance</span> <span class="dt">StackValue</span> <span class="dt">Double</span></a>
<a class="sourceLine" id="cb2-5" data-line-number="5"><span class="kw">instance</span> <span class="dt">StackValue</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb2-6" data-line-number="6"><span class="kw">instance</span> <span class="dt">StackValue</span> <span class="dt">Bool</span></a>
<a class="sourceLine" id="cb2-7" data-line-number="7"><span class="kw">instance</span> <span class="dt">StackValue</span> (<span class="dt">FunPtr</span> <span class="dt">LuaCFunction</span>)</a>
<a class="sourceLine" id="cb2-8" data-line-number="8"><span class="kw">instance</span> <span class="dt">StackValue</span> (<span class="dt">Ptr</span> a)</a>
<a class="sourceLine" id="cb2-9" data-line-number="9"><span class="kw">instance</span> <span class="dt">StackValue</span> <span class="dt">LuaState</span></a>
<a class="sourceLine" id="cb2-10" data-line-number="10"><span class="kw">instance</span> <span class="dt">StackValue</span> ()</a></code></pre></div>
<p>We have basic Haskell types <code>Int</code>, <code>Double</code>, <code>String</code>, and <code>Bool</code> as instances. Other types are for more advanced use, for example, <code>Ptr a</code> is used for <code>userdata</code>(basically any binary data that you want to pass to Lua stack and later get back, see <a href="http://www.lua.org/manual/5.1/manual.html#2.2">reference manual</a> for more details).</p>
<p>This two functions are instances of <code>LuaImport</code>:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb3-1" data-line-number="1"><span class="ot">concat&#39; ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb3-2" data-line-number="2">concat&#39; s1 s2 <span class="fu">=</span> return <span class="fu">$</span> s1 <span class="fu">++</span> s2</a>
<a class="sourceLine" id="cb3-3" data-line-number="3"></a>
<a class="sourceLine" id="cb3-4" data-line-number="4"><span class="ot">pow ::</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">Double</span></a>
<a class="sourceLine" id="cb3-5" data-line-number="5">pow d1 d2 <span class="fu">=</span> return <span class="fu">$</span> d1 <span class="fu">**</span> d2</a></code></pre></div>
<p>And we can push this functions to Lua stack using <code>pushhsfunction</code> or directly assign them to a global variable using <code>registerhsfunction</code>. In this post I’ll use register functions:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb4-1" data-line-number="1"><span class="kw">import</span> <span class="dt">Scripting.Lua</span> <span class="kw">as</span> <span class="dt">Lua</span></a>
<a class="sourceLine" id="cb4-2" data-line-number="2"></a>
<a class="sourceLine" id="cb4-3" data-line-number="3"><span class="ot">main ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb4-4" data-line-number="4">main <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb4-5" data-line-number="5">    l <span class="ot">&lt;-</span> newstate</a>
<a class="sourceLine" id="cb4-6" data-line-number="6">    openlibs l</a>
<a class="sourceLine" id="cb4-7" data-line-number="7">    registerhsfunction l <span class="st">&quot;concat&quot;</span> concat&#39;</a>
<a class="sourceLine" id="cb4-8" data-line-number="8">    registerhsfunction l <span class="st">&quot;pow&quot;</span> pow</a>
<a class="sourceLine" id="cb4-9" data-line-number="9">    loadfile l <span class="st">&quot;haskellfun.lua&quot;</span></a>
<a class="sourceLine" id="cb4-10" data-line-number="10">    call l <span class="dv">0</span> <span class="dv">0</span></a>
<a class="sourceLine" id="cb4-11" data-line-number="11">    close l</a></code></pre></div>
<p>With 11 lines of code, we can create a Lua state and map this Haskell functions to some names and call them from Lua. This program runs Lua file <code>haskellfun.lua</code>, which you can see in examples folder of <a href="https://github.com/osa1/hslua/tree/master/examples/haskellfun"><code>hslua</code> repository</a>.</p>
<p>Apart from the simplicity, another good thing about this method is that it handles type checking of Lua values automatically. Internally, this functions are wrapped with another function which gets <code>LuaState</code> as parameter and collects Lua values from stack, checks their types(and throws error in case of a type mismatch), and push return value of the function to the Lua stack again. Here’s an example call with wrong type of values:</p>
<pre><code>print(pow(&quot;wrong&quot;))
...
bad argument #1 to &#39;?&#39; (number expected, got string)</code></pre>
<p>Major limitation of this method is that you can only get basic Lua types from the Lua stack. For example, you can’t get a Lua table automatically like you get a Lua string. This because Lua needs to keep track of tables and some other values for garbage collection.</p>
<h1 id="working-on-more-complex-lua-types-and-the-registry">Working on more complex Lua types and the registry</h1>
<p>The Lua way of using Lua tables, Lua functions etc. in Lua API is to register that values to the Lua table called <em>registry</em>, and refer to that values using their index at <em>registry</em>. Using <em>registry</em>, Lua keeps tracks of references to Lua values that are available for garbage collection. See <a href="http://www.lua.org/manual/5.1/manual.html#3.5">reference manual section 3.5</a> for more details.</p>
<h1 id="raw-haskell-function-method">Raw Haskell function method</h1>
<p>We can do this writing <em>raw</em> Haskell functions. Raw functions have type <code>LuaState -&gt; IO CInt</code> and <code>LuaState</code> allows us to run any C API function. <em>raw</em> functions are pushed to Lua stack using <code>pushrawhsfunction</code> and registered as global variable using <code>registerrawhsfunction</code>.</p>
<p><a href="https://github.com/osa1/hslua/tree/master/examples/callbacks"><code>callbacks</code> example</a> in the <code>hslua</code> repository takes Lua callbacks in Haskell functions and later call them in FIFO order and return their return values as a Lua array(table with int keys). You can see the complete program in the repository and here I’ll give only the tricky parts.</p>
<p><em>Raw</em> Haskell functions should return number of values left on the Lua stack as return values. As an example, <code>addLuaCallbacks</code> function uses this for simple error reporting, it puts the error string to the Lua stack and return <code>1</code> in case of an error, and return <code>0</code> otherwise:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb6-1" data-line-number="1">addLuaCallbacks l <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb6-2" data-line-number="2">    <span class="fu">...</span></a>
<a class="sourceLine" id="cb6-3" data-line-number="3">    <span class="kw">case</span> as <span class="kw">of</span></a>
<a class="sourceLine" id="cb6-4" data-line-number="4">      <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb6-5" data-line-number="5">        <span class="co">-- arguments are functions, add them to callback queue and return</span></a>
<a class="sourceLine" id="cb6-6" data-line-number="6">        <span class="co">-- nothing</span></a>
<a class="sourceLine" id="cb6-7" data-line-number="7">        addCallbacks <span class="dv">1</span> args</a>
<a class="sourceLine" id="cb6-8" data-line-number="8">        return <span class="dv">0</span></a>
<a class="sourceLine" id="cb6-9" data-line-number="9">      <span class="dt">Just</span> errArg <span class="ot">-&gt;</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb6-10" data-line-number="10">        <span class="co">-- error: argument at `errArg` is not a function, return error</span></a>
<a class="sourceLine" id="cb6-11" data-line-number="11">        <span class="co">-- string</span></a>
<a class="sourceLine" id="cb6-12" data-line-number="12">        pushstring l <span class="fu">$</span> <span class="st">&quot;argument &quot;</span> <span class="fu">++</span> show errArg <span class="fu">++</span> <span class="st">&quot; is not a function&quot;</span></a>
<a class="sourceLine" id="cb6-13" data-line-number="13">        return <span class="dv">1</span></a></code></pre></div>
<p>This example program keeps track of passed Lua callbacks in an <code>IORef</code>. Here’s the part that handles getting Lua callbacks from Lua stack:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb7-1" data-line-number="1">addCallbacks n max</a>
<a class="sourceLine" id="cb7-2" data-line-number="2">  <span class="fu">|</span> n <span class="fu">&gt;</span> max <span class="fu">=</span> return ()</a>
<a class="sourceLine" id="cb7-3" data-line-number="3">  <span class="fu">|</span> otherwise <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb7-4" data-line-number="4">      <span class="co">-- move nth argument to top of the stack</span></a>
<a class="sourceLine" id="cb7-5" data-line-number="5">      pushvalue l n</a>
<a class="sourceLine" id="cb7-6" data-line-number="6">      <span class="co">-- add function reference to registry</span></a>
<a class="sourceLine" id="cb7-7" data-line-number="7">      refId <span class="ot">&lt;-</span> ref l registryindex</a>
<a class="sourceLine" id="cb7-8" data-line-number="8">      <span class="co">-- add registry index to IORef</span></a>
<a class="sourceLine" id="cb7-9" data-line-number="9">      modifyIORef cs (<span class="fu">++</span> [refId])</a>
<a class="sourceLine" id="cb7-10" data-line-number="10">      <span class="co">-- continue adding other arguments</span></a>
<a class="sourceLine" id="cb7-11" data-line-number="11">      addCallbacks (n<span class="fu">+</span><span class="dv">1</span>) max</a></code></pre></div>
<p>Note how we’re adding the function to the <em>registry</em> and getting it’s index at the <em>registry</em> in Haskell. We can now refer to this functions(e.g. push this function to Lua stack) using this index. Here’s the relevant code:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb8-1" data-line-number="1"><span class="co">-- | Call Lua callbacks collected with `addLuaCallbacks`.</span></a>
<a class="sourceLine" id="cb8-2" data-line-number="2"><span class="ot">callLuaCallbacks ::</span> <span class="dt">LuaState</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">CInt</span></a>
<a class="sourceLine" id="cb8-3" data-line-number="3">callLuaCallbacks l <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb8-4" data-line-number="4">    <span class="fu">...</span></a>
<a class="sourceLine" id="cb8-5" data-line-number="5">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb8-6" data-line-number="6">    iter [] <span class="fu">=</span> return ()</a>
<a class="sourceLine" id="cb8-7" data-line-number="7">    iter (c <span class="fu">:</span> rest) <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb8-8" data-line-number="8">      <span class="fu">...</span></a>
<a class="sourceLine" id="cb8-9" data-line-number="9">      pushinteger l (fromIntegral c)</a>
<a class="sourceLine" id="cb8-10" data-line-number="10">      gettable l registryindex</a>
<a class="sourceLine" id="cb8-11" data-line-number="11">      <span class="co">-- call the callback</span></a>
<a class="sourceLine" id="cb8-12" data-line-number="12">      call l <span class="dv">0</span> <span class="dv">1</span></a>
<a class="sourceLine" id="cb8-13" data-line-number="13">      <span class="fu">...</span></a>
<a class="sourceLine" id="cb8-14" data-line-number="14">      iter rest</a></code></pre></div>
<p>We’re pushing the index to the Lua stack, and calling <code>gettable</code> to push actual function to the stack using the index. Complete program is longish, so I’m omitting it here, you can see it in <a href="https://github.com/osa1/hslua/tree/master/examples/callbacks"><code>hslua</code>s Github repository</a> with an example Lua program that uses defined Haskell functions to pass Lua callbacks to Haskell.</p>
<h1 id="a-note-about-safety">A note about safety</h1>
<p>Lua tolerates some incorrect stack operations and if you do that while writing <em>raw</em> Haskell functions, you can have hard times debugging your programs. Fortunately, Lua also provides a compile time flag to enable checking API usage for safety. If you install <code>hslua</code> using <code>-fapicheck</code> Cabal flag, it compiled Lua with API checking enabled and Lua gives you errors instead of silently doing something not intended. For example, if you refer to a Lua value at stack index <code>-4</code> while your stack has only <code>3</code> elements, you get something like:</p>
<pre><code>callbacks: src/lapi.c:57: index2adr: Assertion `idx != 0 &amp;&amp; -idx &lt;= L-&gt;top - L-&gt;base&#39; failed.</code></pre>
<p>This helps making sure that your API usage is correct.</p>
<h1 id="using-hslua-for-reading-configuration-files-written-in-lua">Using hslua for reading configuration files written in Lua</h1>
<p>hslua also provides a module for reading configuration files. As an example, using <code>Scripting.Lua.ConfigFile.getNestedAssocLists</code>, you can execute the Lua file given below and get resulting nested table as Haskell <code>[(String, [(String, String)])]</code>:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode lua"><code class="sourceCode lua"><a class="sourceLine" id="cb10-1" data-line-number="1"> someVal <span class="ot">=</span> <span class="ot">{</span></a>
<a class="sourceLine" id="cb10-2" data-line-number="2">    something <span class="ot">=</span> <span class="ot">{</span></a>
<a class="sourceLine" id="cb10-3" data-line-number="3">       foo <span class="ot">=</span> <span class="st">&quot;aaa&quot;</span><span class="ot">,</span></a>
<a class="sourceLine" id="cb10-4" data-line-number="4">       bar <span class="ot">=</span> <span class="st">&quot;bbb&quot;</span><span class="ot">,</span></a>
<a class="sourceLine" id="cb10-5" data-line-number="5">       baz <span class="ot">=</span> <span class="st">&quot;ccc&quot;</span></a>
<a class="sourceLine" id="cb10-6" data-line-number="6">    <span class="ot">},</span></a>
<a class="sourceLine" id="cb10-7" data-line-number="7">    somethingElse <span class="ot">=</span> <span class="ot">{</span></a>
<a class="sourceLine" id="cb10-8" data-line-number="8">       <span class="ot">...</span></a>
<a class="sourceLine" id="cb10-9" data-line-number="9">    <span class="ot">}</span></a>
<a class="sourceLine" id="cb10-10" data-line-number="10"> <span class="ot">}</span></a></code></pre></div>
<h1 id="running-lua-programs-using-lua-interpreters">Running Lua programs using Lua interpreters</h1>
<p>In all hslua examples, we needed to create Lua state in Haskell, register Haskell functions inside Haskell and then run Lua files using Lua C API again in Haskell. I think in theory it is also possible to run Lua programs using standard Lua interpreter executables(instead of running the interpreter using Lua C API inside Haskell) and load Haskell functions compiled to <code>*.so</code> shared library files.</p>
<p>About one year ago, I did something similar using C instead of Haskell. You can see the code <a href="https://github.com/osa1/lcl">here</a>. The library compiled to a <code>.so</code> file and by using Lua’s <code>package.loadlib</code>, you can load functions defined in the <code>.so</code>.</p>
<p>Compiling raw Haskell <code>hslua</code> functions to a <code>.so</code> should not be tricky. <code>LuaState</code> type is just a wrapper around <code>Ptr ()</code>, and <code>CInt</code> is just a C integer, so it’s signature is already compatible. We probably need to use <code>foreign export ...</code> of GHC FFI and find GHC parameters to compile to <code>.so</code>. I’ll investigate this further and post updates.</p>]]></summary>
</entry>

</feed>
