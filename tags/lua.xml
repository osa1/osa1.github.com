<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>osa1.net - Posts tagged lua</title>
    <link href="http://osa1.net/tags/lua.xml" rel="self" />
    <link href="http://osa1.net" />
    <id>http://osa1.net/tags/lua.xml</id>
    <author>
        <name>Ömer Sinan Ağacan</name>
        <email>omeragaca@gmail.com</email>
    </author>
    <updated>2015-01-29T00:00:00Z</updated>
    <entry>
    <title>Some benchmarks for meta-tracing BF JIT and traditional BF implementations</title>
    <link href="http://osa1.net/posts/2015-04-11-some-bf-benchmarks.html" />
    <id>http://osa1.net/posts/2015-04-11-some-bf-benchmarks.html</id>
    <published>2015-01-29T00:00:00Z</published>
    <updated>2015-01-29T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I found RPython very interesting for several reasons which I may be talking about later, and I need to use it for a project, so I started running some tutorials. However, I had some concerns about the idea(I still have, and I’ll defer the discussion to some other post for now), and I wanted to experiment with different implementations of same interpreter and compare results.</p>
<p>What I wanted to see is, given a very good and mature JIT compiler(LuaJIT in this case), how hard would it be to have similar optimizations without annotating code manually to give hints to the JIT compiler.</p>
<p>So I implemented a simple BF interpreter in Lua, and started experimenting with different optimizations. As for benchmarking, I used <code>bench</code> program from this <a href="https://bitbucket.org/brownan/pypy-tutorial/">RPython tutorial repository</a>.</p>
<p>Before diving into Lua implementation, here results of running them with RPython compiled interpreter, Python and PyPy:</p>
<pre><code>./example5-rpython bench.b    0.94s user 0.00s system 99% cpu 0.947 total
pypy example5.py   bench.b   15.57s user 0.01s system 99% cpu 15.597 total
python example5.py bench.b  597.34s user 0.04s system 99% cpu 9:57.87 total</code></pre>
<p>The Lua implementation started with this:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode lua"><code class="sourceCode lua"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="kw">function</span> mainloop<span class="op">(</span>program<span class="op">,</span> bracket_map<span class="op">,</span> dispatch_fn<span class="op">)</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a>    <span class="kw">local</span> pc <span class="op">=</span> <span class="dv">1</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a>    <span class="kw">local</span> tape <span class="op">=</span> <span class="op">{</span><span class="dv">0</span><span class="op">}</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a>    <span class="kw">local</span> tape_pos <span class="op">=</span> <span class="dv">1</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a>    <span class="kw">local</span> code</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a>    <span class="cf">while</span> pc <span class="op">&lt;=</span> <span class="op">#</span>program <span class="cf">do</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a>        code <span class="op">=</span> program<span class="op">[</span>pc<span class="op">]</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true"></a>        <span class="cf">if</span> code <span class="op">==</span> <span class="st">&quot;&gt;&quot;</span> <span class="cf">then</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true"></a>            tape_pos <span class="op">=</span> tape_pos <span class="op">+</span> <span class="dv">1</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true"></a>            <span class="cf">if</span> <span class="op">#</span>tape <span class="op">&lt;</span> tape_pos <span class="cf">then</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true"></a>                <span class="fu">table.insert</span><span class="op">(</span>tape<span class="op">,</span> <span class="dv">0</span><span class="op">)</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true"></a>            <span class="cf">end</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true"></a>        <span class="cf">elseif</span> code <span class="op">==</span> <span class="st">&quot;&lt;&quot;</span> <span class="cf">then</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true"></a>            tape_pos <span class="op">=</span> tape_pos <span class="op">-</span> <span class="dv">1</span></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true"></a>        <span class="cf">elseif</span> code <span class="op">==</span> <span class="st">&quot;+&quot;</span> <span class="cf">then</span></span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true"></a>            tape<span class="op">[</span>tape_pos<span class="op">]</span> <span class="op">=</span> tape<span class="op">[</span>tape_pos<span class="op">]</span> <span class="op">+</span> <span class="dv">1</span></span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true"></a>        <span class="cf">elseif</span> code <span class="op">==</span> <span class="st">&quot;-&quot;</span> <span class="cf">then</span></span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true"></a>            tape<span class="op">[</span>tape_pos<span class="op">]</span> <span class="op">=</span> tape<span class="op">[</span>tape_pos<span class="op">]</span> <span class="op">-</span> <span class="dv">1</span></span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true"></a>        <span class="cf">elseif</span> code <span class="op">==</span> <span class="st">&quot;.&quot;</span> <span class="cf">then</span></span>
<span id="cb2-21"><a href="#cb2-21" aria-hidden="true"></a>            <span class="fu">io.write</span><span class="op">(</span><span class="fu">string.char</span><span class="op">(</span>tape<span class="op">[</span>tape_pos<span class="op">]))</span></span>
<span id="cb2-22"><a href="#cb2-22" aria-hidden="true"></a>        <span class="cf">elseif</span> code <span class="op">==</span> <span class="st">&quot;[&quot;</span> <span class="kw">and</span> tape<span class="op">[</span>tape_pos<span class="op">]</span> <span class="op">==</span> <span class="dv">0</span> <span class="cf">then</span></span>
<span id="cb2-23"><a href="#cb2-23" aria-hidden="true"></a>            pc <span class="op">=</span> bracket_map<span class="op">[</span>pc<span class="op">]</span></span>
<span id="cb2-24"><a href="#cb2-24" aria-hidden="true"></a>        <span class="cf">elseif</span> code <span class="op">==</span> <span class="st">&quot;]&quot;</span> <span class="kw">and</span> tape<span class="op">[</span>tape_pos<span class="op">]</span> <span class="op">~=</span> <span class="dv">0</span> <span class="cf">then</span></span>
<span id="cb2-25"><a href="#cb2-25" aria-hidden="true"></a>            pc <span class="op">=</span> bracket_map<span class="op">[</span>pc<span class="op">]</span></span>
<span id="cb2-26"><a href="#cb2-26" aria-hidden="true"></a>        <span class="cf">end</span></span>
<span id="cb2-27"><a href="#cb2-27" aria-hidden="true"></a>        pc <span class="op">=</span> pc <span class="op">+</span> <span class="dv">1</span></span>
<span id="cb2-28"><a href="#cb2-28" aria-hidden="true"></a>    <span class="cf">end</span></span>
<span id="cb2-29"><a href="#cb2-29" aria-hidden="true"></a><span class="kw">end</span></span></code></pre></div>
<p>I’m not sure how many reasonable different implementations one can come up with, given that the language is this small. Still, there are some optimizations that we can do and I’ve tried some of them. Here are some things I tried:</p>
<ul>
<li><p>I tried replacing one character strings with ASCII code equivalents. Since Lua doesn’t have character constants, I thought this may give us a few instructions per branch. But results were just the same.</p></li>
<li><p>I tried replacing table getters and setters with <code>rawget</code> and <code>rawset</code>s. Nothing changed. Apparently it’s not worth the effort unless you have a metatable for your table.</p></li>
<li><p>I tried generating a huge “if-then-else” statement for <code>bracket_map</code>, and used it as a jump table kind of thing. Here’s the code:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode lua"><code class="sourceCode lua"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="kw">function</span> gen_dispatch_fn<span class="op">(</span>bracket_map<span class="op">,</span> fun_name<span class="op">)</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a>    <span class="kw">local</span> first <span class="op">=</span> <span class="kw">true</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a>    <span class="kw">local</span> acc <span class="op">=</span> <span class="op">{}</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a>    <span class="fu">table.insert</span><span class="op">(</span>acc<span class="op">,</span> <span class="st">&quot;function &quot;</span> <span class="op">..</span> fun_name <span class="op">..</span> <span class="st">&quot;(arg)</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">)</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a>    <span class="cf">for</span> k<span class="op">,</span>v <span class="kw">in</span> <span class="fu">pairs</span><span class="op">(</span>bracket_map<span class="op">)</span> <span class="cf">do</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a>        <span class="cf">if</span> first <span class="cf">then</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true"></a>            <span class="fu">table.insert</span><span class="op">(</span>acc<span class="op">,</span> <span class="st">&quot;    if arg == &quot;</span> <span class="op">..</span> k <span class="op">..</span> <span class="st">&quot; then</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">)</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true"></a>            first <span class="op">=</span> <span class="kw">false</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true"></a>        <span class="cf">else</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true"></a>            <span class="fu">table.insert</span><span class="op">(</span>acc<span class="op">,</span> <span class="st">&quot;    elseif arg == &quot;</span> <span class="op">..</span> k <span class="op">..</span> <span class="st">&quot; then</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">)</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true"></a>        <span class="cf">end</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true"></a>        <span class="fu">table.insert</span><span class="op">(</span>acc<span class="op">,</span> <span class="st">&quot;        return &quot;</span> <span class="op">..</span> v <span class="op">..</span> <span class="st">&quot;</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">)</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true"></a>    <span class="cf">end</span></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true"></a>    <span class="fu">table.insert</span><span class="op">(</span>acc<span class="op">,</span> <span class="st">&quot;    else</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">)</span></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true"></a>    <span class="fu">table.insert</span><span class="op">(</span>acc<span class="op">,</span> <span class="st">&quot;        error(</span><span class="sc">\&quot;</span><span class="st">invalid arg: </span><span class="sc">\&quot;</span><span class="st"> .. arg)</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">)</span></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true"></a>    <span class="fu">table.insert</span><span class="op">(</span>acc<span class="op">,</span> <span class="st">&quot;    end</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">)</span></span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true"></a>    <span class="fu">table.insert</span><span class="op">(</span>acc<span class="op">,</span> <span class="st">&quot;end</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">)</span></span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true"></a>    <span class="cf">return</span> <span class="fu">table.concat</span><span class="op">(</span>acc<span class="op">)</span></span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true"></a><span class="kw">end</span></span></code></pre></div>
<p>I loaded this code using standard <code>load()</code> function. This also didn’t work. The reason is that, even if this is faster(which is probably not always the case), profiling showed that interpreter spents only 4% of the time for <code>bracket_map</code> lookups. So if this implementation only slightly faster, it just can’t make a big difference.</p></li>
</ul>
<p>Profiling output revealed that, 85% of the time spent on fetching the next instruction:</p>
<pre><code>@@ 69 @@
      |
      |     local code
      |     while pc &lt;= #program do
  85% |         code = program[pc]
      |         if code == 62 then
      |             tape_pos = tape_pos + 1
      |             if #tape &lt; tape_pos then
@@ 89 @@
      |             pc = bracket_map[pc]
      |         elseif code == 93 and tape[tape_pos] ~= 0 then
   4% |             pc = bracket_map[pc]
      |         end
      |         pc = pc + 1</code></pre>
<p>Which really means that you can’t optimize anything, because there’s nothing optimizable in <code>code = program[pc]</code>, since this is one of the most primitive operations that you can do in this language. (note that we don’t have metamethod assigned to this table, so <code>rawget</code> is not an optimization)</p>
<p>At this point the Lua results were like this:</p>
<pre><code>luajit example_lua.lua bench.b  34.41s user 0.00s system 99% cpu 34.442 total</code></pre>
<p>The fact that PyPy did better job than LuaJIT here is surprising and impressive. It seems like RPython and PyPy is doing a very good job here.</p>
<p>Since I already started gradually compiling things, I thought why not go further and compile everything. Here’s a simple BF to Lua compiler:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode lua"><code class="sourceCode lua"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="kw">function</span> compile<span class="op">(</span>str<span class="op">)</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a>    <span class="kw">local</span> pgm <span class="op">=</span> <span class="op">{}</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a>    <span class="fu">table.insert</span><span class="op">(</span>pgm<span class="op">,</span> <span class="vs">[[</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a><span class="vs">function pgm()</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true"></a><span class="vs">    local tape = {0}</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true"></a><span class="vs">    local tape_pos = 1</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true"></a><span class="vs">]]</span><span class="op">)</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true"></a></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true"></a>    <span class="kw">local</span> adv <span class="op">=</span> <span class="vs">[[</span></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true"></a><span class="vs">    tape_pos = tape_pos + 1</span></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true"></a><span class="vs">    if #tape &lt; tape_pos then</span></span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true"></a><span class="vs">        table.insert(tape, 0)</span></span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true"></a><span class="vs">    end</span></span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true"></a><span class="vs">]]</span></span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true"></a>    <span class="kw">local</span> <span class="kw">function</span> dev<span class="op">(</span>i<span class="op">)</span> <span class="cf">return</span> <span class="st">&quot;    tape_pos = tape_pos - &quot;</span> <span class="op">..</span> i <span class="op">..</span> <span class="st">&quot;</span><span class="sc">\n</span><span class="st">&quot;</span> <span class="kw">end</span></span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true"></a>    <span class="kw">local</span> <span class="kw">function</span> inc<span class="op">(</span>i<span class="op">)</span> <span class="cf">return</span> <span class="st">&quot;    tape[tape_pos] = tape[tape_pos] + &quot;</span> <span class="op">..</span> i <span class="op">..</span> <span class="st">&quot;</span><span class="sc">\n</span><span class="st">&quot;</span> <span class="kw">end</span></span>
<span id="cb6-17"><a href="#cb6-17" aria-hidden="true"></a>    <span class="kw">local</span> <span class="kw">function</span> dec<span class="op">(</span>i<span class="op">)</span> <span class="cf">return</span> <span class="st">&quot;    tape[tape_pos] = tape[tape_pos] - &quot;</span> <span class="op">..</span> i <span class="op">..</span> <span class="st">&quot;</span><span class="sc">\n</span><span class="st">&quot;</span> <span class="kw">end</span></span>
<span id="cb6-18"><a href="#cb6-18" aria-hidden="true"></a>    <span class="kw">local</span> out  <span class="op">=</span> <span class="st">&quot;    io.write(string.char(tape[tape_pos]))</span><span class="sc">\n</span><span class="st">&quot;</span></span>
<span id="cb6-19"><a href="#cb6-19" aria-hidden="true"></a>    <span class="kw">local</span> inp  <span class="op">=</span> <span class="st">&quot;&quot;</span> <span class="co">-- no need for this</span></span>
<span id="cb6-20"><a href="#cb6-20" aria-hidden="true"></a>    <span class="kw">local</span> jmpF <span class="op">=</span> <span class="st">&quot;    while tape[tape_pos] ~= 0 do</span><span class="sc">\n</span><span class="st">&quot;</span></span>
<span id="cb6-21"><a href="#cb6-21" aria-hidden="true"></a>    <span class="kw">local</span> jmpB <span class="op">=</span> <span class="st">&quot;    if tape[tape_pos] == 0 then break end end</span><span class="sc">\n</span><span class="st">&quot;</span></span>
<span id="cb6-22"><a href="#cb6-22" aria-hidden="true"></a></span>
<span id="cb6-23"><a href="#cb6-23" aria-hidden="true"></a>    <span class="co">-- these are used to combine consecutive same instructions</span></span>
<span id="cb6-24"><a href="#cb6-24" aria-hidden="true"></a>    <span class="kw">local</span> devs <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb6-25"><a href="#cb6-25" aria-hidden="true"></a>    <span class="kw">local</span> incs <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb6-26"><a href="#cb6-26" aria-hidden="true"></a>    <span class="kw">local</span> decs <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb6-27"><a href="#cb6-27" aria-hidden="true"></a></span>
<span id="cb6-28"><a href="#cb6-28" aria-hidden="true"></a>    <span class="kw">local</span> indent <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb6-29"><a href="#cb6-29" aria-hidden="true"></a></span>
<span id="cb6-30"><a href="#cb6-30" aria-hidden="true"></a>    <span class="cf">for</span> i<span class="op">=</span><span class="dv">1</span><span class="op">,</span> <span class="op">#</span>str <span class="cf">do</span></span>
<span id="cb6-31"><a href="#cb6-31" aria-hidden="true"></a>        <span class="kw">local</span> <span class="fu">char</span> <span class="op">=</span> <span class="fu">string.char</span><span class="op">(</span><span class="fu">string.byte</span><span class="op">(</span>str<span class="op">,</span> i<span class="op">))</span></span>
<span id="cb6-32"><a href="#cb6-32" aria-hidden="true"></a></span>
<span id="cb6-33"><a href="#cb6-33" aria-hidden="true"></a>        <span class="cf">if</span> devs <span class="op">~=</span> <span class="dv">0</span> <span class="kw">and</span> <span class="fu">char</span> <span class="op">~=</span> <span class="st">&quot;&lt;&quot;</span> <span class="cf">then</span></span>
<span id="cb6-34"><a href="#cb6-34" aria-hidden="true"></a>            <span class="fu">table.insert</span><span class="op">(</span>pgm<span class="op">,</span> indent_lines<span class="op">(</span>indent<span class="op">,</span> dev<span class="op">(</span>devs<span class="op">)))</span></span>
<span id="cb6-35"><a href="#cb6-35" aria-hidden="true"></a>            devs <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb6-36"><a href="#cb6-36" aria-hidden="true"></a>        <span class="cf">elseif</span> incs <span class="op">~=</span> <span class="dv">0</span> <span class="kw">and</span> <span class="fu">char</span> <span class="op">~=</span> <span class="st">&quot;+&quot;</span> <span class="cf">then</span></span>
<span id="cb6-37"><a href="#cb6-37" aria-hidden="true"></a>            <span class="fu">table.insert</span><span class="op">(</span>pgm<span class="op">,</span> indent_lines<span class="op">(</span>indent<span class="op">,</span> inc<span class="op">(</span>incs<span class="op">)))</span></span>
<span id="cb6-38"><a href="#cb6-38" aria-hidden="true"></a>            incs <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb6-39"><a href="#cb6-39" aria-hidden="true"></a>        <span class="cf">elseif</span> decs <span class="op">~=</span> <span class="dv">0</span> <span class="kw">and</span> <span class="fu">char</span> <span class="op">~=</span> <span class="st">&quot;-&quot;</span> <span class="cf">then</span></span>
<span id="cb6-40"><a href="#cb6-40" aria-hidden="true"></a>            <span class="fu">table.insert</span><span class="op">(</span>pgm<span class="op">,</span> indent_lines<span class="op">(</span>indent<span class="op">,</span> dec<span class="op">(</span>decs<span class="op">)))</span></span>
<span id="cb6-41"><a href="#cb6-41" aria-hidden="true"></a>            decs <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb6-42"><a href="#cb6-42" aria-hidden="true"></a>        <span class="cf">end</span></span>
<span id="cb6-43"><a href="#cb6-43" aria-hidden="true"></a></span>
<span id="cb6-44"><a href="#cb6-44" aria-hidden="true"></a>        <span class="cf">if</span> <span class="fu">char</span> <span class="op">==</span> <span class="st">&quot;&gt;&quot;</span> <span class="cf">then</span> <span class="co">-- 62</span></span>
<span id="cb6-45"><a href="#cb6-45" aria-hidden="true"></a>            <span class="fu">table.insert</span><span class="op">(</span>pgm<span class="op">,</span> indent_lines<span class="op">(</span>indent<span class="op">,</span> adv<span class="op">))</span></span>
<span id="cb6-46"><a href="#cb6-46" aria-hidden="true"></a>        <span class="cf">elseif</span> <span class="fu">char</span> <span class="op">==</span> <span class="st">&quot;&lt;&quot;</span> <span class="cf">then</span> <span class="co">-- 60</span></span>
<span id="cb6-47"><a href="#cb6-47" aria-hidden="true"></a>            devs <span class="op">=</span> devs <span class="op">+</span> <span class="dv">1</span></span>
<span id="cb6-48"><a href="#cb6-48" aria-hidden="true"></a>        <span class="cf">elseif</span> <span class="fu">char</span> <span class="op">==</span> <span class="st">&quot;+&quot;</span> <span class="cf">then</span> <span class="co">-- 43</span></span>
<span id="cb6-49"><a href="#cb6-49" aria-hidden="true"></a>            incs <span class="op">=</span> incs <span class="op">+</span> <span class="dv">1</span></span>
<span id="cb6-50"><a href="#cb6-50" aria-hidden="true"></a>        <span class="cf">elseif</span> <span class="fu">char</span> <span class="op">==</span> <span class="st">&quot;-&quot;</span> <span class="cf">then</span> <span class="co">-- 45</span></span>
<span id="cb6-51"><a href="#cb6-51" aria-hidden="true"></a>            decs <span class="op">=</span> decs <span class="op">+</span> <span class="dv">1</span></span>
<span id="cb6-52"><a href="#cb6-52" aria-hidden="true"></a>        <span class="cf">elseif</span> <span class="fu">char</span> <span class="op">==</span> <span class="st">&quot;.&quot;</span> <span class="cf">then</span> <span class="co">-- 46</span></span>
<span id="cb6-53"><a href="#cb6-53" aria-hidden="true"></a>            <span class="fu">table.insert</span><span class="op">(</span>pgm<span class="op">,</span> indent_lines<span class="op">(</span>indent<span class="op">,</span> out<span class="op">))</span></span>
<span id="cb6-54"><a href="#cb6-54" aria-hidden="true"></a>        <span class="cf">elseif</span> <span class="fu">char</span> <span class="op">==</span> <span class="st">&quot;,&quot;</span> <span class="cf">then</span> <span class="co">-- 44</span></span>
<span id="cb6-55"><a href="#cb6-55" aria-hidden="true"></a>            <span class="fu">table.insert</span><span class="op">(</span>pgm<span class="op">,</span> indent_lines<span class="op">(</span>indent<span class="op">,</span> inp<span class="op">))</span></span>
<span id="cb6-56"><a href="#cb6-56" aria-hidden="true"></a>        <span class="cf">elseif</span> <span class="fu">char</span> <span class="op">==</span> <span class="st">&quot;[&quot;</span> <span class="cf">then</span> <span class="co">-- 91</span></span>
<span id="cb6-57"><a href="#cb6-57" aria-hidden="true"></a>            indent <span class="op">=</span> indent <span class="op">+</span> <span class="dv">4</span></span>
<span id="cb6-58"><a href="#cb6-58" aria-hidden="true"></a>            <span class="fu">table.insert</span><span class="op">(</span>pgm<span class="op">,</span> indent_lines<span class="op">(</span>indent<span class="op">,</span> jmpF<span class="op">))</span></span>
<span id="cb6-59"><a href="#cb6-59" aria-hidden="true"></a>        <span class="cf">elseif</span> <span class="fu">char</span> <span class="op">==</span> <span class="st">&quot;]&quot;</span> <span class="cf">then</span> <span class="co">-- 93</span></span>
<span id="cb6-60"><a href="#cb6-60" aria-hidden="true"></a>            indent <span class="op">=</span> indent <span class="op">-</span> <span class="dv">4</span></span>
<span id="cb6-61"><a href="#cb6-61" aria-hidden="true"></a>            <span class="fu">table.insert</span><span class="op">(</span>pgm<span class="op">,</span> indent_lines<span class="op">(</span>indent<span class="op">,</span> jmpB<span class="op">))</span></span>
<span id="cb6-62"><a href="#cb6-62" aria-hidden="true"></a>        <span class="cf">end</span></span>
<span id="cb6-63"><a href="#cb6-63" aria-hidden="true"></a>    <span class="cf">end</span></span>
<span id="cb6-64"><a href="#cb6-64" aria-hidden="true"></a></span>
<span id="cb6-65"><a href="#cb6-65" aria-hidden="true"></a>    <span class="fu">table.insert</span><span class="op">(</span>pgm<span class="op">,</span> <span class="st">&quot;end&quot;</span><span class="op">)</span></span>
<span id="cb6-66"><a href="#cb6-66" aria-hidden="true"></a>    <span class="cf">return</span> <span class="fu">table.concat</span><span class="op">(</span>pgm<span class="op">)</span></span>
<span id="cb6-67"><a href="#cb6-67" aria-hidden="true"></a><span class="kw">end</span></span></code></pre></div>
<p>One thing to note here is that loops in BF programs correspond to loops in generated Lua. There’s another way to implement this compiler and it might turn out to be more efficient, but I didn’t try it. (see BF-to-C compiler below) Also, I’m merging some instructions together. This has significant performance impact, but it’s also necessary because if the generated code is too big, both PUC-Lua and LuaJIT is rejecting to load it. (this is documented, but the limit is not specified)</p>
<p>Results:</p>
<pre><code>luajit example_lua.lua bench.b  0.53s user 0.00s system 99% cpu 0.532 total</code></pre>
<p>Note that runtime code generation and loading is NOT included in this number, but code generation takes less than 0.01s, so I might just include that.</p>
<p>Just for completeness, I also tried a <a href="https://github.com/kgabis/brainfuck-c/blob/master/brainfuck.c">C interpreter</a>, and <a href="http://awk.info/?doc/bfc.html">BF-to-C</a> compiler:</p>
<pre><code>./c-int bench.b  2.44s user 0.00s system 99% cpu 2.443 total
./c-compiled     0.00s user 0.00s system 82% cpu 0.004 total</code></pre>
<p>A fun thing about C compiler is that compiling generated C programs takes long time:</p>
<pre><code>gcc -O3 awk_output.c  14.07s user 0.14s system 99% cpu 14.219 total</code></pre>
<p>RPython once again does an impressive job here, because it’s even faster than C interpreter. I didn’t bother profiling C code and optimizing it, because it looks like a reasonable implementation: A simple “fetch instruction and run it in a case statement” loop.</p>
<p>So I think the conclusion is that RPython and PyPy are doing really good job.</p>]]></summary>
</entry>
<entry>
    <title>Top-down expression parsing is easy</title>
    <link href="http://osa1.net/posts/2015-01-29-top-down-expr-parsing-easy.html" />
    <id>http://osa1.net/posts/2015-01-29-top-down-expr-parsing-easy.html</id>
    <published>2015-01-29T00:00:00Z</published>
    <updated>2015-01-29T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I recently fixed <a href="http://hackage.haskell.org/package/language-lua">language-lua</a>’s 2-years-old expression parsing bug. Previously it was using <a href="http://hackage.haskell.org/package/parsec-3.1.8/docs/Text-Parsec-Expr.html">Parsec’s expression parser</a>, which is actually horrible because it can’t handle chained unary operators.</p>
<p>Two weeks ago I decided to take a look into Lua’s original implementation, and in about an hour or so the algorithm was crystal clear to me. I immediately <a href="https://github.com/osa1/language-lua/commit/b4bebe36e927dcc671dbe6dd19572b83073dc556#diff-630bbd2d118baf109da6ad79d3f168bfR257">implemented it</a> and closed the <a href="https://github.com/osa1/language-lua/issues/2">2-years-old bug report</a>.</p>
<p>This implementation is essentially a port of Lua’s expression parser. Recently I thought about the algorithm and I was wondering if this has a name – the algorithm looked pretty obvious to me once I understand and given how much we know about parsing I thought this should have a name.</p>
<p>I found <a href="http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing">this algorithm named “precedence climbing”</a>. This is almost the same algorithm, only difference is that instead of using <code>lookahead</code> I’m just consuming the binary operator and returning it to the caller(which is parsing an expression with lower precedence than current parser) if precedence is lower. Associativity handling is also different(I use different left and right precedences to handle associativity) but the idea is really the same.</p>
<p>Now, there is also another algorithm called Pratt, and I can’t read the original paper(paywall), but according to <a href="http://lambda-the-ultimate.org/node/3682">this LtU discussion</a> it should also be similar. Indeed, <a href="http://journal.stuffwithstuff.com/2011/03/19/pratt-parsers-expression-parsing-made-easy/">this explanation of it</a> looks pretty similar, and <a href="http://stackoverflow.com/a/13637731/691032">this StackOverflow answer</a> says that Lua’s implementation is “Pratt style parsing”.</p>
<p>So it seems like we have two, or maybe one since they’re actually very similar, solution(s) to solve top-down expression parsing problem and Haskell implementation using Parsec is possible in only 12 lines of code.</p>
<h1 id="a-challenge">A challenge</h1>
<p>One challenge might be to modify Parsec’s expression parser so that internally it generates a Pratt/precedence climbing parser. I’m hoping to spare some time to work on this.</p>]]></summary>
</entry>
<entry>
    <title>Loading dynamic Haskell libs in Lua</title>
    <link href="http://osa1.net/posts/2015-01-16-haskell-so-lua.html" />
    <id>http://osa1.net/posts/2015-01-16-haskell-so-lua.html</id>
    <published>2015-01-16T00:00:00Z</published>
    <updated>2015-01-16T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Last year I wrote <a href="http://osa1.net/posts/2014-04-27-calling-haskell-lua.html">a blog post</a> in which I explained how to call Lua from Haskell and Haskell from Lua using <a href="http://hackage.haskell.org/package/hslua">hslua</a> library. At the end of that blog post I mentioned that it should be possible to compile Haskell code to shared library and load that in Lua.</p>
<p>Today a friend in our research group <a href="https://github.com/iu-parfunc">parfunc</a> asked a question about compiling Haskell to shared libraries and loading generated libraries in other programs and I thought while I’m at it I can just update my blog post as well. So in this post I’m going to explain how to compile Haskell functions to shared libraries and load them in Lua.</p>
<p>Before diving into the code, a few remarks:</p>
<ul>
<li>All the code in this blog post is tried on Linux, with Lua 5.1 and latest LuaJIT.</li>
<li>To be able to load our function in Lua and register it, our functions should have C linkage and <a href="http://www.lua.org/manual/5.1/manual.html#lua_CFunction"><code>lua_CFunction</code></a> type. We can either write Haskell functions directly using this type, or write C wrapper functions around our Haskell functions to be able to use them in Lua. In this post I’m going to do first one.</li>
<li>We’ll need some intermediate C code to expose some Haskell RTS functions to Lua, like <code>hs_init</code> to start Haskell runtime and <code>hs_exit</code> to stop it.</li>
<li>To be able to <code>require</code> our shared library in Lua, we need to implement a <code>int luaopen_&lt;ourlibrary&gt;(lua_State *L)</code> function. While in theory it should be possible to implement that function in Haskell, I’ll implement it in C in this post, because I’m not sure how to write Lua wrappers for <code>hs_init</code> and <code>hs_exit</code> in Haskell.</li>
<li>To keep the code as simple as possible, our Haskell function will be a very dumb addition function.</li>
</ul>
<p>Let’s start.</p>
<h1 id="defining-lua-function-in-haskell">Defining Lua function in Haskell</h1>
<p>This is exactly the same as before: We just define a function with type: <code>LuaState -&gt; IO Int</code>. To keep the code simple, we don’t do error handling at all.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="kw">module</span> <span class="dt">LibArith</span> <span class="kw">where</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Data.Maybe</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Scripting.Lua</span> <span class="co">-- this one from hslua</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a>foreign export ccall</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a><span class="ot">  add ::</span> <span class="dt">LuaState</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true"></a></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true"></a><span class="ot">add ::</span> <span class="dt">LuaState</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true"></a>add l <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true"></a>  i1 <span class="ot">&lt;-</span> fromJust <span class="ot">`fmap`</span> peek l <span class="dv">1</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true"></a>  i2 <span class="ot">&lt;-</span> fromJust <span class="ot">`fmap`</span> peek l <span class="dv">2</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true"></a>  pop l <span class="dv">2</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true"></a>  push l (i1 <span class="op">+</span><span class="ot"> i2 ::</span> <span class="dt">Int</span>)</span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true"></a>  <span class="fu">return</span> <span class="dv">1</span></span></code></pre></div>
<h1 id="implementing-intermediate-c">Implementing intermediate C</h1>
<p>In our C glue code, we do two things:</p>
<ol type="1">
<li>Wrap <code>hs_init</code> and <code>hs_exit</code> Haskell runtime functions.</li>
<li>Implement Lua C module interface in which we register our functions to Lua. (see <a href="http://www.lua.org/manual/5.1/manual.html#pdf-package.loaders">related docs</a> for details)</li>
</ol>
<p>Here’s the code:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="pp">#include </span><span class="im">&quot;LibArith_stub.h&quot;</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a><span class="pp">#include </span><span class="im">&quot;lua.h&quot;</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a><span class="dt">int</span> hs_init_lua(lua_State *L)</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a>{</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a>  hs_init(NULL, NULL);</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a>  <span class="cf">return</span> <span class="dv">0</span>;</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a>}</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true"></a></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true"></a><span class="dt">int</span> hs_exit_lua(lua_State *L)</span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true"></a>{</span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true"></a>  hs_exit();</span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true"></a>  <span class="cf">return</span> <span class="dv">0</span>;</span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true"></a>}</span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true"></a></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true"></a><span class="dt">int</span> luaopen_lualibhelper(lua_State *L)</span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true"></a>{</span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true"></a>  lua_pushcfunction(L, add);</span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true"></a>  lua_setglobal(L, <span class="st">&quot;add_in_haskell&quot;</span>);</span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true"></a>  lua_pushcfunction(L, hs_init_lua);</span>
<span id="cb2-21"><a href="#cb2-21" aria-hidden="true"></a>  lua_setglobal(L, <span class="st">&quot;hs_init&quot;</span>);</span>
<span id="cb2-22"><a href="#cb2-22" aria-hidden="true"></a>  lua_pushcfunction(L, hs_exit_lua);</span>
<span id="cb2-23"><a href="#cb2-23" aria-hidden="true"></a>  lua_setglobal(L, <span class="st">&quot;hs_exit&quot;</span>);</span>
<span id="cb2-24"><a href="#cb2-24" aria-hidden="true"></a>  <span class="cf">return</span> <span class="dv">0</span>;</span>
<span id="cb2-25"><a href="#cb2-25" aria-hidden="true"></a>}</span></code></pre></div>
<p>Some things to note:</p>
<ul>
<li><code>LibArith_stub.h</code> is generated by GHC. I’ll explain how to compile and link next.</li>
<li>Our Haskell function actually has type <code>HsInt (*)(void *)</code>. While this is not what Lua API expected(it expects <code>int (*)(lua_State *L)</code>), in my x86_64 Linux machine this is working fine. In the worst case, you may need to wrap the Haskell function in C and convert the types using Haskell RTS C API and Lua C API.</li>
</ul>
<h1 id="compiling-and-linking">Compiling and linking</h1>
<p>This is the tricky part, I wasted a good 2 hours trying to figure how to compile to <code>.so</code> and link it with correct set of libraries.</p>
<p>First step is to compile <code>hslua</code> in a sandbox, or at least make it reachable by GHC(by installing globally, using nix environments etc.). I’ll be giving commands assuming that you’re in a sandbox that has <code>hslua</code> installed, if you’re not, then just replace <code>cabal exec ghc --</code> part with <code>ghc</code> and it should just work.</p>
<p>Step 1, compile and link the Haskell code to generate a shared library:</p>
<pre><code>$ cabal exec ghc -- LibArith.hs -shared -dynamic -fPIC -o libarith.so -lHSrts-ghc7.8.3</code></pre>
<p>Note that if you’re using a different version of GHC, you’ll need to modify the last argument to make it link it with corrent GHC RTS library.(alternatively, you can link with debug or profiling versions etc.)</p>
<p>Step 2, compile the Lua module written in C(the C code above) and link it with our shared Haskell library:</p>
<pre><code>$ cabal exec ghc -- libarithhelper.c -no-hs-main -optl -larith -o lualibhelper.so -shared -fPIC -dynamic</code></pre>
<p>Note that you may need to pass extra linker parameters if you have Lua library/headers in non-standard locations. If that’s the case, <code>-optl</code> argument of GHC is used to add linker arguments, just use standard linker arguments with that(<code>-L</code>, <code>-I</code> etc.).</p>
<p>This command should print a warning like this:</p>
<pre><code>/home/omer/opt/luajit_bin/include/luajit-2.0/lua.h:168:16:
     note: expected ‘lua_CFunction’ but argument is of type ‘HsInt (*)(void *)’
     LUA_API void  (lua_pushcclosure) (lua_State *L, lua_CFunction fn, int n);</code></pre>
<p>Like mentioned above, this doesn’t make any difference on my x86_64 Linux machine. If that’s being a problem on your system, just wrap your Haskell function in intermediate C code above using Haskell RTS API.</p>
<p>Now you should have two shared libraries, one for our Haskell code and one for the intermediate C code. One problem is that the shared library generated from C is now depending on the one generated from Haskell. So Haskell library should be in your <code>LD_LIBRARY_PATH</code>.</p>
<p>A good improvement here would be to compile Haskell code to static library, and generate one dynamic library only. (which has Haskell library statically linked to it)</p>
<h1 id="loading-the-code-in-lua">Loading the code in Lua</h1>
<p>Before loading it, make sure that the dynamic linker can really find the shared library generated from Haskell. Run this:</p>
<pre><code>$ ldd lualibhelper.so | grep &quot;not found&quot;</code></pre>
<p>Make sure it’s not printing anything.</p>
<p>Now just run Lua and enjoy the library:</p>
<pre><code>$ luajit-2.0.3
LuaJIT 2.0.3 -- Copyright (C) 2005-2014 Mike Pall. http://luajit.org/
JIT: ON CMOV SSE2 SSE3 SSE4.1 fold cse dce fwd dse narrow loop abc sink fuse
&gt; require &quot;lualibhelper&quot;
&gt; hs_init()
&gt; print(add_in_haskell(1, 2))
3
&gt; print(add_in_haskell(-10, 20))
10</code></pre>
<p>Just for the amusement, let’s crash it by running Haskell function <em>after</em> stopping the Haskell runtime:</p>
<pre><code>&gt; hs_exit()
&gt; add_in_haskell(1, 2)
newBoundTask: RTS is not initialised; call hs_init() first</code></pre>
<p>Fun :)</p>
<h1 id="conclusion">Conclusion</h1>
<p>It turns out that extending Lua using Haskell is almost as easy as the doing it using the technique I explained in my <a href="http://osa1.net/posts/2014-04-27-calling-haskell-lua.html">previous blog post on this topic</a>.</p>
<p>This post also demonstrates one other thing, namely, compiling Haskell libraries to shared libraries and dynamically loading them in different programs. I’m hoping that this post helps fellow Haskellers to extend their programs written in different languages with Haskell.</p>]]></summary>
</entry>
<entry>
    <title>Calling Haskell from Lua and Lua from Haskell</title>
    <link href="http://osa1.net/posts/2014-04-27-calling-haskell-lua.html" />
    <id>http://osa1.net/posts/2014-04-27-calling-haskell-lua.html</id>
    <published>2014-04-27T00:00:00Z</published>
    <updated>2014-04-27T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>TL;DR: It’s possible to call Haskell functions from Lua and Lua function from Haskell using <a href="https://github.com/osa1/hslua">hslua</a>. <a href="https://github.com/osa1/hslua/tree/master/examples/callbacks">“Callbacks” example</a> in hslua repository shows how to do this.</p>
<hr />
<p>UPDATE: Also see the follow-up post <a href="http://osa1.net/posts/2015-01-16-haskell-so-lua.html">here</a>.</p>
<hr />
<p><a href="https://github.com/osa1/hslua"><code>hslua</code></a> provides Lua 5.1 C API to the programmer, and using it we can call Lua functions from Haskell and Haskell functions from Lua. In this post, I’m going to give two example Lua function implementations in Haskell. This functions will be mapped to a global name in Lua and one of them will be getting Lua functions as it’s arguments.</p>
<h1 id="two-ways-of-writing-lua-functions-in-haskell">Two ways of writing Lua functions in Haskell</h1>
<p>There are two ways of writing Lua functions in Haskell using hslua. First is the high-level method, where the Haskell function is just any function, provided that it’s type is an instance of <code>LuaImport</code>(we’ll come to this later). Second method is what I’d like to call the <em>raw</em> Haskell function method. <em>Raw</em> Haskell functions should have the type <code>LuaState -&gt; IO CInt</code>, where <code>LuaState</code> is Lua interpreter state provided by <code>hslua</code> and return type <code>CInt</code> represents the amount of return values(e.g. values that are left on the stack by this function). In <em>raw</em> functions, you need to do Lua stack manipulation using standard <a href="http://www.lua.org/manual/5.1/manual.html#3">Lua 5.1 API</a>.</p>
<p>While first method gives you a nice, abstracted way of writing Lua functions in Haskell, <em>raw</em> function method gives you the maximum amount of flexibility that Lua can provide. First method has lots of limitations when compared with <em>raw</em> method.</p>
<h1 id="higher-level-haskell-functions-in-lua">Higher-level Haskell functions in Lua</h1>
<p>In first method all you have to do is to write a Haskell function with it’s type is an instance of <code>LuaImport</code>. So let’s see what types are instances:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="kw">instance</span> (<span class="dt">StackValue</span> a) <span class="ot">=&gt;</span> <span class="dt">LuaImport</span> (<span class="dt">IO</span> a) <span class="kw">where</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a><span class="kw">instance</span> (<span class="dt">StackValue</span> a, <span class="dt">LuaImport</span> b) <span class="ot">=&gt;</span> <span class="dt">LuaImport</span> (a <span class="ot">-&gt;</span> b)</span></code></pre></div>
<p>So basically every function type where it’s argument types are instances of <code>StackValue</code> and return type is <code>IO a</code> where <code>a</code> is also an instance of <code>StackValue</code> is an instance of <code>LuaImport</code> and thus can be used in this higher-level method of writing Lua functions in Haskell. Let’s see which types are <code>StackValue</code>s:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">StackValue</span> <span class="dt">LuaInteger</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">StackValue</span> <span class="dt">LuaNumber</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">StackValue</span> <span class="dt">Int</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">StackValue</span> <span class="dt">Double</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">StackValue</span> <span class="dt">String</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">StackValue</span> <span class="dt">Bool</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">StackValue</span> (<span class="dt">FunPtr</span> <span class="dt">LuaCFunction</span>)</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">StackValue</span> (<span class="dt">Ptr</span> a)</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">StackValue</span> <span class="dt">LuaState</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">StackValue</span> ()</span></code></pre></div>
<p>We have basic Haskell types <code>Int</code>, <code>Double</code>, <code>String</code>, and <code>Bool</code> as instances. Other types are for more advanced use, for example, <code>Ptr a</code> is used for <code>userdata</code>(basically any binary data that you want to pass to Lua stack and later get back, see <a href="http://www.lua.org/manual/5.1/manual.html#2.2">reference manual</a> for more details).</p>
<p>This two functions are instances of <code>LuaImport</code>:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="ot">concat&#39; ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">String</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a>concat&#39; s1 s2 <span class="ot">=</span> <span class="fu">return</span> <span class="op">$</span> s1 <span class="op">++</span> s2</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a><span class="ot">pow ::</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">Double</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a>pow d1 d2 <span class="ot">=</span> <span class="fu">return</span> <span class="op">$</span> d1 <span class="op">**</span> d2</span></code></pre></div>
<p>And we can push this functions to Lua stack using <code>pushhsfunction</code> or directly assign them to a global variable using <code>registerhsfunction</code>. In this post I’ll use register functions:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Scripting.Lua</span> <span class="kw">as</span> <span class="dt">Lua</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true"></a>    l <span class="ot">&lt;-</span> newstate</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true"></a>    openlibs l</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true"></a>    registerhsfunction l <span class="st">&quot;concat&quot;</span> concat&#39;</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true"></a>    registerhsfunction l <span class="st">&quot;pow&quot;</span> pow</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true"></a>    loadfile l <span class="st">&quot;haskellfun.lua&quot;</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true"></a>    call l <span class="dv">0</span> <span class="dv">0</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true"></a>    close l</span></code></pre></div>
<p>With 11 lines of code, we can create a Lua state and map this Haskell functions to some names and call them from Lua. This program runs Lua file <code>haskellfun.lua</code>, which you can see in examples folder of <a href="https://github.com/osa1/hslua/tree/master/examples/haskellfun"><code>hslua</code> repository</a>.</p>
<p>Apart from the simplicity, another good thing about this method is that it handles type checking of Lua values automatically. Internally, this functions are wrapped with another function which gets <code>LuaState</code> as parameter and collects Lua values from stack, checks their types(and throws error in case of a type mismatch), and push return value of the function to the Lua stack again. Here’s an example call with wrong type of values:</p>
<pre><code>print(pow(&quot;wrong&quot;))
...
bad argument #1 to &#39;?&#39; (number expected, got string)</code></pre>
<p>Major limitation of this method is that you can only get basic Lua types from the Lua stack. For example, you can’t get a Lua table automatically like you get a Lua string. This because Lua needs to keep track of tables and some other values for garbage collection.</p>
<h1 id="working-on-more-complex-lua-types-and-the-registry">Working on more complex Lua types and the registry</h1>
<p>The Lua way of using Lua tables, Lua functions etc. in Lua API is to register that values to the Lua table called <em>registry</em>, and refer to that values using their index at <em>registry</em>. Using <em>registry</em>, Lua keeps tracks of references to Lua values that are available for garbage collection. See <a href="http://www.lua.org/manual/5.1/manual.html#3.5">reference manual section 3.5</a> for more details.</p>
<h1 id="raw-haskell-function-method">Raw Haskell function method</h1>
<p>We can do this writing <em>raw</em> Haskell functions. Raw functions have type <code>LuaState -&gt; IO CInt</code> and <code>LuaState</code> allows us to run any C API function. <em>raw</em> functions are pushed to Lua stack using <code>pushrawhsfunction</code> and registered as global variable using <code>registerrawhsfunction</code>.</p>
<p><a href="https://github.com/osa1/hslua/tree/master/examples/callbacks"><code>callbacks</code> example</a> in the <code>hslua</code> repository takes Lua callbacks in Haskell functions and later call them in FIFO order and return their return values as a Lua array(table with int keys). You can see the complete program in the repository and here I’ll give only the tricky parts.</p>
<p><em>Raw</em> Haskell functions should return number of values left on the Lua stack as return values. As an example, <code>addLuaCallbacks</code> function uses this for simple error reporting, it puts the error string to the Lua stack and return <code>1</code> in case of an error, and return <code>0</code> otherwise:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a>addLuaCallbacks l <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a>    <span class="op">...</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a>    <span class="kw">case</span> as <span class="kw">of</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a>      <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true"></a>        <span class="co">-- arguments are functions, add them to callback queue and return</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true"></a>        <span class="co">-- nothing</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true"></a>        addCallbacks <span class="dv">1</span> args</span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true"></a>        <span class="fu">return</span> <span class="dv">0</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true"></a>      <span class="dt">Just</span> errArg <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true"></a>        <span class="co">-- error: argument at `errArg` is not a function, return error</span></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true"></a>        <span class="co">-- string</span></span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true"></a>        pushstring l <span class="op">$</span> <span class="st">&quot;argument &quot;</span> <span class="op">++</span> <span class="fu">show</span> errArg <span class="op">++</span> <span class="st">&quot; is not a function&quot;</span></span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true"></a>        <span class="fu">return</span> <span class="dv">1</span></span></code></pre></div>
<p>This example program keeps track of passed Lua callbacks in an <code>IORef</code>. Here’s the part that handles getting Lua callbacks from Lua stack:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a>addCallbacks n <span class="fu">max</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a>  <span class="op">|</span> n <span class="op">&gt;</span> <span class="fu">max</span> <span class="ot">=</span> <span class="fu">return</span> ()</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true"></a>  <span class="op">|</span> <span class="fu">otherwise</span> <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true"></a>      <span class="co">-- move nth argument to top of the stack</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true"></a>      pushvalue l n</span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true"></a>      <span class="co">-- add function reference to registry</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true"></a>      refId <span class="ot">&lt;-</span> ref l registryindex</span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true"></a>      <span class="co">-- add registry index to IORef</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true"></a>      modifyIORef cs (<span class="op">++</span> [refId])</span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true"></a>      <span class="co">-- continue adding other arguments</span></span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true"></a>      addCallbacks (n<span class="op">+</span><span class="dv">1</span>) <span class="fu">max</span></span></code></pre></div>
<p>Note how we’re adding the function to the <em>registry</em> and getting it’s index at the <em>registry</em> in Haskell. We can now refer to this functions(e.g. push this function to Lua stack) using this index. Here’s the relevant code:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a><span class="co">-- | Call Lua callbacks collected with `addLuaCallbacks`.</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true"></a><span class="ot">callLuaCallbacks ::</span> <span class="dt">LuaState</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">CInt</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true"></a>callLuaCallbacks l <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true"></a>    <span class="op">...</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true"></a>  <span class="kw">where</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true"></a>    iter [] <span class="ot">=</span> <span class="fu">return</span> ()</span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true"></a>    iter (c <span class="op">:</span> rest) <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true"></a>      <span class="op">...</span></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true"></a>      pushinteger l (<span class="fu">fromIntegral</span> c)</span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true"></a>      gettable l registryindex</span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true"></a>      <span class="co">-- call the callback</span></span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true"></a>      call l <span class="dv">0</span> <span class="dv">1</span></span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true"></a>      <span class="op">...</span></span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true"></a>      iter rest</span></code></pre></div>
<p>We’re pushing the index to the Lua stack, and calling <code>gettable</code> to push actual function to the stack using the index. Complete program is longish, so I’m omitting it here, you can see it in <a href="https://github.com/osa1/hslua/tree/master/examples/callbacks"><code>hslua</code>s Github repository</a> with an example Lua program that uses defined Haskell functions to pass Lua callbacks to Haskell.</p>
<h1 id="a-note-about-safety">A note about safety</h1>
<p>Lua tolerates some incorrect stack operations and if you do that while writing <em>raw</em> Haskell functions, you can have hard times debugging your programs. Fortunately, Lua also provides a compile time flag to enable checking API usage for safety. If you install <code>hslua</code> using <code>-fapicheck</code> Cabal flag, it compiled Lua with API checking enabled and Lua gives you errors instead of silently doing something not intended. For example, if you refer to a Lua value at stack index <code>-4</code> while your stack has only <code>3</code> elements, you get something like:</p>
<pre><code>callbacks: src/lapi.c:57: index2adr: Assertion `idx != 0 &amp;&amp; -idx &lt;= L-&gt;top - L-&gt;base&#39; failed.</code></pre>
<p>This helps making sure that your API usage is correct.</p>
<h1 id="using-hslua-for-reading-configuration-files-written-in-lua">Using hslua for reading configuration files written in Lua</h1>
<p>hslua also provides a module for reading configuration files. As an example, using <code>Scripting.Lua.ConfigFile.getNestedAssocLists</code>, you can execute the Lua file given below and get resulting nested table as Haskell <code>[(String, [(String, String)])]</code>:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode lua"><code class="sourceCode lua"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true"></a> someVal <span class="op">=</span> <span class="op">{</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true"></a>    something <span class="op">=</span> <span class="op">{</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true"></a>       foo <span class="op">=</span> <span class="st">&quot;aaa&quot;</span><span class="op">,</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true"></a>       bar <span class="op">=</span> <span class="st">&quot;bbb&quot;</span><span class="op">,</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true"></a>       baz <span class="op">=</span> <span class="st">&quot;ccc&quot;</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true"></a>    <span class="op">},</span></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true"></a>    somethingElse <span class="op">=</span> <span class="op">{</span></span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true"></a>       <span class="op">...</span></span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true"></a>    <span class="op">}</span></span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true"></a> <span class="op">}</span></span></code></pre></div>
<h1 id="running-lua-programs-using-lua-interpreters">Running Lua programs using Lua interpreters</h1>
<p>In all hslua examples, we needed to create Lua state in Haskell, register Haskell functions inside Haskell and then run Lua files using Lua C API again in Haskell. I think in theory it is also possible to run Lua programs using standard Lua interpreter executables(instead of running the interpreter using Lua C API inside Haskell) and load Haskell functions compiled to <code>*.so</code> shared library files.</p>
<p>About one year ago, I did something similar using C instead of Haskell. You can see the code <a href="https://github.com/osa1/lcl">here</a>. The library compiled to a <code>.so</code> file and by using Lua’s <code>package.loadlib</code>, you can load functions defined in the <code>.so</code>.</p>
<p>Compiling raw Haskell <code>hslua</code> functions to a <code>.so</code> should not be tricky. <code>LuaState</code> type is just a wrapper around <code>Ptr ()</code>, and <code>CInt</code> is just a C integer, so it’s signature is already compatible. We probably need to use <code>foreign export ...</code> of GHC FFI and find GHC parameters to compile to <code>.so</code>. I’ll investigate this further and post updates.</p>]]></summary>
</entry>
<entry>
    <title>lcl -- Lua Container Library and The One Data Structure to Rule Them All</title>
    <link href="http://osa1.net/posts/2013-06-08-lcl-and-one-data-structure.html" />
    <id>http://osa1.net/posts/2013-06-08-lcl-and-one-data-structure.html</id>
    <published>2013-06-08T00:00:00Z</published>
    <updated>2013-06-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p><strong>Note: Sorry for organization of this post. We were talking about this stuff over #lua IRC channel for an hour, and before that I had worked on various bugs and I’m incredibly tired now.</strong></p>
<p>I’ve been working with an experimental Lua library lately. It had started as a learning exercise, and after first iteration, it turned out to be an experiment about Lua’s internals, dynamic linking, and data structures.</p>
<p>Lua Container Lib(lcl or liblcl for short) is a Lua library to use C++ STL containers from within Lua. It’s compiled to a single <code>.so</code>(or <code>.dll</code>) and it can be loaded from Lua 5.1.5, 5.2.2, LuaJIT 2.0.2 and Love2D with <code>package.loadlib</code> standard function. It provides some STL containers with an object-oriented interface.</p>
<p>You can see the source <a href="https://github.com/osa1/lcl">here</a>. There isn’t any tutorials yet, I think it’s simple enough to learn it from examples, see <code>tests/</code> folder.</p>
<p>For now, it only contains set and deque containers, but it should be very easy to add more. Also, not all operations on sets and deques are supported yet. Again, this should also be very easy to add. Current code base should have all kinds of code to implement more containers/operations on containers by just looking for others’ implementations. Pull requests are welcome!</p>
<p><code>tests/</code> folder also have a simple benchmark. Output of benchmark is in files <code>benchmark.output</code> and <code>benchmark.output_luajit</code>. I think most people find the output interesting. Before explaining what’s going on in that benchmark, here are some stuff I learned while developing this library:</p>
<h2 id="lessons-learned">Lessons learned</h2>
<p>Lua has some rules about the use of C API, but when you don’t follow the rules, you don’t immediately get caught. For instance, you should return the number of elements placed to the stack in your C functions. I had a bug in my code and one of my functions was returning 1 even though it returns with an empty stack. Nevertheless, the library worked fine until I tried it with LuaJIT.</p>
<p>LuaJIT is more picky about that rules and it fails in strange ways. Sometimes my program was failing with strange memory allocation errors, but program was still running. In the best case, I was getting a segmentation fault.</p>
<p>After several hours of debugging and some help from mailing list(see my mail <a href="http://www.freelists.org/post/luajit/cant-load-so-with-packageloadlib-undefined-symbol-error">here</a>) I could solve it. Best helper was the <code>LUA_USE_APICHECK</code> debug macro. It’s added to Lua in somewhere between Lua 5.1.5 and 5.2.2. When you compile Lua with <code>LUA_USE_APICHECK</code> defined, Lua makes some assertions in code to make sure stack is in correct state. You should always develop C libraries to Lua with this enabled.</p>
<p>Now, as for benchmarks; two things can be seen immediately from benchmarks: 1) All operations on STL containers are slower 2) LuaJIT is awesome.</p>
<p>Let’s first start from second point. LuaJIT is awesome. It’s best thing happened to Lua. It’s binary compatible with Lua 5.1.5, which means with minimal effort, you can gain some real performance benefits. You can see the difference by comparing <code>benchmark.output</code> and <code>benchmark.output_luajit</code> files. All I had to do was to run program with LuaJIT instead of Lua.</p>
<p>Now, as for STL containers .. Before starting this project, I was considering having a better performance for specialized data structures, ie. STL deques should be faster than Lua tables used as deques. As can be seen from benchmarks, that’s not the case. I made a simplest possible deque implementation possible in Lua(you can see it <a href="https://github.com/osa1/lcl/blob/master/tests/deque.lua">here</a>) and it’s still faster than STL deque(with minor difference).</p>
<p>I think there are several reasons for that.</p>
<p>There is no way to get a Lua value out of Lua interpreter. Lua C API deliberately avoid this because this may lead to memory leaks or memory corruptions.</p>
<p>You can only have a reference to a Lua value, and in that case, that value has to be written in some table. <a href="http://www.lua.org/manual/5.2/manual.html#luaL_ref"><code>luaL_ref</code></a> creates a reference and writes it to a Lua table, and then return that reference(as an <code>int</code>). Generally, you would use global register at <code>LUA_REGISTRYINDEX</code> to save Lua values.</p>
<p>This implies that you cannot have a container with insertion faster than Lua table insertion. Because every insertion also have to insert to a Lua table. This table is generally the global register at index <code>LUA_REGISTRYINDEX</code>. For example, when I add 1000000 elements to a set, all those elements is also added to the register.</p>
<p>You can see that STL deque insertions time is almost the same as Lua implementation’s. The reason for this is that even though STL deque insertion is O(1) with a minimal constant factor, you have to insert to a Lua table like explained above.</p>
<p>In case of set data structure: STL’s set implementation is generally a kind of tree, and elements are stored in sorted order(this makes possible to use STL sets as heaps like I did in <a href="https://github.com/osa1/lcl/blob/master/tests/dynload.lua"><code>dynload.lua</code></a> example). This causes extra O(log N) function calls for comparisons, where N is number of elements in tree. ie. when a new element added, it’s place is determined by comparing it with elements at each level and then moving down to next level in tree. In case of Lua tables, all insertions are amortized O(1) and no comparison functions are called.</p>
<p>These are my explanations to reasons of why STL operations are slower.</p>
<p>Still, I don’t think adding C/C++ containers in Lua is completely pointless. Significant memory savings may be possible with C/C++ containers. For example, 32 flags can be held in a 32bit integer in C/C++, but to do this in Lua, you need to use a double for every flag, and a table. A double is 8 bytes in my 64bit machine. And with 32 flags it costs you 32*8 = 256 bytes. In C/C++ you can have it with only 4 bytes.</p>
<p>There may be also performance advantages for really complex algorithms, but I don’t have a particular example in mind.</p>]]></summary>
</entry>
<entry>
    <title>Compiling Love2D with LuaJIT</title>
    <link href="http://osa1.net/posts/2013-06-08-compiling-love2d-with-luajit.html" />
    <id>http://osa1.net/posts/2013-06-08-compiling-love2d-with-luajit.html</id>
    <published>2013-06-08T00:00:00Z</published>
    <updated>2013-06-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>For some reason, I couldn’t load my dynamic library(compiled to <code>.so</code>) in Love2D linked with Lua 5.1.5. It was failing with <code>undefined symbol: lua_getfield</code> error. Interesting point is that I could load same library from directly in Lua 5.1.5 interpreter, which is the same thing as Love2D’s Lua interpreter. They’re compiled with same headers and linked with same object files.</p>
<p>I wasted several hours trying to compile Love2D with LuaJIT with the hope of loading my library from Love2D. I had tried loading my library from several different Lua versions before, Lua 5.1.5, Lua 5.2.5 and LuaJIT 2.0.2, and everything had worked perfectly. So I was expecting it to work with Love2D’s Lua interpreter too.</p>
<p>The problem was that Love2D’s configure script was not using environment variables to look for headers/object files. I was using same environment variables to build some other programs that use LuaJIT, and only Love2D had that problem.</p>
<p>To overcome this, I had to install LuaJIT to <code>/usr/</code>. There no way to compile Love2D with LuaJIT other than installing LuaJIT to <code>/usr/</code>. Installing <code>/usr/local/</code> doesn’t work. Setting environment variables(<code>LDFLAGS</code>, <code>LIBS</code> and <code>CPPFLAGS</code>) doesn’t work.</p>
<p>After that, I could compile Love2D. But that wasn’t enough because then generated executable was failing with <code>libluajit-5.1.so.2: cannot open shared object file: No such file or directory</code>. The reason of this error is latest version of LuaJIT generates a library file with different name: <code>libluajit-5.1.so.2.0.2</code>. This makes sense, I think most C/C++ libraries use same naming conventions.</p>
<p>Thankfully, renaming it works. Just rename that so file with required file.</p>
<p>I’m working on some Lua libraries written in C++, and testing gets painful when you can’t be sure which libraries you’re library is linked against. For this reason I don’t install Lua to <code>/usr</code> or <code>/usr/local</code>, and manually specify header/object file locations while compiling my library. So I removed all LuaJIT files from <code>/usr/lib</code>, <code>/usr/include</code>, etc. But to make Love2D work, I need <code>libluajit-5.1.so.2</code>. So I created a <code>lib</code> folder in my home dir, moved LuaJIT file there, and add that folder to <code>$LD_LIBRARY_PATH</code> environment variable. With this, I had a Love2D working with latest LuaJIT.</p>
<p>Hope this helps other people who want LuaJIT enabled Love2D on Linux.</p>]]></summary>
</entry>
<entry>
    <title>A converter from Lua tables to JavaScript objects</title>
    <link href="http://osa1.net/posts/2013-05-06-lua-tables-to-js-objs.html" />
    <id>http://osa1.net/posts/2013-05-06-lua-tables-to-js-objs.html</id>
    <published>2013-05-06T00:00:00Z</published>
    <updated>2013-05-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I wrote a simple Haskell program to convert some data encoded as Lua tables to JavaScript objects/arrays to be used in another project of mine:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="ot">{-# OPTIONS_GHC -Wall -fno-warn-name-shadowing #-}</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a><span class="kw">import</span>           <span class="dt">Language.Lua.Parser</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a><span class="kw">import</span>           <span class="dt">Language.Lua.Types</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Language.ECMAScript3.Syntax</span>       <span class="kw">as</span> <span class="dt">JS</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true"></a><span class="kw">import</span>           <span class="dt">Language.ECMAScript3.PrettyPrint</span>  (renderExpression)</span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true"></a></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true"></a><span class="kw">import</span>           <span class="dt">System.Environment</span>                (getArgs)</span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true"></a><span class="kw">import</span>           <span class="dt">Control.Monad</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true"></a><span class="kw">import</span>           <span class="dt">Prelude</span>                           <span class="kw">hiding</span> (exp)</span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true"></a></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true"></a><span class="ot">unsupported ::</span> <span class="dt">Show</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> b</span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true"></a>unsupported <span class="ot">=</span> <span class="fu">error</span> <span class="op">.</span> (<span class="st">&quot;unsupported exp: &quot;</span> <span class="op">++</span>) <span class="op">.</span> <span class="fu">show</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true"></a></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true"></a><span class="kw">class</span> <span class="dt">ToJsExp</span> a <span class="kw">where</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true"></a><span class="ot">    toJsExp ::</span> a <span class="ot">-&gt;</span> <span class="dt">JS.Expression</span> ()</span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true"></a></span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">ToJsExp</span> (<span class="dt">Exp</span> a) <span class="kw">where</span></span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true"></a>    toJsExp (<span class="dt">Nil</span> _) <span class="ot">=</span> <span class="dt">JS.NullLit</span> ()</span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true"></a>    toJsExp (<span class="dt">Bool</span> _ bool) <span class="ot">=</span> <span class="dt">JS.BoolLit</span> () bool</span>
<span id="cb1-23"><a href="#cb1-23" aria-hidden="true"></a>    toJsExp (<span class="dt">Number</span> _ num) <span class="ot">=</span> <span class="dt">JS.NumLit</span> () (<span class="fu">read</span> num)</span>
<span id="cb1-24"><a href="#cb1-24" aria-hidden="true"></a>    toJsExp (<span class="dt">String</span> _ str) <span class="ot">=</span> <span class="dt">JS.StringLit</span> () str</span>
<span id="cb1-25"><a href="#cb1-25" aria-hidden="true"></a>    toJsExp (<span class="dt">TableConst</span> _ table) <span class="ot">=</span> toJsExp table</span>
<span id="cb1-26"><a href="#cb1-26" aria-hidden="true"></a>    toJsExp unsupportedexp <span class="ot">=</span> unsupported (<span class="fu">fmap</span> (<span class="fu">const</span> ()) unsupportedexp)</span>
<span id="cb1-27"><a href="#cb1-27" aria-hidden="true"></a></span>
<span id="cb1-28"><a href="#cb1-28" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">ToJsExp</span> (<span class="dt">Table</span> a) <span class="kw">where</span></span>
<span id="cb1-29"><a href="#cb1-29" aria-hidden="true"></a>    toJsExp (<span class="dt">Table</span> _ fields)</span>
<span id="cb1-30"><a href="#cb1-30" aria-hidden="true"></a>      <span class="op">|</span> <span class="fu">all</span> arrField fields <span class="ot">=</span></span>
<span id="cb1-31"><a href="#cb1-31" aria-hidden="true"></a>          <span class="dt">JS.ArrayLit</span> () <span class="op">$</span> <span class="fu">map</span> (\(<span class="dt">Field</span> _ <span class="fu">exp</span>) <span class="ot">-&gt;</span> toJsExp <span class="fu">exp</span>) fields</span>
<span id="cb1-32"><a href="#cb1-32" aria-hidden="true"></a>      <span class="op">|</span> <span class="fu">all</span> objField fields <span class="ot">=</span></span>
<span id="cb1-33"><a href="#cb1-33" aria-hidden="true"></a>          <span class="dt">JS.ObjectLit</span> () <span class="op">$</span> <span class="fu">map</span> (\(<span class="dt">NamedField</span> _ (<span class="dt">Name</span> _ name) <span class="fu">exp</span>) <span class="ot">-&gt;</span> (<span class="dt">JS.PropId</span> () (<span class="dt">JS.Id</span> () name), toJsExp <span class="fu">exp</span>)) fields</span>
<span id="cb1-34"><a href="#cb1-34" aria-hidden="true"></a>      <span class="op">|</span> <span class="fu">otherwise</span> <span class="ot">=</span> unsupported (<span class="fu">map</span> (<span class="fu">fmap</span> (<span class="fu">const</span> ())) fields)</span>
<span id="cb1-35"><a href="#cb1-35" aria-hidden="true"></a></span>
<span id="cb1-36"><a href="#cb1-36" aria-hidden="true"></a>      <span class="kw">where</span></span>
<span id="cb1-37"><a href="#cb1-37" aria-hidden="true"></a>        arrField <span class="dt">Field</span>{} <span class="ot">=</span> <span class="dt">True</span></span>
<span id="cb1-38"><a href="#cb1-38" aria-hidden="true"></a>        arrField _       <span class="ot">=</span> <span class="dt">False</span></span>
<span id="cb1-39"><a href="#cb1-39" aria-hidden="true"></a></span>
<span id="cb1-40"><a href="#cb1-40" aria-hidden="true"></a>        objField <span class="dt">NamedField</span>{} <span class="ot">=</span> <span class="dt">True</span></span>
<span id="cb1-41"><a href="#cb1-41" aria-hidden="true"></a>        objField _            <span class="ot">=</span> <span class="dt">False</span></span>
<span id="cb1-42"><a href="#cb1-42" aria-hidden="true"></a></span>
<span id="cb1-43"><a href="#cb1-43" aria-hidden="true"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb1-44"><a href="#cb1-44" aria-hidden="true"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb1-45"><a href="#cb1-45" aria-hidden="true"></a>    args <span class="ot">&lt;-</span> getArgs</span>
<span id="cb1-46"><a href="#cb1-46" aria-hidden="true"></a>    contents <span class="ot">&lt;-</span> <span class="fu">readFile</span> (<span class="fu">head</span> args)</span>
<span id="cb1-47"><a href="#cb1-47" aria-hidden="true"></a>    <span class="kw">case</span> parseText <span class="fu">exp</span> contents <span class="kw">of</span></span>
<span id="cb1-48"><a href="#cb1-48" aria-hidden="true"></a>      <span class="dt">Left</span> err <span class="ot">-&gt;</span> <span class="fu">print</span> err</span>
<span id="cb1-49"><a href="#cb1-49" aria-hidden="true"></a>      <span class="dt">Right</span> result <span class="ot">-&gt;</span> <span class="fu">putStrLn</span> <span class="op">$</span> renderExpression <span class="op">$</span> toJsExp result</span></code></pre></div>
<p>It uses <a href="http://hackage.haskell.org/package/language-lua">language-lua</a>, a Lua parser and pretty-printer which I wrote to use in some other project of mine(a static analysis tool for Lua, I have big plans about it) and <a href="http://hackage.haskell.org/package/language-ecmascript">language-ecmascript</a>, JavaScript parser and pretty-printer.</p>]]></summary>
</entry>
<entry>
    <title>An interesting case of closures: is closed-over variable reference or value?</title>
    <link href="http://osa1.net/posts/2013-04-24-interesting-case-of-closures.html" />
    <id>http://osa1.net/posts/2013-04-24-interesting-case-of-closures.html</id>
    <published>2013-04-24T00:00:00Z</published>
    <updated>2013-04-24T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I discovered an interesting behavior of JavaScript’s closures while writing a nodejs script.</p>
<p>This behavior is pretty easy to observe when writing a nodejs application, because of it’s callback-based asynchronous nature, you’ll be writing callbacks all the time. Let’s say I’ll create a callback function which uses a variable defined in outer-scope, then do some actions using that variable:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="kw">var</span> callbacks <span class="op">=</span> []<span class="op">;</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a><span class="kw">var</span> words <span class="op">=</span> [ <span class="st">&quot;foo&quot;</span><span class="op">,</span> <span class="st">&quot;bar&quot;</span><span class="op">,</span> <span class="st">&quot;baz&quot;</span> ]<span class="op">;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a><span class="cf">for</span> (<span class="kw">var</span> idx <span class="kw">in</span> words) {</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a>    <span class="kw">var</span> say <span class="op">=</span> <span class="st">&quot;say &quot;</span> <span class="op">+</span> words[idx]<span class="op">;</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a>    callbacks<span class="op">.</span><span class="fu">push</span>(<span class="kw">function</span> () {</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a>        <span class="bu">console</span><span class="op">.</span><span class="fu">log</span>(say)<span class="op">;</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true"></a>    })<span class="op">;</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true"></a>}</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true"></a></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true"></a><span class="cf">for</span> (<span class="kw">var</span> idx <span class="kw">in</span> callbacks) {</span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true"></a>    callbacks[idx]()<span class="op">;</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true"></a>}</span></code></pre></div>
<p>What I expect from this program is to print <code>foo\nbar\nbaz</code>, but it instead prints <code>baz\nbaz\nbaz</code>. It’s like <code>say</code> variable used inside the callback is a reference and not a value. But it’s still strange because the reference should be local to for-loop’s body, so each <code>var say = ...</code> assignment should create a separate reference.</p>
<p>I find this behavior very counterintuitive. Before moving to solutions to fix this, I tried same program with several other languages.</p>
<p>Python also has this problem<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a>callbacks <span class="op">=</span> []</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a><span class="cf">for</span> i <span class="kw">in</span> [<span class="st">&quot;foo&quot;</span>, <span class="st">&quot;bar&quot;</span>, <span class="st">&quot;baz&quot;</span>]:</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a>    say <span class="op">=</span> <span class="st">&quot;say &quot;</span> <span class="op">+</span> i</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a>    <span class="kw">def</span> callback():</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a>        <span class="bu">print</span> say</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a>    callbacks.append(callback)</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true"></a><span class="cf">for</span> c <span class="kw">in</span> callbacks:</span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true"></a>    c()</span></code></pre></div>
<p>This prints same wrong output as with JavaScript.</p>
<p>Lua, my favorite dynamic language, does great:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode lua"><code class="sourceCode lua"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a>callbacks <span class="op">=</span> <span class="op">{}</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a><span class="cf">for</span> <span class="cn">_</span><span class="op">,</span> v <span class="kw">in</span> <span class="fu">pairs</span><span class="op">({</span> <span class="st">&quot;foo&quot;</span><span class="op">,</span> <span class="st">&quot;bar&quot;</span><span class="op">,</span> <span class="st">&quot;baz&quot;</span> <span class="op">})</span> <span class="cf">do</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a>    <span class="kw">local</span> say <span class="op">=</span> <span class="st">&quot;say &quot;</span> <span class="op">..</span> v</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a>    <span class="fu">table.insert</span><span class="op">(</span>callbacks<span class="op">,</span> <span class="kw">function</span> <span class="op">()</span> <span class="fu">print</span><span class="op">(</span>say<span class="op">)</span> <span class="kw">end</span><span class="op">)</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a><span class="cf">end</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true"></a></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true"></a><span class="cf">for</span> <span class="cn">_</span><span class="op">,</span> v <span class="kw">in</span> <span class="fu">pairs</span><span class="op">(</span>callbacks<span class="op">)</span> <span class="cf">do</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true"></a>    v<span class="op">()</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true"></a><span class="cf">end</span></span></code></pre></div>
<p>It prints <code>foo\nbar\nbaz</code> as expected. Trying this in functional languages may be pointless, since variables are actually not <em>variables</em>(they’re immutable), but it may be still useful for demonstration purposes, here’s the Haskell code that works as expected:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a>main <span class="ot">=</span> <span class="fu">sequence_</span> callbacks</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a>  <span class="kw">where</span> callbacks <span class="ot">=</span> <span class="fu">map</span> (<span class="fu">putStrLn</span> <span class="op">.</span> (<span class="st">&quot;say &quot;</span> <span class="op">++</span> )) [ <span class="st">&quot;foo&quot;</span>, <span class="st">&quot;bar&quot;</span>, <span class="st">&quot;baz&quot;</span> ]</span></code></pre></div>
<p>I’ll show how to get JavaScript’s behavior in languages that handle this right, and in Haskell it’s harder to get this behavior because we will need to use reference cells explicitly.</p>
<p>I think in Python it’s more understandable, because it doesn’t have any scope declarations. ie. we can’t reason about <code>say</code> variable’s scope by the look of it. In JavaScript, we have <code>var</code> keyword that indicates a new variable is created in the scope. But it still works wrong.</p>
<p>Indeed, in JavaScript, the worst language ever, <code>var</code> keyword is just like any other strange JavaScript feature and works in an unexpected way:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="op">&gt;</span> <span class="cf">for</span> (<span class="kw">var</span> v <span class="kw">in</span> [ <span class="dv">1</span><span class="op">,</span> <span class="dv">2</span><span class="op">,</span> <span class="dv">3</span> ]) { <span class="bu">console</span><span class="op">.</span><span class="fu">log</span>(v)<span class="op">;</span> }</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a><span class="dv">0</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a><span class="dv">1</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a><span class="dv">2</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true"></a><span class="op">&gt;</span> v</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true"></a><span class="st">&quot;2&quot;</span></span></code></pre></div>
<p>So one explanation of this behavior may be this: In Python, we don’t know the scope of variable and it looks like it’s global. So in closure, it works like a reference. And in JavaScript, <code>var</code> keyword is simply broken(and also variable inside closure works like reference).</p>
<h1 id="fixing-it">Fixing it</h1>
<p>Let’s fix that in JavaScript and Python.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="kw">var</span> callbacks <span class="op">=</span> []<span class="op">;</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a><span class="kw">var</span> words <span class="op">=</span> [ <span class="st">&quot;foo&quot;</span><span class="op">,</span> <span class="st">&quot;bar&quot;</span><span class="op">,</span> <span class="st">&quot;baz&quot;</span> ]<span class="op">;</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a><span class="cf">for</span> (<span class="kw">var</span> idx <span class="kw">in</span> words) {</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true"></a>    <span class="kw">var</span> say <span class="op">=</span> <span class="st">&quot;say &quot;</span> <span class="op">+</span> words[idx]<span class="op">;</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true"></a>    callbacks<span class="op">.</span><span class="fu">push</span>((<span class="kw">function</span> (say) {</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true"></a>      <span class="cf">return</span> <span class="kw">function</span> () {</span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true"></a>        <span class="bu">console</span><span class="op">.</span><span class="fu">log</span>(say)<span class="op">;</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true"></a>      }</span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true"></a>    })(say))<span class="op">;</span></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true"></a>}</span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true"></a></span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true"></a><span class="cf">for</span> (<span class="kw">var</span> idx <span class="kw">in</span> callbacks) {</span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true"></a>    callbacks[idx]()<span class="op">;</span></span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true"></a>}</span></code></pre></div>
<p>Here we’re creating a new scope with function(remember the JavaScript module pattern?), and then passing <code>say</code> variable to it. This guarantees that we have <code>say</code> variable local to the function. Then in callback returned by wrapper function, we have a reference just like before, but it’s not shared with any other functions.</p>
<p>In Python, there’s a cleaner way to do same thing:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a>callbacks <span class="op">=</span> []</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true"></a><span class="cf">for</span> i <span class="kw">in</span> [<span class="st">&quot;foo&quot;</span>, <span class="st">&quot;bar&quot;</span>, <span class="st">&quot;baz&quot;</span>]:</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true"></a>    say <span class="op">=</span> <span class="st">&quot;say &quot;</span> <span class="op">+</span> i</span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true"></a>    <span class="kw">def</span> callback(say<span class="op">=</span>say):</span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true"></a>        <span class="bu">print</span> say</span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true"></a>    callbacks.append(callback)</span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true"></a></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true"></a><span class="cf">for</span> c <span class="kw">in</span> callbacks:</span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true"></a>    c()</span></code></pre></div>
<p>Here the parameter is passed implicitly. (to me it’s still very strange and it shouldn’t be working, but for now I’ll just keep this post short)</p>
<h1 id="breaking-it">Breaking it</h1>
<p>Let’s have JavaScript’s behavior in Haskell:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true"></a></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Data.IORef</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true"></a></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true"></a>printFromRef r <span class="ot">=</span> <span class="fu">putStrLn</span> <span class="op">=&lt;&lt;</span> readIORef r</span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true"></a></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true"></a>mkCallbacks (w<span class="op">:</span>ws) <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true"></a>    ref <span class="ot">&lt;-</span> newIORef w</span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true"></a>    r   <span class="ot">&lt;-</span> iter ref ws</span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true"></a>    <span class="fu">return</span> <span class="op">$</span> printFromRef ref <span class="op">:</span> r</span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true"></a>  <span class="kw">where</span> iter ref []     <span class="ot">=</span> <span class="fu">return</span> []</span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true"></a>        iter ref (w<span class="op">:</span>ws) <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true"></a>          writeIORef ref w</span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true"></a>          cs <span class="ot">&lt;-</span> iter ref ws</span>
<span id="cb8-15"><a href="#cb8-15" aria-hidden="true"></a>          <span class="fu">return</span> <span class="op">$</span> printFromRef ref <span class="op">:</span> cs</span>
<span id="cb8-16"><a href="#cb8-16" aria-hidden="true"></a></span>
<span id="cb8-17"><a href="#cb8-17" aria-hidden="true"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb8-18"><a href="#cb8-18" aria-hidden="true"></a>  callbacks <span class="ot">&lt;-</span> mkCallbacks [ <span class="st">&quot;foo&quot;</span>, <span class="st">&quot;bar&quot;</span>, <span class="st">&quot;baz&quot;</span> ]</span>
<span id="cb8-19"><a href="#cb8-19" aria-hidden="true"></a>  <span class="fu">sequence_</span> callbacks</span></code></pre></div>
<p>The reason this code is that long is because we need to create and pass references explicitly.</p>
<section class="footnotes" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p>Calling this behavior <em>problem</em> may be a bit wrong, maybe it’s just a design decision. To me it’s a <em>problem</em> because this behavior is really counterintuitive.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>]]></summary>
</entry>
<entry>
    <title>On typing dynamic langs</title>
    <link href="http://osa1.net/posts/2013-04-19-on-typing-dynamic-langs.html" />
    <id>http://osa1.net/posts/2013-04-19-on-typing-dynamic-langs.html</id>
    <published>2013-04-19T00:00:00Z</published>
    <updated>2013-04-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p><a href="http://marijnhaverbeke.nl/blog/tern.html">This excellent post</a> on Tern’s internals reminded me of why I lost interest of my statically typed Lua project.</p>
<p>I lost my interest in a program exponentially with the amount of hacky solutions it involves.</p>
<p>I love Lua, it’s so simple but it is so powerful at the same time, without having any quirks most other dynamic languages have. But when it comes developing a type inference system for such a dynamic language, the result will have to contain a lot of hacks.</p>
<p>Here’s a quote from Tern post, which explains handling dynamically extending objects:</p>
<blockquote>
<p>And now we’re off into dodgy hack land. In order to meet this challenge, Tern uses a special treatment for for/in loops that appear to be copying properties. When it encounters them, it assumes that the properties from the source object will be copied to the target object. It ignores control flow (conditionals and such) and simply copies all properties.</p>
</blockquote>
<p>Similar situation is applied to Lua and this is where I dropped my project. Basically, there is no way to give a type to an object without actually running the program to the point where completion is needed. But even then you can’t have completely correct type information because for instance, you may have a different object in second iteration of loop but your type inference system would be only run it for one iteration. Still, I think running a program in an isolated environment to the point where enough type information is acquired is the best way to infer types in dynamic languages.</p>
<p>Accepting having a subset of Lua and forbidding object extensions in run-time is not a solution because then you can’t even use tables as, well, tables, rather than objects.</p>
<p>The obvious solution is creating a new syntax for defining objects. That syntax should be allowed only in top-level of a file, ie. you can’t use object definition syntax inside of a function.</p>
<p>But then a new language that is not Lua would be invented. I deliberately wanted to avoid this situation because in my opinion, it’s slightly missing the point of that kind of languages. I don’t like CoffeeScript’s additional compile step to my workflow. One nice property of dynamic languages is that we don’t have any visible intermediate steps between writing the source code and running it. All intermediate steps(parsing, compiling to some kind of byte-code, like Python does) are completely hidden to programmer.</p>
<p>Maybe the problem is that I’m looking for a perfect solution which does not exist in reality. I’m not sure how can I overcome this problem, I don’t want to work on programs full of hacks in my free time(well, I don’t want to work on this kind of programs in <em>any</em> time, but doing that as a hobby is more unbearable).</p>]]></summary>
</entry>
<entry>
    <title>Getting different distributions out of uniform distribution</title>
    <link href="http://osa1.net/posts/2012-12-19-different-distributions-from-uniform.html" />
    <id>http://osa1.net/posts/2012-12-19-different-distributions-from-uniform.html</id>
    <published>2012-12-19T00:00:00Z</published>
    <updated>2012-12-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I don’t know much about statistics and distributions, but I needed some differently distributed pseudo-random numbers for a project I’m working on.</p>
<p>I think most programming languages have a pseudo-random number generator, and that generators probably generate <a href="http://en.wikipedia.org/wiki/Uniform_distribution_(continuous)">uniformly-distributed</a> pseudo-randoms. I’m using Lua and Lua’s <a href="http://www.lua.org/manual/5.2/manual.html#pdf-math.random">math.random</a> generates pretty much uniformly distributed numbers:</p>
<p><img src="/images/distroyazi/uniformdistro.png" /></p>
<p>It’s written in Lua’s manual(link is given above) that it’s statistical properties cannot be guaranteed. It still works fine for my purposes as a uniformly distributed number generator.</p>
<p>If you’re working with <a href="http://processing.org/">Processing</a> or some other visualization libraries, you probably also have uniformly-distributed generator<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> in stdlib. But if you’re like me, you have to hack yourself one. I found a method called <a href="http://en.wikipedia.org/wiki/Box-Muller_transform">Box-Muller transform</a> that generates normally-distributed numbers out of uniformly-distributed ones.</p>
<p>I also read some discussions on why one shouldn’t use that, and instead move to other methods like <a href="http://en.wikipedia.org/wiki/Ziggurat_algorithm">Ziggurat algorithm</a>(and some other I can’t remember now), but I think Box-Muller method is easy to implement and works fine for my purposes, so I’m using it now:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode lua"><code class="sourceCode lua"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="kw">function</span> box_muller<span class="op">()</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a>    <span class="cf">return</span> <span class="fu">math.sqrt</span><span class="op">(-</span><span class="dv">2</span> <span class="op">*</span> <span class="fu">math.log</span><span class="op">(</span><span class="fu">math.random</span><span class="op">()))</span> <span class="op">*</span> <span class="fu">math.cos</span><span class="op">(</span><span class="dv">2</span> <span class="op">*</span> <span class="va">math.pi</span> <span class="op">*</span> <span class="fu">math.random</span><span class="op">())</span> <span class="op">/</span> <span class="dv">2</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a><span class="kw">end</span></span></code></pre></div>
<p>This function returns numbers in range [-1,1]. I’m using it with some code like that:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode lua"><code class="sourceCode lua"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="kw">local</span> dev <span class="op">=</span> <span class="dv">100</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a><span class="kw">local</span> rand <span class="op">=</span> box_muller<span class="op">()</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a><span class="cf">return</span> <span class="fu">math.floor</span><span class="op">(</span>rand <span class="op">*</span> dev <span class="op">+</span> myLimit<span class="op">/</span><span class="dv">2</span><span class="op">)</span></span></code></pre></div>
<p>Here the variable <code>dev</code> stands for <a href="http://en.wikipedia.org/wiki/Standard_deviation">standard deviation</a>, though note that it’s value is not <em>standard deviation</em>, but just a value to play with to set standard deviation. I don’t know how can I set standard deviation with Box-Muller method. By playing this value you can get distributions with different standard deviations.</p>
<p><img src="/images/distroyazi/normaldistro.png" /></p>
<p>I also generated two custom distributions, I don’t know if people gave them any special names, first one is this:</p>
<p><img src="/images/distroyazi/customdistro.png" /></p>
<p>I think this is a very useful one, this means that if I give some <em>actions</em> in my game different numbers depending on their <em>priority</em> and use this random number generator, I get numbers of actions with more priority more than the ones with less priority. Here’s the code:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode lua"><code class="sourceCode lua"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="kw">function</span> <span class="op">()</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a>    <span class="cf">while</span> <span class="kw">true</span> <span class="cf">do</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a>        <span class="kw">local</span> r1 <span class="op">=</span> <span class="fu">math.random</span><span class="op">(</span>range<span class="op">)</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a>        <span class="kw">local</span> r2 <span class="op">=</span> <span class="fu">math.random</span><span class="op">(</span>range<span class="op">)</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a>        <span class="cf">if</span> <span class="op">(</span>r2 <span class="op">&lt;</span> r1<span class="op">)</span> <span class="cf">then</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a>            <span class="cf">return</span> r1</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true"></a>        <span class="cf">end</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true"></a>    <span class="cf">end</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true"></a><span class="kw">end</span></span></code></pre></div>
<p>Last one is similar:</p>
<p><img src="/images/distroyazi/customdistro2.png" /></p>
<div class="sourceCode" id="cb4"><pre class="sourceCode lua"><code class="sourceCode lua"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="kw">function</span> <span class="op">()</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a>    <span class="kw">local</span> rate <span class="op">=</span> <span class="dv">3</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a>    <span class="kw">local</span> r <span class="op">=</span> <span class="fu">math.random</span><span class="op">(</span><span class="dv">500</span><span class="op">^</span>rate<span class="op">)</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a>    <span class="fu">print</span><span class="op">(</span>r<span class="op">)</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true"></a>    <span class="cf">return</span> <span class="fu">math.floor</span><span class="op">(</span>r<span class="op">^(</span><span class="dv">1</span><span class="op">/</span>rate<span class="op">))</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true"></a><span class="kw">end</span></span></code></pre></div>
<p>In this code, if you make <code>rate</code> variable 2, you get pretty much same distribution with the last one above. In my case, for some reason, making it 4 gives a value that doesn’t fit into 32bit, and so <code>math.random</code> call fails. When I tried with Lua 5.2 compiled by myself on my 64bit machine, <code>math.random</code> works fine with 64bit values, so I think it’s a problem with the app I’m using<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>.</p>
<section class="footnotes" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p>and you may even have a <a href="http://en.wikipedia.org/wiki/Perlin_noise">Perlin noise</a> <a href="http://processing.org/reference/noise_.html">generator</a> too!<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2" role="doc-endnote"><p>For those interested: It’s <a href="http://love2d.org">Love2d</a>. Recently(while working on this code) I realized that Love2d is not a Lua library, but a complete C++ program that has Lua interpreter. In most cases you can’t see the difference but there are some edge cases like I mentioned above that makes your program runs fine with Lua, but fails with Love2d programs.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>]]></summary>
</entry>

</feed>
