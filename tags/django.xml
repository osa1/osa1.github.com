<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>osa1.net - Posts tagged django</title>
    <link href="http://osa1.net/tags/django.xml" rel="self" />
    <link href="http://osa1.net" />
    <id>http://osa1.net/tags/django.xml</id>
    <author>
        <name>Ömer Sinan Ağacan</name>
        <email>omeragaca@gmail.com</email>
    </author>
    <updated>2011-08-14T00:00:00Z</updated>
    <entry>
    <title>Pardus'da 2. haftadan notlar</title>
    <link href="http://osa1.net/posts/2011-08-14-pardusda-2--haftadan-notlar.html" />
    <id>http://osa1.net/posts/2011-08-14-pardusda-2--haftadan-notlar.html</id>
    <published>2011-08-14T00:00:00Z</published>
    <updated>2011-08-14T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Hafta başında projeler dağıtılmıştı ve bir haftadır üzerlerinde çalışıyoruz. Benim için en ilginç kısım, buraya gelirken yapma ihtimalimin en az olduğunu düşündüğüm işi yapıyor olmak. Web development :P .</p>
<p><a href="http://osmanbaskaya.blogspot.com/">Osman Başkaya</a> ile beraber, <a href="http://packages.pardus.org.tr/">packages.pardus</a>’u daha güzel bir hale getirmek için çalışıyoruz. Şu andaki sayfayı, <a href="https://admin.fedoraproject.org/pkgdb/">Fedora</a>’nın, <a href="http://packages.debian.org/lenny/a2ps">Debian</a>’ın ve <a href="http://www.archlinux.org/packages/">Arch</a>’ınkilere benzer bir işlev/görünüm kazandırmaya çalışıyoruz.</p>
<p>Osman da ben de tasarımdan anlamadığımız için, <a href="http://projects.archlinux.org/archweb.git/">Archweb</a>’in tasarımı üzerinden gidiyoruz. Muhtemelen bizden sonra başkalarının tasarım ile oynaması gerekecek. Biz sadece işlev ile ilgileniyoruz.</p>
<p>Bir yandan birkaç farklı depodan binlerce paketin kaydını tutmak, güncellemeleri webe yansıtmak için scriptler hazırlıyoruz. Kimisi tek kullanımlık, kimisi depo her güncellendiğinde çalışacak şekilde. Sonuçta şu anki packages.pardus’dan çok daha işlevsel(istatistik ekranı, daha detaylı bilgiler) ve güzel görünümlü birşey çıkacak gibi.</p>
<p>Bu hafta Osman ile şu ana kadar hiç denemediğim birşey deneme fırsatımız da oldu. Pair programming. Sanırım 2 gün sadece pair-programming yaptık. Genel olarak, uzun süreler değil de, programın doğru kısımlarında doğru miktarda(süre olarak) yapılan pair programming’in gayet verimli olduğunu söyleyebilirim. Çok fazla tecrübem yok tabii ki ama güzel bir tecrübeydi, epey eğlendik. Projenin ihtiyaçlarını karşılayacak Django modellerini ve gerekli XML dosyalarını veritabanımıza aktaracak scriptlerden birini tamamen bıu şekilde yazdık.</p>
<p>Bu arada, şu ana kadar çalıştığım en büyük program/proje üzerinde çalıştığımdan şu ana kadar ihtiyacım olmayan şeylere ihtiyaç duydum. İyi bir Django IDE’si gibi. Projeye başladığımız ikinci günde, bazı şeyleri Vim ile yapmak artık dayanılmaz olduğundan(örneğin bir modelde yaptığım bir değişikliklik için view fonksiyonlarımdaki uyumsuzlukları tespit edip düzenleme, Django için debugging vs.) piyasadaki sağlam Django IDE’lerini test etmek istedim(WingIDE ve PyCharm). Wing ile aradığımı bulamadım(genel olarak çok güzel bir IDE ama Django için bana yukarıda bahsettiğim imkanları sunamadı), PyCharm’ı ise Linux ortamında kullanmak tam bir işkence. Swing ile yapıldığından, fontlar çok kötü gözüküyor ve render hızı çok kötü. Metin içerisinde gezinmek bile çok yavaş. Aynı problem Netbeans’de de var(yine Swing). Fontların kötü görüntüsü bir şekilde düzeltilebiliyor ama performans konusunda birşey yapılamıyor. Metin içerisinde gezmek işkence. Eclipse’de Java ile yazılmış olmasına rağmen, sanırım Swing yerine SWT kullanmasından dolayı, böyle problemler yok. Dolayısıyla Vim ile devam ediyoruz.</p>
<p><em>ha bir de kendime not: otomatik etiketleme sistemini düzelt. yazıları alakasız etiketlerle etiketleyip duruyorsun.</em></p>]]></summary>
</entry>
<entry>
    <title>Yeni başlayanlar için Python IDE/editor sorunsalı</title>
    <link href="http://osa1.net/posts/2010-11-15-yeni-baslayanlar-icin-python-ideeditor-sorunsali.html" />
    <id>http://osa1.net/posts/2010-11-15-yeni-baslayanlar-icin-python-ideeditor-sorunsali.html</id>
    <published>2010-11-15T00:00:00Z</published>
    <updated>2010-11-15T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Python’da IDE/editor olayı çok sıkıntılı geliyor bana. Aslında bir sürü alternatif var ama hepsi bazı sebeplerden dolayı çok kötü geliyor bana. Örneğin Eclipse/Pydev çok ağır geliyor, sahip olduğu özelliklerinin çoğunu <em>en azından şimdilik</em> kullanmıyorum. NetBeans aynı şekilde, üstelik Python için neredeyse hiçbir şey sağlamıyor. Sadece Aptana Studio işime yarıyor, o da HTML/CSS desteği ile PyDev’i buluşturduğu için, Django’da çok yardımcı oluyor.</p>
<p>Editor deyince, Gedit, Kate gibi araçlar için bir sürü eklentiler var, fakat emin olabilirsiniz, neredeyse tüm eklentileri denedim, hiçbir türlü işe yarar hale gelmiyorlar.. Aradığım özelliker: syntax renklendirme, otomatik indentation(düzgün çalışacak, return’den sonra diğer bloka geçmeli mesela), açtığım <code>[ ( { &quot;</code> gibi karakterleri nerde kapatığımı görmeliyim, tek tuşla programımı çalıştırabilmeliyim, hatta gerekirse parametreler ekleyip onları başka kısayollara atayabilmeliyim, mümkünse file browser..</p>
<p>Vim, Emacs gibi araçlar en baştan beri aklımdaydı fakat öğrenmesi/kurulumları çok zaman aldığından bir türlü başlayamıyordum, Emacs öğreneceğim vakitle Common Lisp öğrenmek daha mantıklı geliyor örneğin. Üstelik bu araçlar için tüm detayların olduğu, tek bir tutorial gibi birşey yok. Araştırıp öğrenmek gerekiyor.</p>
<p>Common Lisp ve Haskell ile ilgilenmeye başlayınca farkettim ki, belki de dünyadaki tüm diller için ortak 2 tane editor var, Vim ve Emacs. Haskell yazacaksınız, IDE/editor arıyorsunuz, ama Eclipse gibi devasa araçlara ihtiyacınız yok, hızlı, pratik bir çözüm arıyorsunuz. 2 alternatifiniz var: Vim ve Emacs. Common Lisp için aynısını isteseniz, bu sefer tek alternatif, Emacs. Ki yeterince öğrendikten sonra Java için bile kullanılabiliyorlar(<em>Java için bile</em> diyorum, çünkü Java’da gerçekten gelişmiş IDE özelliklerinize ihtiyacınız oluyor, yeni başlayan ben bile Eclipse’in özelliklerini kullanıyorum).</p>
<p>Python’da da basit, hızlı, kullanışlı bir editor ararken <a href="http://www.activestate.com/komodo-edit">Komodo Edit</a>’i keşfettmiştim. Aslında bayaa kullanışlı bir araç, kendi çalıştırma komutlarınızı kolayca tanımlayabilir, çalıştırırkenki çevre değişkenlerinizi belirleyebiliyorsunuz falan. Kullanışlı ve küçük bir araç, ama çok büyük bir sorunu var; çok yavaş. Birkaç yüz satırlık kodda bile rahatlıkla gezinemiyorum, her nedense çok yavaş çalışıyor.</p>
<p>Dolayısıyla bu sabah yine Vim’e bir şans vermeye karar verdim. Emacs bana hep Vim’den daha karışık gibi gelmiştir. Ayarlarıyla, kısayollarıyla falan. GVim kurulumu yaptım, sıfırdan başlamak yerine birkaç farklı kaynaktan vim ayar dosyalarını incelemeye başladım(.vimrc). Neticede birkaç yerden derlediğim ve kendi kattığım birkaç satırla kendi Vim’imi oluşturdum(bu arada resimdeki arşiv düzenleyinin arayüzünün son hali):</p>
<div class="figure">
<img src="/images/vim.png" />
</div>
<p>Henüz Vim’in çoğu özelliğinden faydalanamıyorum ve metin düzenlerken sıkıntılar yaşıyorum(hatta bu yazıyı yazdığım sırada nasıl tüm kelimeyi sileceğimi, ve kopyaladığım bir metini nasıl yapıştıracağımı bile bilmiyordum), ama en azından tam istediğim özelliklere sahip bir Python editorum oldu.</p>
<p>Oturup vimtutor çalışarak öğrenmek yerine, işimi yaparken öğreneceğim artık. .vimrc dosyamı <a href="http://www.osa1.net/media/.vimrc">buradan</a> indirebilirsiniz. Çoğu satırda açıklama var zaten, kısayollar genelde bana ait. Eski alışkanlıklarımdan kurtulamadığımdan, alt+w, alt+s, tab değiştirmek için alt+oklar gibi kısayollar ekledim.</p>
<p>Bu arada, Google ile kolaylıkla binlerce kaynak bulunabilir tabii ki, ama ben yine de kendi faydalandığım kaynakları vereyim:</p>
<ul>
<li><a href="http://vim.wikia.com/wiki/Vim_Tips_Wiki">Vim tips wiki</a></li>
<li><a href="http://www.tuxfiles.org/linuxhelp/vimcheat.html">Vim cheat sheet</a></li>
<li><a href="http://stackoverflow.com/questions/164847">Stackoverflor vimrc başlığı</a></li>
</ul>]]></summary>
</entry>
<entry>
    <title>Python, Java, okunacaklar falan</title>
    <link href="http://osa1.net/posts/2010-10-03-python-java-okunacaklar-falan.html" />
    <id>http://osa1.net/posts/2010-10-03-python-java-okunacaklar-falan.html</id>
    <published>2010-10-03T00:00:00Z</published>
    <updated>2010-10-03T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Okul başladığından beri ne Python ile ne Django ile uğraşamıyorum, tek satır Python kodu yazmadım neredeyse. Java’ya hala ısınamadım. An itibariyle Java’da canımı sıkan birkaç şey var:</p>
<ul>
<li>İğrenç syntax. Uzun sınıf ve method adları.</li>
<li>Uzunluğu değiştirilemeyen, içine sadece tek tip alabilen <a href="http://download.oracle.com/javase/tutorial/java/nutsandbolts/arrays.html">array</a> denen salak şey ile uğraşmak zorunda olmam.</li>
<li>String için bir method test etmek için bile, yeni bir sınıf oluşturup, içine bir method oluşturmak zorunda kalmam. Üşendiğim için istediğim testleri yapamamam.</li>
<li>Public, private, default, protected muhabbetleri. Neden böyle şeylere ihtiyaç duyulduğunu anlayamıyorum.</li>
<li>Haliyle getter ve setter olayları.</li>
<li>Operator overloading diye bir olayın olmaması. Tüm işin methodlara kalması.</li>
<li>Derslerim gereği(programlamaya giriş, veri yapıları, nesnesel tasarım, ve belki de fazlası) öğrenmek zorunda olmam(?!).</li>
</ul>
<p>Aklıma gelenler şimdilik bunlar. Onun dışında, sürekli yaptığım gibi yine bir okuma listesi yaptım kendime. Bir kısmını bastıracağım sanırm, Türkçe derslerinde falan okumak güzel oluyor.</p>
<ul>
<li><a href="http://naeblis.cx/rtomayko/2004/12/15/the-static-method-thing">Static method thing</a>.</li>
<li><a href="http://dirtsimple.org/2004/12/python-is-not-java.html">Python is not Java</a>.</li>
<li><a href="http://dirtsimple.org/2004/12/java-is-not-python-either.html">Java is not Python, either</a>.</li>
<li><a href="http://dirtsimple.org/2005/10/children-of-lesser-python.html">Children of lesser Python</a></li>
<li><a href="http://dirtsimple.org/2005/08/ruby-gems-python-eggs-and-beauty-of.html">Ruby gems, Python eggs and beauty of unittest</a>.</li>
<li><a href="http://dirtsimple.org/2004/12/python-interfaces-are-not-java.html">Python interfaces are not Java interfaces</a>.</li>
<li><a href="http://tomayko.com/writings/getters-setters-fuxors">Getters/Setters/Fuxors</a>.</li>
<li><a href="http://mitpress.mit.edu/sicp/">SICP!</a>. Okulumun kütüphanesinde var mıdır ki?</li>
<li><a href="http://www.python.org/doc/essays/comparisons.html">Comparing Python to other languages</a>.</li>
<li><a href="http://norvig.com/lispy.html">(How to Write a (Lisp) Interpreter (in Python))</a>.</li>
</ul>]]></summary>
</entry>
<entry>
    <title>Django ile Wordpress'e bağlanmak</title>
    <link href="http://osa1.net/posts/2010-08-28-django-ile-wordpresse-baglanmak.html" />
    <id>http://osa1.net/posts/2010-08-28-django-ile-wordpresse-baglanmak.html</id>
    <published>2010-08-28T00:00:00Z</published>
    <updated>2010-08-28T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Birkaç gün önce bir arkadaş sormuştu Django ile Wordpress’e nasıl bağlandığımı(bkz <a href="/arsiv/">arşiv sayfam</a>. Yaptığım şey, wordpress için bir model oluşturup, mümkün olduğunca wordpress veritabanını kopyaladım.</p>
<p>Kendi sitem için sadece wp_posts tablosunu aktardım, fakat tüm wordpress’de aktarılabilir biraz daha uğraşılarak. Bu yöntemle wordpress’e yazı bile girebilirsiniz aslında. Ben sadece yazıları çekiyorum.</p>
<p>wp_posts tablosu(wordpress 2.9.1 için) şu alanları içeriyor:</p>
<pre><code>field           type
----------------------------
id              int(11)
post_date       datetime
post_title      varchar(100)
post_content    longtext
post_excerpt    varchar(100)
post_status     varchar(100)
guid            varchar(100)
comment_count   int(11)
post_type       varchar(20)</code></pre>
<p>Bunu <a href="http://docs.djangoproject.com/en/dev/topics/db/models/">Django ORM</a>’ine şu şekilde çevirdim(tam olarak aynısı olmasa da, eğer sadece yazıları okuyacaksanız gayet güzel çalışıyor, yazı eklemek için denemedim):</p>
<pre class="sourceCode python"><code class="sourceCode python"><span class="co"># models.py</span>
<span class="ch">from</span> django.db <span class="ch">import</span> models
<span class="kw">class</span> Posts(models.Model):
    post_date = models.DateTimeField()
    post_content = models.TextField()
    post_title = models.CharField(max_length=<span class="dv">100</span>)
    post_content = models.TextField()
    post_excerpt = models.CharField(max_length=<span class="dv">100</span>)
    post_status = models.CharField(max_length=<span class="dv">20</span>)
    guid = models.CharField(max_length=<span class="dv">100</span>)
    comment_count = models.IntegerField()
    post_type = models.CharField(max_length=<span class="dv">20</span>)</code></pre>
<p>Daha sonra views.py dosyamdan şu şekilde çekiyorum:</p>
<pre class="sourceCode python"><code class="sourceCode python"><span class="ch">from</span> wp.models <span class="ch">import</span> Posts
<span class="kw">def</span> wp():
    <span class="kw">return</span> [post <span class="kw">for</span> post in Posts.objects.order_by(<span class="st">&quot;-post_date&quot;</span>) <span class="kw">if</span> post.post_type == <span class="st">&quot;post&quot;</span> and post.post_status == <span class="st">&quot;publish&quot;</span>]</code></pre>
<p>Bundan sonrası normal Django işlemleri. wp() fonksiyonunu istediğim sayfaya gönderdikten sonra(render_to_response ile mesela) aşağıdaki template kodları ile wordpress yazılarıma ait verileri çekiyorum:</p>
<pre class="sourceCode python"><code class="sourceCode python">{% <span class="kw">for</span> yazi in wp %}
        {{ yazi.post_title }} *baslik*
        {{ yazi.post_date }} *tarih*
        {{ yazi.post_content }} *icerik*
        {{ yazi.coment_count }} *yorum sayisi*
{% endfor %}</code></pre>
<p>Tabii bunları çekerken bazı <a href="http://docs.djangoproject.com/en/dev/ref/templates/builtins/#built-in-filter-reference">builtin template tag</a>lardan yararlanıyorum. Bu arada, Django, 1.2 sürümüyle beraber artık birden fazla veritabanına bağlanabiliyor, wordpress yazılarınızı çekmek istiyorsanız bunu kullanabilirsiniz(ben aynı veritabanını kullanıyorum.</p>]]></summary>
</entry>
<entry>
    <title>Django'ya Pygments desteği</title>
    <link href="http://osa1.net/posts/2010-08-26-djangoya-pygments-destegi.html" />
    <id>http://osa1.net/posts/2010-08-26-djangoya-pygments-destegi.html</id>
    <published>2010-08-26T00:00:00Z</published>
    <updated>2010-08-26T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Daha önceden <a href="http://test.osa1.net/djangoya-markdown-destegi/">burada</a> Django’ya <a href="http://daringfireball.net/projects/markdown/">Markdown</a> desteği eklenmesinden bahsetmiştim(Django’nun Markdown eklentisi olduğunu farkettim çok sonradan). Bu sefer de syntax renklendirme için <a href="http://pygments.org/">Pygments</a> desteği ekledim. Pygments’den önce <a href="http://code.google.com/p/syntaxhighlighter/">syntaxhighlighter</a> kullanıyordum benim amacım için biraz fazla gelişmiş ve kompleks kaçıyordu.</p>
<p>Öncelikle django’ya pygments desteği için 2 tane çok iyi kaynak var(<a href="http://www.saltycrane.com/blog/2008/08/django-blog-project-12-adding-pygments-syntax-highlighting/">1</a>, <a href="http://djangosnippets.org/snippets/360/">2</a>), fakat bu kaynaklardaki yöntemlerden ilki, veritabanına gerekli html tagları eklenmiş bir şekilde yazıyor, dolayısıyla bir daha düzenlemek istediğinizde kodunuz okunmaz bir halde oluyor. Benim yapmak istediğim şey, daha önceden markdown için de yaptığım gibi, bir <a href="http://docs.djangoproject.com/en/dev/howto/custom-template-tags/">template filter</a> oluşturup istediğim yerde kullanabilmek. Hem bu şekilde daha esnek olabilirim. İkinci yöntem ise, açıkçası ne yaptığını anlamaya çalışmadım, markdown ve pygments’i beraber uyguluyor. Bu da benim istediğim şey değil. Benim amacım, istediğim yere markdown, istediğim yere pygments, istediğim yere de ikisini beraber uygulamak.</p>
<p>Bunun için verdiğim ilk kaynaktaki kodu kullandım aslında. Tek farkı, sonucu veritabanına yazdırmak yerine, fonksiyonu template filter haline getirdim.</p>
<pre class="sourceCode python"><code class="sourceCode python"><span class="co"># pygmentsf.py</span>
<span class="ch">from</span> django <span class="ch">import</span> template
<span class="ch">from</span> BeautifulSoup.BeautifulSoup <span class="ch">import</span> BeautifulSoup <span class="co">#saka gibi</span>
<span class="ch">from</span> pygments <span class="ch">import</span> lexers, highlight, formatters
<span class="ch">from</span> django.template.defaultfilters <span class="ch">import</span> stringfilter
register = template.Library()
<span class="ot">@register.filter</span>
<span class="ot">@stringfilter</span>
<span class="kw">def</span> pygmentsf(html):
    <span class="co">&quot;String&#39;i Pygments&#39;den gecirir. BeautifulSoup ile pre taglarini ayristirir.&quot;</span>
    soup = BeautifulSoup(html)
    preblocks = soup.findAll(<span class="st">&#39;pre&#39;</span>)
    <span class="kw">for</span> pre in preblocks:
        <span class="kw">if</span> pre.has_key(<span class="st">&#39;class&#39;</span>):
            <span class="kw">try</span>:
                code = <span class="st">&#39;&#39;</span>.join([<span class="dt">unicode</span>(item) <span class="kw">for</span> item in pre.contents])
                code = unescape_html(code)
                preclass = pre[<span class="st">&#39;class&#39;</span>]
                <span class="co"># syntaxhighlighter icin yazilmis kodlar icin</span>
                <span class="kw">if</span> preclass == <span class="st">&#39;brush: python&#39;</span> or preclass == <span class="st">&#39;brush; python&#39;</span>:
                    preclass = <span class="st">&#39;python&#39;</span>
                lexer = lexers.get_lexer_by_name(preclass)
                formatter = formatters.HtmlFormatter()
                code_hl = highlight(code, lexer, formatter)
                pre.replaceWith(BeautifulSoup(code_hl))
            <span class="kw">except</span>:
                <span class="kw">pass</span>
    <span class="kw">return</span> <span class="dt">unicode</span>(soup)
<span class="kw">def</span> unescape_html(html):
    html = html.replace(<span class="st">&#39;&amp;lt;&#39;</span>, <span class="st">&#39;&lt;&#39;</span>)
    html = html.replace(<span class="st">&#39;&amp;gt;&#39;</span>, <span class="st">&#39;&gt;&#39;</span>)
    html = html.replace(<span class="st">&#39;&amp;amp;&#39;</span>, <span class="st">&#39;&amp;&#39;</span>)
    <span class="kw">return</span> html</code></pre>
<p>Ayrıca küçük bir düzenlemeyle daha önceden syntaxhighlighter için yazdığım yazılarla da uyumlu olmasını sağladım. Bu dosyayı uygulamanız altında eğer templatetags klasörüne attıktan sonra template dosyanızdan <code>{% load pygmentsf %}</code> dedikten sonra, istediğiniz değişkene uygulayabilirsiniz. <code>{{ blog.body|pygmentsf|safe|escape }}</code> gibi. Ya da isterseniz markdown yazımdaki template filter ile beraber <code>{{ blog.body|markdown|pygmentsf|safe|escape }}</code> şeklinde kullanabilirsiniz.</p>
<p>Unutmadan, HTML’i ayrıştırmak için <a href="http://www.crummy.com/software/BeautifulSoup/">BeautifulSoup</a> kullanılıyor. Mükemmel bir kütüphane.</p>
<div class="alert">
Eğer <a href="http://osa1.net/djangoya-markdown-destegi/">markdown</a> ile beraber kullanacaksanız, bu yöntem pek de iyi değil. <a href="http://osa1.net/djangoda-markdown-ve-pygments-kullanmak-2/">Şuraya</a> bakın.
</div>]]></summary>
</entry>
<entry>
    <title>Pygame denemeleri 1 ve okunacaklar</title>
    <link href="http://osa1.net/posts/2010-08-15-pygame-denemeleri-1-ve-okunacaklar.html" />
    <id>http://osa1.net/posts/2010-08-15-pygame-denemeleri-1-ve-okunacaklar.html</id>
    <published>2010-08-15T00:00:00Z</published>
    <updated>2010-08-15T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Python ile Django’dan sonra pygame’e el attım biraz. Daha yeni başladım ve henüz pygame’in özelliklerinin çok azından yararlanarak birşeyler yapabiliyorum. Aşağıdaki kod ilk yazdığım basit bir çarpışma şeyi(neyi ben de bilmiyorum). İstediğiniz büyüklükte ekrana istediğiniz kadar top ekleyip onları rastgele hızlarda bir yerlere yolluyor ve çarpıştırıyor.</p>
<pre class="sourceCode python"><code class="sourceCode python"><span class="ch">import</span> pygame, random, math
screenx, screeny = <span class="dv">500</span>, <span class="dv">500</span> <span class="co">#ekran buyuklugu</span>
<span class="kw">class</span> Ball:
    <span class="kw">def</span> <span class="ot">__init__</span>(<span class="ot">self</span>, surface):
        <span class="ot">self</span>.surface = surface
        <span class="ot">self</span>.radius = <span class="dv">10</span>
        <span class="ot">self</span>.color = (<span class="dv">255</span>, <span class="dv">255</span>, <span class="dv">255</span>)
        <span class="ot">self</span>.x = random.randint(<span class="dv">0</span>+<span class="ot">self</span>.radius, screenx-<span class="ot">self</span>.radius)
        <span class="ot">self</span>.y = random.randint(<span class="dv">0</span>+<span class="ot">self</span>.radius, screeny-<span class="ot">self</span>.radius)
        <span class="ot">self</span>.vx = random.randint(<span class="dv">1</span>, <span class="dv">10</span>)
        <span class="ot">self</span>.vy = random.randint(<span class="dv">1</span>, <span class="dv">10</span>)
        
    <span class="kw">def</span> move(<span class="ot">self</span>, time_passed):
        <span class="kw">if</span> <span class="ot">self</span>.x &gt;= screenx-<span class="ot">self</span>.radius or <span class="ot">self</span>.x &lt;= <span class="ot">self</span>.radius:
            <span class="ot">self</span>.vx *= -<span class="dv">1</span>
        <span class="kw">if</span> <span class="ot">self</span>.y &gt;= screeny-<span class="ot">self</span>.radius or <span class="ot">self</span>.y &lt;= <span class="ot">self</span>.radius:
            <span class="ot">self</span>.vy *= -<span class="dv">1</span>
        <span class="ot">self</span>.x += <span class="ot">self</span>.vx * time_passed
        <span class="ot">self</span>.y += <span class="ot">self</span>.vy * time_passed
        
    <span class="kw">def</span> draw(<span class="ot">self</span>):
        pygame.draw.circle(<span class="ot">self</span>.surface, <span class="ot">self</span>.color, (<span class="ot">self</span>.x, <span class="ot">self</span>.y),
                           <span class="ot">self</span>.radius)
pygame.init()
clock = pygame.time.Clock()
screen = pygame.display.set_mode((screenx, screeny), <span class="dv">0</span>, <span class="dv">32</span>)
running = <span class="ot">True</span>
balls = []
<span class="kw">for</span> i in <span class="dt">range</span>(<span class="dv">1</span>, <span class="dv">21</span>): <span class="co">#top sayisi</span>
    balls.append(Ball(screen))
<span class="kw">def</span> CollisionDetect(b1):
    <span class="kw">for</span> b2 in balls:
        <span class="kw">if</span> b1 is not b2:
            <span class="dt">range</span> = math.sqrt((b1.x - b2.x)**<span class="dv">2</span> + (b1.y - b2.y)**<span class="dv">2</span>)
            <span class="kw">if</span> <span class="dt">range</span> &lt; (b1.radius + b2.radius):
                b1.vx, b2.vx = b2.vx, b1.vx
                b1.vy, b2.vy = b2.vy, b1.vy
                <span class="co">#b1.move(); b2.move()</span>
<span class="kw">while</span> running:
    <span class="kw">for</span> event in pygame.event.get():
        <span class="co">#print event</span>
        <span class="kw">if</span> event.<span class="dt">type</span> == pygame.QUIT:
            running = <span class="ot">False</span>
    
    time_passed = clock.tick(<span class="dv">50</span>)
    screen.fill((<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>))
    <span class="kw">for</span> b in balls:
        b.draw()
        CollisionDetect(b)
        b.move(time_passed)
    
    pygame.display.flip()</code></pre>
<p>Onun dışında kendime bir okunacaklar listesi hazırladım, ilk fırsatta okuyacaklarım:</p>
<ul>
<li><a href="http://www.pygame.org/docs/tut/MoveIt.html">http://www.pygame.org/docs/tut/MoveIt.html</a></li>
<li><a href="http://eli.thegreenplace.net/2008/12/13/writing-a-game-in-python-with-pygame-part-i/">http://eli.thegreenplace.net/2008/12/13/writing-a-game-in-python-with-pygame-part-i/</a></li>
<li><a href="http://ezide.com/games/writing-games.html">http://ezide.com/games/writing-games.html</a></li>
<li><a href="http://stackoverflow.com/questions/739654/understanding-python-decorators">StackOverflow - Understanding Python Decorators</a></li>
<li><a href="http://stackoverflow.com/questions/231767/the-python-yield-keyword-explained">StackOverflow - Python yield Keyword</a></li>
</ul>]]></summary>
</entry>
<entry>
    <title>Django'ya Markdown desteği</title>
    <link href="http://osa1.net/posts/2010-08-02-djangoya-markdown-destegi.html" />
    <id>http://osa1.net/posts/2010-08-02-djangoya-markdown-destegi.html</id>
    <published>2010-08-02T00:00:00Z</published>
    <updated>2010-08-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Bir süredir blog sayfam için yazı girmemi kolaylaştıracak bazı düzenlemeler yapıyorum. Öncelikle <a href="http://www.apress.com/book/view/1590599829">Beginning Python: From Novice to Professional</a> kitabındaki “instant markup” örneğini uygulamaya çalıştım, düz yazı yazacaksanız gayet kullanışlı, fakat eğer kod yayınlayacaksanız sapıtıyor. Daha sonrdan BBCode tarzı birşeyler oluşturmayı denedim, fakat o sırada <a href="http://daringfireball.net/projects/markdown/">Markdown</a>’ı keşfettim.</p>
<blockquote>
<p>Markdown is a text-to-HTML conversion tool for web writers. Markdown allows you to write using an easy-to-read, easy-to-write plain text format, then convert it to structurally valid XHTML (or HTML).</p>
</blockquote>
<p>Python modülünü <a href="http://pypi.python.org/pypi/Markdown/2.0.3">http://pypi.python.org/pypi/Markdown/2.0.3</a> adresinden indirebilirsiniz.</p>
<p>Henüz isteğim doğrultusunda nasıl geliştirebileceğimi bulamasam da ilk haliyle bile çok yardımcı oluyor. Django’yla kullanmak için iki farklı yol izleyebilirsiniz. Birincisi, hangi modelinizde uygulamak istiyorsanız, onun save metodunu override edersiniz. Örneğin modelimdeki “post” alanına uygulamak istiyorsam, markdown modülünü import ettikten sonra şöyle yapıyorum:</p>
<pre class="sourceCode python"><code class="sourceCode python"><span class="kw">def</span> save(<span class="ot">self</span>, *args, **kargs):
    <span class="ot">self</span>.post = markdown.markdown(<span class="ot">self</span>.post)
    <span class="dt">super</span>(Post, <span class="ot">self</span>).save()</code></pre>
<p>Bu yöntemin kötü yanı, eğer o yazıyı bir daha düzenlemek isterseniz, size markdown’ın eklediği html taglarıyla beraber gelecek. Yani yazıyı bir kere eklediniz mi, düzenlemek için yine html ile uğraşmanız gerekir. Kötü bir yöntem yani.</p>
<p>İkinci yöntem de, markdown fonksiyonu için bir template tag’ı oluşturup, istediğiniz yere uygulamanız. Bu yöntem her yönden çok daha mantıklı gözüküyor, hem istediğiniz şeye uygulayabilirsiniz. Bunun için markdown’u proje klasörüne kopyaladıktan sonra ayar dosyanızdan markdown’u ISTALLED_APPS altında eklemeniz gerekiyor. Daha sonra <a href="http://docs.djangoproject.com/en/dev/howto/custom-template-tags/">şu belgedeki</a> adımları izlemelisiniz. Ya da:</p>
<ul>
<li>markdown klasörünün altında templatetags klasörü oluşturursunuz.</li>
<li>markdown.py diye bir dosya açarsınız. İçine şu kodu yapıştırırsınız:</li>
</ul>
<pre class="sourceCode python"><code class="sourceCode python">    <span class="ch">from</span> django <span class="ch">import</span> template
    <span class="ch">from</span> ..markdown <span class="ch">import</span> markdown <span class="ch">as</span> Markdown
    <span class="ch">from</span> django.template.defaultfilters <span class="ch">import</span> stringfilter
    register = template.Library()
    <span class="ot">@register.filter</span> <span class="co"># detayli bilgi icin http://docs.djangoproject.com/en/dev/howto/custom-template-tags/</span>
    <span class="ot">@stringfilter</span> <span class="co"># sadece stringlerle calissin</span>
    <span class="kw">def</span> markdown(value):
        <span class="co">&quot;String&#39;i Markdown&#39;dan gecirir.&quot;</span>
        <span class="kw">return</span> Markdown(value)</code></pre>
<ul>
<li>Daha sonra template tagımızı kullanmak istediğimiz templateimize <code>{% load markdown %}</code> satırını ekleyip, hangi string’de kullanmak istiyorsak ona markdown filter’ını uygularsınız. Örneğin <code>{{ post|markdown|safe|escape }}</code>.</li>
</ul>
<p>Daha sonra <a href="http://daringfireball.net/projects/markdown/syntax">http://daringfireball.net/projects/markdown/syntax</a> adresindeki gibi yazarsınız. Eklenti desteği sayesinden markdown’a tablo bile çizdirebilirsiniz(eklenti klasörüne bakın).</p>]]></summary>
</entry>
<entry>
    <title>Python yapılacaklar listem</title>
    <link href="http://osa1.net/posts/2010-07-25-python-yapilacaklar-listem.html" />
    <id>http://osa1.net/posts/2010-07-25-python-yapilacaklar-listem.html</id>
    <published>2010-07-25T00:00:00Z</published>
    <updated>2010-07-25T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>
Kendime Python’da öğreneceklerim veya öğrenmem gerekenlerle alakalı bir liste oluşturdum ve Django ile aklımdaki birkaç şeyi daha uygulamaya sokar sokmaz bunlarla ilgileneceğim:
<ul>
<li>
<a href="http://docs.python.org/library/functions.html" rel="external">map, reduce, filter, iter, xrange</a> fonksiyonlarını kullanmayı öğrenmek. Aslında hepsini bir ara öğrenmiştim fakat neredeyse bir kere bile kullanmadım ve unuttum tabii ki.
</li>
<li>
<a href="http://wiki.python.org/moin/PythonDecorators" rel="external">Decorator</a> ve <a href="http://www.ibm.com/developerworks/linux/library/l-pymeta.html" rel="external">metaclass</a>. Gözümü korkutan iki konu. Kitaplarda genelde ileri seviye olduklarından ve bir müddet öğrenilmese de olur olduğundan(yok böyle cümle) bahsedilir.
</li>
<li>
<a href="http://docs.python.org/library/itertools.html" rel="external">itertools</a>.
</li>
<li>
Ve tabii ki OOP. Bildiğimi zannediyorum ama uygulamaya gelince kalıyorum açıkçası. Ne zaman bir sınıf yazsam sanki sözlüklerle çok daha kolay bir şekilde yapabilecekmişim gibi geliyor.
</li></ul>

]]></summary>
</entry>
<entry>
    <title>Yeni blog</title>
    <link href="http://osa1.net/posts/2010-07-05-yeni-blog.html" />
    <id>http://osa1.net/posts/2010-07-05-yeni-blog.html</id>
    <published>2010-07-05T00:00:00Z</published>
    <updated>2010-07-05T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>
Bir süredir Django öğreniyorum ve öğrendiklerimi uygulamaya koyma amacıyla basit bir blog şeysi yazmıştım. Daha sonra bir tasarım uydurdum ona ve bundan sonra buraya yazmaya devam edeceğim. Wordpress kadar rahat olmasa da, en azından bana Python kullanarak istediğim gibi geliştirme ve kendimi geliştirme imkanı sağlıyor.
</p>

<p>
Biraz altyapıdan bahsetmek gerekirse, Python 2.4 ve Django kullandım. Yönetim için Django’nun kendi admin eklentisini, yorumlar için yine Django’nun kendi yorum eklentisini kullandım. Programlama açısından geriye kalanları kendim programladım. Başlangıç için <a href="http://www.amazon.com/Definitive-Guide-Django-Development-Right/dp/1590597257/ref=sr_1_1?ie=UTF8&s=books&qid=1278315002&sr=8-1" rel="external">The Definitive Guide to Django(Apress)</a> kitabından faydalandım, birkaç bölümden sonra Django’nun <a href="http://www.djangoproject.com/" rel="external">kendi belgelerinden</a> yararlandım.
</p>

<p>
Tasarım kısmına gelince, o kadar çok yerden o kadar çok şey çaldım ki, ben bile hatırlayamıyorum. Aslında genel olarak altyapıyı ben yaptım fakat daha sonra geriye kalan detayları civardan çaldım. Aklıma geldiği kadarıyla kaynak belirteceğim:
<ul>
<li>
<a href="http://www.bioneural.net/2006/04/01/create-a-valid-css-alert-message/" rel="external">http://www.bioneural.net/2006/04/01/create-a-valid-css-alert-message/</a> adresinden mesaj kutusunu kullandım.
</li>
<li>
<a href="http://www.smileycat.com/miaow/archives/000230.php" rel="external">http://www.smileycat.com/miaow/archives/000230.php</a> adresinden menüleri yaptım.
</li>
<li>
Tabii ki olmazsa olmazlardan, <a href="http://www.smashingmagazine.com/2007/01/19/53-css-techniques-you-couldnt-live-without/" rel="external">Smashing Magazine’deki şu yazıdan</a> yararlandım. Artık tüm kaynakları hatırlayamıyorum
</li>
<li>
Bir de <a href="http://tympanus.net/codrops/2010/01/31/fresh-set-of-css-only-menus/" rel="external">http://tympanus.net/codrops/2010/01/31/fresh-set-of-css-only-menus/</a> adresinden üst menüyü yaptım.
</li>
<li>
Ve en önemlisi, altyapı için <a href="http://960.gs/" rel="external">960 grid system</a>’ı kullandım, işimi çok kolaylaştırdı, yoksa onu yapacak CSS bilgisine sahip değilim.
</li></ul></p>

<p>
Daha çok geliştirilmesi gerekiyor tabii ki, şimdilik aklıma gelenler, etiket bulutu, yazının içeriğine göre otomatik etiketleme, etiketlere göre alakalı yazıları bulabilme, yazı eklemek için daha gelişmiş bir editor(örneğin linkleri tanıyıp gerekli html kodlarını ekleyebilen).. Aslında bunların hiçbiri zor şeyler değil fakat Django bilgim henüz yeterli değil, Python kısmı kolay..
</p>

<p>
Yazı eklemeyi daha kolay hale getirebilmek için öncelikle yönetici panelinden girdiğim bir yazının veritabanına eklenmeden önce nasıl bir fonksiyona sokulabilir, çıktının veritabanına yazılabileceğini öğrenmem lazım. Yapabilirsem resim ve dosya ekleme özelliği de eklemek istiyorum. İşin arkaplanında düzenlenecek bir sürü kod var aslında, templatelerimin düzenlenmeye ihtiyacı var, view fonksiyonlarımda da pek çok kod tekrarı vs. var. Bir değişiklik yapmam gerektiğimde zorlanacağım.
</p>

<p>
Onun dışında, gördüğünüz hataları yorumlar kısmında belirtirseniz çok iyi olur..
</p>

<p>
Son olarak Python destekli sunucusunu kullanmama izin veren arkadaşım <a href="http://muhammetcan.net" rel="external">Muhammet</a>’e teşekkürler..
</p>

]]></summary>
</entry>

</feed>
