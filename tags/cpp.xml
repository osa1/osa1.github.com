<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>osa1.net - Posts tagged cpp</title>
    <link href="http://osa1.net/tags/cpp.xml" rel="self" />
    <link href="http://osa1.net" />
    <id>http://osa1.net/tags/cpp.xml</id>
    <author>
        <name>Ömer Sinan Ağacan</name>
        <email>omeragaca@gmail.com</email>
    </author>
    <updated>2013-06-08T00:00:00Z</updated>
    <entry>
    <title>Compiling Love2D with LuaJIT</title>
    <link href="http://osa1.net/posts/2013-06-08-compiling-love2d-with-luajit.html" />
    <id>http://osa1.net/posts/2013-06-08-compiling-love2d-with-luajit.html</id>
    <published>2013-06-08T00:00:00Z</published>
    <updated>2013-06-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>For some reason, I couldn’t load my dynamic library(compiled to <code>.so</code>) in Love2D linked with Lua 5.1.5. It was failing with <code>undefined symbol: lua_getfield</code> error. Interesting point is that I could load same library from directly in Lua 5.1.5 interpreter, which is the same thing as Love2D’s Lua interpreter. They’re compiled with same headers and linked with same object files.</p>
<p>I wasted several hours trying to compile Love2D with LuaJIT with the hope of loading my library from Love2D. I had tried loading my library from several different Lua versions before, Lua 5.1.5, Lua 5.2.5 and LuaJIT 2.0.2, and everything had worked perfectly. So I was expecting it to work with Love2D’s Lua interpreter too.</p>
<p>The problem was that Love2D’s configure script was not using environment variables to look for headers/object files. I was using same environment variables to build some other programs that use LuaJIT, and only Love2D had that problem.</p>
<p>To overcome this, I had to install LuaJIT to <code>/usr/</code>. There no way to compile Love2D with LuaJIT other than installing LuaJIT to <code>/usr/</code>. Installing <code>/usr/local/</code> doesn’t work. Setting environment variables(<code>LDFLAGS</code>, <code>LIBS</code> and <code>CPPFLAGS</code>) doesn’t work.</p>
<p>After that, I could compile Love2D. But that wasn’t enough because then generated executable was failing with <code>libluajit-5.1.so.2: cannot open shared object file: No such file or directory</code>. The reason of this error is latest version of LuaJIT generates a library file with different name: <code>libluajit-5.1.so.2.0.2</code>. This makes sense, I think most C/C++ libraries use same naming conventions.</p>
<p>Thankfully, renaming it works. Just rename that so file with required file.</p>
<p>I’m working on some Lua libraries written in C++, and testing gets painful when you can’t be sure which libraries you’re library is linked against. For this reason I don’t install Lua to <code>/usr</code> or <code>/usr/local</code>, and manually specify header/object file locations while compiling my library. So I removed all LuaJIT files from <code>/usr/lib</code>, <code>/usr/include</code>, etc. But to make Love2D work, I need <code>libluajit-5.1.so.2</code>. So I created a <code>lib</code> folder in my home dir, moved LuaJIT file there, and add that folder to <code>$LD_LIBRARY_PATH</code> environment variable. With this, I had a Love2D working with latest LuaJIT.</p>
<p>Hope this helps other people who want LuaJIT enabled Love2D on Linux.</p>]]></summary>
</entry>
<entry>
    <title>Implicit casts</title>
    <link href="http://osa1.net/posts/2013-05-25-implicit-casts.html" />
    <id>http://osa1.net/posts/2013-05-25-implicit-casts.html</id>
    <published>2013-05-25T00:00:00Z</published>
    <updated>2013-05-25T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I wrote a C++ code like this:</p>
<pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="dt">int</span> max_number_of_something = -<span class="dv">1</span>;
set&lt;some_type&gt; s;

...

<span class="kw">if</span> (s.size() &gt; max_number_of_something)
    max_number_of_something = s.size();</code></pre>
<p>The problem with this code is that this conditional will never be taken, and no errors will be raised either. This is because type of <code>s.size()</code> is unsigned and in the expression <code>s.size() &gt; max_number_of_something</code>, <code>max_number_of_something</code> will be casted to unsigned, implicitly. So <code>-1</code> is now <code>4294967295</code> and no other 32bit unsigned integer is bigger than that number.</p>
<p>Another reason to not to like weak typing and implicit type casts.</p>]]></summary>
</entry>

</feed>
