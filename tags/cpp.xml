<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>osa1.net - Posts tagged cpp</title>
    <link href="http://osa1.net/tags/cpp.xml" rel="self" />
    <link href="http://osa1.net" />
    <id>http://osa1.net/tags/cpp.xml</id>
    <author>
        <name>Ömer Sinan Ağacan</name>
        <email>omeragaca@gmail.com</email>
    </author>
    <updated>2013-10-09T00:00:00Z</updated>
    <entry>
    <title>Parametric polymorphism and unboxed representations</title>
    <link href="http://osa1.net/posts/2013-10-09-parametric-polymorphism-and-unboxed-repr.html" />
    <id>http://osa1.net/posts/2013-10-09-parametric-polymorphism-and-unboxed-repr.html</id>
    <published>2013-10-09T00:00:00Z</published>
    <updated>2013-10-09T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>This post was written 5 months ago – I just found it in my Github Gist archive and realized it’s not published. I’m publishing it now.</p>
<hr />
<p>It’s just occurred to me that we can’t have parametric polymorphism for unboxed values, unless that unboxed values share same layout in memory, or you duplicate polymorphic definition for each instance. This may be obvious for most of you but I just realized this while working on a Java project and found it interesting.</p>
<p>I think this is also the reason why we can’t instantiate generics in Java with primitive types.</p>
<p>Here’s an explanation:</p>
<p>Let’s think this C++ code:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" data-line-number="1"><span class="kw">struct</span> test<span class="dv">2</span></a>
<a class="sourceLine" id="cb1-2" data-line-number="2">{</a>
<a class="sourceLine" id="cb1-3" data-line-number="3">  <span class="dt">int</span> a, b;</a>
<a class="sourceLine" id="cb1-4" data-line-number="4">  test2(<span class="dt">int</span> a, <span class="dt">int</span> b) : a(a), b(b) {}</a>
<a class="sourceLine" id="cb1-5" data-line-number="5">};</a>
<a class="sourceLine" id="cb1-6" data-line-number="6"></a>
<a class="sourceLine" id="cb1-7" data-line-number="7"><span class="kw">struct</span> test<span class="dv">3</span></a>
<a class="sourceLine" id="cb1-8" data-line-number="8">{</a>
<a class="sourceLine" id="cb1-9" data-line-number="9">  <span class="dt">int</span> a, b, c;</a>
<a class="sourceLine" id="cb1-10" data-line-number="10">  test3(<span class="dt">int</span> a, <span class="dt">int</span> b, <span class="dt">int</span> c) : a(a), b(b), c(c) {}</a>
<a class="sourceLine" id="cb1-11" data-line-number="11">};</a>
<a class="sourceLine" id="cb1-12" data-line-number="12"></a>
<a class="sourceLine" id="cb1-13" data-line-number="13"><span class="dt">void</span> f2() {}</a>
<a class="sourceLine" id="cb1-14" data-line-number="14"></a>
<a class="sourceLine" id="cb1-15" data-line-number="15"><span class="kw">template</span>&lt;<span class="kw">typename</span> T&gt;</a>
<a class="sourceLine" id="cb1-16" data-line-number="16">T f3(T t)</a>
<a class="sourceLine" id="cb1-17" data-line-number="17">{</a>
<a class="sourceLine" id="cb1-18" data-line-number="18">  t.a = <span class="dv">20</span>;</a>
<a class="sourceLine" id="cb1-19" data-line-number="19">  <span class="cf">return</span> t;</a>
<a class="sourceLine" id="cb1-20" data-line-number="20">}</a>
<a class="sourceLine" id="cb1-21" data-line-number="21"></a>
<a class="sourceLine" id="cb1-22" data-line-number="22"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-23" data-line-number="23">{</a>
<a class="sourceLine" id="cb1-24" data-line-number="24">  test2 t2(<span class="dv">1</span>, <span class="dv">2</span>);</a>
<a class="sourceLine" id="cb1-25" data-line-number="25">  test3 t3(<span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>);</a>
<a class="sourceLine" id="cb1-26" data-line-number="26">  f3&lt;test2&gt;(t2);</a>
<a class="sourceLine" id="cb1-27" data-line-number="27">  f3&lt;test3&gt;(t3);</a>
<a class="sourceLine" id="cb1-28" data-line-number="28">  <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-29" data-line-number="29">}</a></code></pre></div>
<p>The key thing to realize here is that I’m passing parameter by value, ie. values are copied to function stack frame. But this function is still polymorphic on parameter type. This is possible in C++ because for each distinct instance of <code>f3</code>, a specialized code will be generated. To observe this, I put a breakpoint to that <code>f3</code> function and looked to disassembly output.</p>
<pre><code>        18	T f3(T t)
0x400af6  &lt;+0x0000&gt;         push   rbp
0x400af7  &lt;+0x0001&gt;         mov    rbp,rsp
0x400afa  &lt;+0x0004&gt;         mov    QWORD PTR [rbp-0x10],rdi
        19	{
        20	  t.a = 20;
0x400afe  &lt;+0x0008&gt;         mov    DWORD PTR [rbp-0x10],0x14
        21	  return t;
0x400b05  &lt;+0x000f&gt;         mov    rax,QWORD PTR [rbp-0x10]
        22	}
0x400b09  &lt;+0x0013&gt;         pop    rbp
0x400b0a  &lt;+0x0014&gt;         ret</code></pre>
<p>And this is for second call:</p>
<pre><code>        18	T f3(T t)
0x400b0b  &lt;+0x0000&gt;         push   rbp
0x400b0c  &lt;+0x0001&gt;         mov    rbp,rsp
0x400b0f  &lt;+0x0004&gt;         mov    rdx,rdi
0x400b12  &lt;+0x0007&gt;         mov    eax,esi
0x400b14  &lt;+0x0009&gt;         mov    QWORD PTR [rbp-0x20],rdx
0x400b18  &lt;+0x000d&gt;         mov    DWORD PTR [rbp-0x18],eax
        19	{
        20	  t.a = 20;
0x400b1b  &lt;+0x0010&gt;         mov    DWORD PTR [rbp-0x20],0x14
        21	  return t;
0x400b22  &lt;+0x0017&gt;         mov    rax,QWORD PTR [rbp-0x20]
0x400b26  &lt;+0x001b&gt;         mov    QWORD PTR [rbp-0x10],rax
0x400b2a  &lt;+0x001f&gt;         mov    eax,DWORD PTR [rbp-0x18]
0x400b2d  &lt;+0x0022&gt;         mov    DWORD PTR [rbp-0x8],eax
0x400b30  &lt;+0x0025&gt;         mov    rax,QWORD PTR [rbp-0x10]
0x400b34  &lt;+0x0029&gt;         mov    edx,DWORD PTR [rbp-0x8]
        22	}
0x400b37  &lt;+0x002c&gt;         pop    rbp
0x400b38  &lt;+0x002d&gt;         ret</code></pre>
<p>So what happened here is two new functions is generated from the definition, one with type <code>test2 f3(test2)</code> and one with type <code>test3 f3(test3)</code>. This gives a great opportunity, for instance, we can have this function:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb4-1" data-line-number="1"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb4-2" data-line-number="2"></a>
<a class="sourceLine" id="cb4-3" data-line-number="3"><span class="kw">template</span>&lt;<span class="kw">typename</span> T&gt;</a>
<a class="sourceLine" id="cb4-4" data-line-number="4">T someFun(T arg1, T arg2)</a>
<a class="sourceLine" id="cb4-5" data-line-number="5">{</a>
<a class="sourceLine" id="cb4-6" data-line-number="6">  <span class="cf">return</span> arg1 + arg2;</a>
<a class="sourceLine" id="cb4-7" data-line-number="7">}</a>
<a class="sourceLine" id="cb4-8" data-line-number="8"></a>
<a class="sourceLine" id="cb4-9" data-line-number="9"><span class="dt">int</span> main(<span class="dt">int</span> argc, <span class="at">const</span> <span class="dt">char</span> *argv[])</a>
<a class="sourceLine" id="cb4-10" data-line-number="10">{</a>
<a class="sourceLine" id="cb4-11" data-line-number="11">  <span class="bu">std::</span>cout &lt;&lt; someFun&lt;<span class="dt">int</span>&gt;(<span class="dv">1</span>, <span class="dv">2</span>) &lt;&lt; <span class="bu">std::</span>endl;</a>
<a class="sourceLine" id="cb4-12" data-line-number="12">  <span class="bu">std::</span>cout &lt;&lt; someFun&lt;<span class="dt">float</span>&gt;(<span class="fl">1.4</span>, <span class="dv">2</span>) &lt;&lt; <span class="bu">std::</span>endl;</a>
<a class="sourceLine" id="cb4-13" data-line-number="13"></a>
<a class="sourceLine" id="cb4-14" data-line-number="14">  <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb4-15" data-line-number="15">}</a></code></pre></div>
<p>..which is impossible to have in Java, without manually overloading the method definition.</p>
<p>(An off-topic but interesting note: I was expecting <code>SP</code> to be set here, but here it’s not set. I think the reason is that the compiler is clever enough to see there is no recursive calls, so no need to set <code>SP</code>, when I added a dummy function call in the middle of <code>f3</code>, <code>SP</code> is got set)</p>
<p>So in a way, C++ generics are gives us the most general way for parametric polymorphism. For any type you instantiated the template with, it generates a specialized definition. And if that definition is accepted by type checker, you’re fine.</p>
<p>This also why we don’t need a template definition like <code>template &lt;class C : HasY&gt;</code>. Because that <code>HasY</code> information is completely redundant. If specialized code is well-typed, than it’s OK.</p>
<p>This is also one of the reasons why compiling C++ programs takes that long.</p>]]></summary>
</entry>
<entry>
    <title>Compiling Love2D with LuaJIT</title>
    <link href="http://osa1.net/posts/2013-06-08-compiling-love2d-with-luajit.html" />
    <id>http://osa1.net/posts/2013-06-08-compiling-love2d-with-luajit.html</id>
    <published>2013-06-08T00:00:00Z</published>
    <updated>2013-06-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>For some reason, I couldn’t load my dynamic library(compiled to <code>.so</code>) in Love2D linked with Lua 5.1.5. It was failing with <code>undefined symbol: lua_getfield</code> error. Interesting point is that I could load same library from directly in Lua 5.1.5 interpreter, which is the same thing as Love2D’s Lua interpreter. They’re compiled with same headers and linked with same object files.</p>
<p>I wasted several hours trying to compile Love2D with LuaJIT with the hope of loading my library from Love2D. I had tried loading my library from several different Lua versions before, Lua 5.1.5, Lua 5.2.5 and LuaJIT 2.0.2, and everything had worked perfectly. So I was expecting it to work with Love2D’s Lua interpreter too.</p>
<p>The problem was that Love2D’s configure script was not using environment variables to look for headers/object files. I was using same environment variables to build some other programs that use LuaJIT, and only Love2D had that problem.</p>
<p>To overcome this, I had to install LuaJIT to <code>/usr/</code>. There no way to compile Love2D with LuaJIT other than installing LuaJIT to <code>/usr/</code>. Installing <code>/usr/local/</code> doesn’t work. Setting environment variables(<code>LDFLAGS</code>, <code>LIBS</code> and <code>CPPFLAGS</code>) doesn’t work.</p>
<p>After that, I could compile Love2D. But that wasn’t enough because then generated executable was failing with <code>libluajit-5.1.so.2: cannot open shared object file: No such file or directory</code>. The reason of this error is latest version of LuaJIT generates a library file with different name: <code>libluajit-5.1.so.2.0.2</code>. This makes sense, I think most C/C++ libraries use same naming conventions.</p>
<p>Thankfully, renaming it works. Just rename that so file with required file.</p>
<p>I’m working on some Lua libraries written in C++, and testing gets painful when you can’t be sure which libraries you’re library is linked against. For this reason I don’t install Lua to <code>/usr</code> or <code>/usr/local</code>, and manually specify header/object file locations while compiling my library. So I removed all LuaJIT files from <code>/usr/lib</code>, <code>/usr/include</code>, etc. But to make Love2D work, I need <code>libluajit-5.1.so.2</code>. So I created a <code>lib</code> folder in my home dir, moved LuaJIT file there, and add that folder to <code>$LD_LIBRARY_PATH</code> environment variable. With this, I had a Love2D working with latest LuaJIT.</p>
<p>Hope this helps other people who want LuaJIT enabled Love2D on Linux.</p>]]></summary>
</entry>
<entry>
    <title>Implicit casts</title>
    <link href="http://osa1.net/posts/2013-05-25-implicit-casts.html" />
    <id>http://osa1.net/posts/2013-05-25-implicit-casts.html</id>
    <published>2013-05-25T00:00:00Z</published>
    <updated>2013-05-25T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I wrote a C++ code like this:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" data-line-number="1"><span class="dt">int</span> max_number_of_something = <span class="dv">-1</span>;</a>
<a class="sourceLine" id="cb1-2" data-line-number="2">set&lt;<span class="dt">some_type</span>&gt; s;</a>
<a class="sourceLine" id="cb1-3" data-line-number="3"></a>
<a class="sourceLine" id="cb1-4" data-line-number="4">...</a>
<a class="sourceLine" id="cb1-5" data-line-number="5"></a>
<a class="sourceLine" id="cb1-6" data-line-number="6"><span class="cf">if</span> (s.size() &gt; max_number_of_something)</a>
<a class="sourceLine" id="cb1-7" data-line-number="7">    max_number_of_something = s.size();</a></code></pre></div>
<p>The problem with this code is that this conditional will never be taken, and no errors will be raised either. This is because type of <code>s.size()</code> is unsigned and in the expression <code>s.size() &gt; max_number_of_something</code>, <code>max_number_of_something</code> will be casted to unsigned, implicitly. So <code>-1</code> is now <code>4294967295</code> and no other 32bit unsigned integer is bigger than that number.</p>
<p>Another reason to not to like weak typing and implicit type casts.</p>]]></summary>
</entry>

</feed>
