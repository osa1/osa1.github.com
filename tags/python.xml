<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>osa1.net - Posts tagged python</title>
    <link href="http://osa1.net/tags/python.xml" rel="self" />
    <link href="http://osa1.net" />
    <id>http://osa1.net/tags/python.xml</id>
    <author>
        <name>Ömer Sinan Ağacan</name>
        <email>omeragaca@gmail.com</email>
    </author>
    <updated>2013-04-24T00:00:00Z</updated>
    <entry>
    <title>An interesting case of closures: is closed-over variable reference or value?</title>
    <link href="http://osa1.net/posts/2013-04-24-interesting-case-of-closures.html" />
    <id>http://osa1.net/posts/2013-04-24-interesting-case-of-closures.html</id>
    <published>2013-04-24T00:00:00Z</published>
    <updated>2013-04-24T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I discovered an interesting behavior of JavaScript’s closures while writing a nodejs script.</p>
<p>This behavior is pretty easy to observe when writing a nodejs application, because of it’s callback-based asynchronous nature, you’ll be writing callbacks all the time. Let’s say I’ll create a callback function which uses a variable defined in outer-scope, then do some actions using that variable:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb1-1" title="1"><span class="kw">var</span> callbacks <span class="op">=</span> []<span class="op">;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="kw">var</span> words <span class="op">=</span> [ <span class="st">&quot;foo&quot;</span><span class="op">,</span> <span class="st">&quot;bar&quot;</span><span class="op">,</span> <span class="st">&quot;baz&quot;</span> ]<span class="op">;</span></a>
<a class="sourceLine" id="cb1-3" title="3"></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="cf">for</span> (<span class="kw">var</span> idx <span class="kw">in</span> words) <span class="op">{</span></a>
<a class="sourceLine" id="cb1-5" title="5">    <span class="kw">var</span> say <span class="op">=</span> <span class="st">&quot;say &quot;</span> <span class="op">+</span> words[idx]<span class="op">;</span></a>
<a class="sourceLine" id="cb1-6" title="6">    <span class="va">callbacks</span>.<span class="at">push</span>(<span class="kw">function</span> () <span class="op">{</span></a>
<a class="sourceLine" id="cb1-7" title="7">        <span class="va">console</span>.<span class="at">log</span>(say)<span class="op">;</span></a>
<a class="sourceLine" id="cb1-8" title="8">    <span class="op">}</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb1-9" title="9"><span class="op">}</span></a>
<a class="sourceLine" id="cb1-10" title="10"></a>
<a class="sourceLine" id="cb1-11" title="11"><span class="cf">for</span> (<span class="kw">var</span> idx <span class="kw">in</span> callbacks) <span class="op">{</span></a>
<a class="sourceLine" id="cb1-12" title="12">    callbacks[idx]()<span class="op">;</span></a>
<a class="sourceLine" id="cb1-13" title="13"><span class="op">}</span></a></code></pre></div>
<p>What I expect from this program is to print <code>foo\nbar\nbaz</code>, but it instead prints <code>baz\nbaz\nbaz</code>. It’s like <code>say</code> variable used inside the callback is a reference and not a value. But it’s still strange because the reference should be local to for-loop’s body, so each <code>var say = ...</code> assignment should create a separate reference.</p>
<p>I find this behavior very counterintuitive. Before moving to solutions to fix this, I tried same program with several other languages.</p>
<p>Python also has this problem<a href="#fn1" class="footnote-ref" id="fnref1"><sup>1</sup></a>:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><a class="sourceLine" id="cb2-1" title="1">callbacks <span class="op">=</span> []</a>
<a class="sourceLine" id="cb2-2" title="2"></a>
<a class="sourceLine" id="cb2-3" title="3"><span class="cf">for</span> i <span class="kw">in</span> [<span class="st">&quot;foo&quot;</span>, <span class="st">&quot;bar&quot;</span>, <span class="st">&quot;baz&quot;</span>]:</a>
<a class="sourceLine" id="cb2-4" title="4">    say <span class="op">=</span> <span class="st">&quot;say &quot;</span> <span class="op">+</span> i</a>
<a class="sourceLine" id="cb2-5" title="5">    <span class="kw">def</span> callback():</a>
<a class="sourceLine" id="cb2-6" title="6">        <span class="bu">print</span> say</a>
<a class="sourceLine" id="cb2-7" title="7">    callbacks.append(callback)</a>
<a class="sourceLine" id="cb2-8" title="8"></a>
<a class="sourceLine" id="cb2-9" title="9"><span class="cf">for</span> c <span class="kw">in</span> callbacks:</a>
<a class="sourceLine" id="cb2-10" title="10">    c()</a></code></pre></div>
<p>This prints same wrong output as with JavaScript.</p>
<p>Lua, my favorite dynamic language, does great:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode lua"><code class="sourceCode lua"><a class="sourceLine" id="cb3-1" title="1">callbacks <span class="op">=</span> <span class="op">{}</span></a>
<a class="sourceLine" id="cb3-2" title="2"></a>
<a class="sourceLine" id="cb3-3" title="3"><span class="cf">for</span> <span class="cn">_</span><span class="op">,</span> v <span class="kw">in</span> <span class="fu">pairs</span><span class="op">({</span> <span class="st">&quot;foo&quot;</span><span class="op">,</span> <span class="st">&quot;bar&quot;</span><span class="op">,</span> <span class="st">&quot;baz&quot;</span> <span class="op">})</span> <span class="cf">do</span></a>
<a class="sourceLine" id="cb3-4" title="4">    <span class="kw">local</span> say <span class="op">=</span> <span class="st">&quot;say &quot;</span> <span class="op">..</span> v</a>
<a class="sourceLine" id="cb3-5" title="5">    <span class="fu">table.insert</span><span class="op">(</span>callbacks<span class="op">,</span> <span class="kw">function</span> <span class="op">()</span> <span class="fu">print</span><span class="op">(</span>say<span class="op">)</span> <span class="cf">end</span><span class="op">)</span></a>
<a class="sourceLine" id="cb3-6" title="6"><span class="cf">end</span></a>
<a class="sourceLine" id="cb3-7" title="7"></a>
<a class="sourceLine" id="cb3-8" title="8"><span class="cf">for</span> <span class="cn">_</span><span class="op">,</span> v <span class="kw">in</span> <span class="fu">pairs</span><span class="op">(</span>callbacks<span class="op">)</span> <span class="cf">do</span></a>
<a class="sourceLine" id="cb3-9" title="9">    v<span class="op">()</span></a>
<a class="sourceLine" id="cb3-10" title="10"><span class="cf">end</span></a></code></pre></div>
<p>It prints <code>foo\nbar\nbaz</code> as expected. Trying this in functional languages may be pointless, since variables are actually not <em>variables</em>(they’re immutable), but it may be still useful for demonstration purposes, here’s the Haskell code that works as expected:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb4-1" title="1"><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb4-2" title="2"></a>
<a class="sourceLine" id="cb4-3" title="3">main <span class="fu">=</span> <span class="fu">sequence_</span> callbacks</a>
<a class="sourceLine" id="cb4-4" title="4">  <span class="kw">where</span> callbacks <span class="fu">=</span> <span class="fu">map</span> (<span class="fu">putStrLn</span> <span class="fu">.</span> (<span class="st">&quot;say &quot;</span> <span class="fu">++</span> )) [ <span class="st">&quot;foo&quot;</span>, <span class="st">&quot;bar&quot;</span>, <span class="st">&quot;baz&quot;</span> ]</a></code></pre></div>
<p>I’ll show how to get JavaScript’s behavior in languages that handle this right, and in Haskell it’s harder to get this behavior because we will need to use reference cells explicitly.</p>
<p>I think in Python it’s more understandable, because it doesn’t have any scope declarations. ie. we can’t reason about <code>say</code> variable’s scope by the look of it. In JavaScript, we have <code>var</code> keyword that indicates a new variable is created in the scope. But it still works wrong.</p>
<p>Indeed, in JavaScript, the worst language ever, <code>var</code> keyword is just like any other strange JavaScript feature and works in an unexpected way:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb5-1" title="1"><span class="op">&gt;</span> <span class="cf">for</span> (<span class="kw">var</span> v <span class="kw">in</span> [ <span class="dv">1</span><span class="op">,</span> <span class="dv">2</span><span class="op">,</span> <span class="dv">3</span> ]) <span class="op">{</span> <span class="va">console</span>.<span class="at">log</span>(v)<span class="op">;</span> <span class="op">}</span></a>
<a class="sourceLine" id="cb5-2" title="2"><span class="dv">0</span></a>
<a class="sourceLine" id="cb5-3" title="3"><span class="dv">1</span></a>
<a class="sourceLine" id="cb5-4" title="4"><span class="dv">2</span></a>
<a class="sourceLine" id="cb5-5" title="5"><span class="op">&gt;</span> v</a>
<a class="sourceLine" id="cb5-6" title="6"><span class="st">&quot;2&quot;</span></a></code></pre></div>
<p>So one explanation of this behavior may be this: In Python, we don’t know the scope of variable and it looks like it’s global. So in closure, it works like a reference. And in JavaScript, <code>var</code> keyword is simply broken(and also variable inside closure works like reference).</p>
<h1 id="fixing-it">Fixing it</h1>
<p>Let’s fix that in JavaScript and Python.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb6-1" title="1"><span class="kw">var</span> callbacks <span class="op">=</span> []<span class="op">;</span></a>
<a class="sourceLine" id="cb6-2" title="2"><span class="kw">var</span> words <span class="op">=</span> [ <span class="st">&quot;foo&quot;</span><span class="op">,</span> <span class="st">&quot;bar&quot;</span><span class="op">,</span> <span class="st">&quot;baz&quot;</span> ]<span class="op">;</span></a>
<a class="sourceLine" id="cb6-3" title="3"></a>
<a class="sourceLine" id="cb6-4" title="4"><span class="cf">for</span> (<span class="kw">var</span> idx <span class="kw">in</span> words) <span class="op">{</span></a>
<a class="sourceLine" id="cb6-5" title="5">    <span class="kw">var</span> say <span class="op">=</span> <span class="st">&quot;say &quot;</span> <span class="op">+</span> words[idx]<span class="op">;</span></a>
<a class="sourceLine" id="cb6-6" title="6">    <span class="va">callbacks</span>.<span class="at">push</span>((<span class="kw">function</span> (say) <span class="op">{</span></a>
<a class="sourceLine" id="cb6-7" title="7">      <span class="cf">return</span> <span class="kw">function</span> () <span class="op">{</span></a>
<a class="sourceLine" id="cb6-8" title="8">        <span class="va">console</span>.<span class="at">log</span>(say)<span class="op">;</span></a>
<a class="sourceLine" id="cb6-9" title="9">      <span class="op">}</span></a>
<a class="sourceLine" id="cb6-10" title="10">    <span class="op">}</span>)(say))<span class="op">;</span></a>
<a class="sourceLine" id="cb6-11" title="11"><span class="op">}</span></a>
<a class="sourceLine" id="cb6-12" title="12"></a>
<a class="sourceLine" id="cb6-13" title="13"><span class="cf">for</span> (<span class="kw">var</span> idx <span class="kw">in</span> callbacks) <span class="op">{</span></a>
<a class="sourceLine" id="cb6-14" title="14">    callbacks[idx]()<span class="op">;</span></a>
<a class="sourceLine" id="cb6-15" title="15"><span class="op">}</span></a></code></pre></div>
<p>Here we’re creating a new scope with function(remember the JavaScript module pattern?), and then passing <code>say</code> variable to it. This guarantees that we have <code>say</code> variable local to the function. Then in callback returned by wrapper function, we have a reference just like before, but it’s not shared with any other functions.</p>
<p>In Python, there’s a cleaner way to do same thing:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode python"><code class="sourceCode python"><a class="sourceLine" id="cb7-1" title="1">callbacks <span class="op">=</span> []</a>
<a class="sourceLine" id="cb7-2" title="2"></a>
<a class="sourceLine" id="cb7-3" title="3"><span class="cf">for</span> i <span class="kw">in</span> [<span class="st">&quot;foo&quot;</span>, <span class="st">&quot;bar&quot;</span>, <span class="st">&quot;baz&quot;</span>]:</a>
<a class="sourceLine" id="cb7-4" title="4">    say <span class="op">=</span> <span class="st">&quot;say &quot;</span> <span class="op">+</span> i</a>
<a class="sourceLine" id="cb7-5" title="5">    <span class="kw">def</span> callback(say<span class="op">=</span>say):</a>
<a class="sourceLine" id="cb7-6" title="6">        <span class="bu">print</span> say</a>
<a class="sourceLine" id="cb7-7" title="7">    callbacks.append(callback)</a>
<a class="sourceLine" id="cb7-8" title="8"></a>
<a class="sourceLine" id="cb7-9" title="9"><span class="cf">for</span> c <span class="kw">in</span> callbacks:</a>
<a class="sourceLine" id="cb7-10" title="10">    c()</a></code></pre></div>
<p>Here the parameter is passed implicitly. (to me it’s still very strange and it shouldn’t be working, but for now I’ll just keep this post short)</p>
<h1 id="breaking-it">Breaking it</h1>
<p>Let’s have JavaScript’s behavior in Haskell:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb8-1" title="1"><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb8-2" title="2"></a>
<a class="sourceLine" id="cb8-3" title="3"><span class="kw">import</span> <span class="dt">Data.IORef</span></a>
<a class="sourceLine" id="cb8-4" title="4"></a>
<a class="sourceLine" id="cb8-5" title="5">printFromRef r <span class="fu">=</span> <span class="fu">putStrLn</span> <span class="fu">=&lt;&lt;</span> readIORef r</a>
<a class="sourceLine" id="cb8-6" title="6"></a>
<a class="sourceLine" id="cb8-7" title="7">mkCallbacks (w<span class="fu">:</span>ws) <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb8-8" title="8">    ref <span class="ot">&lt;-</span> newIORef w</a>
<a class="sourceLine" id="cb8-9" title="9">    r   <span class="ot">&lt;-</span> iter ref ws</a>
<a class="sourceLine" id="cb8-10" title="10">    <span class="fu">return</span> <span class="fu">$</span> printFromRef ref <span class="fu">:</span> r</a>
<a class="sourceLine" id="cb8-11" title="11">  <span class="kw">where</span> iter ref []     <span class="fu">=</span> <span class="fu">return</span> []</a>
<a class="sourceLine" id="cb8-12" title="12">        iter ref (w<span class="fu">:</span>ws) <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb8-13" title="13">          writeIORef ref w</a>
<a class="sourceLine" id="cb8-14" title="14">          cs <span class="ot">&lt;-</span> iter ref ws</a>
<a class="sourceLine" id="cb8-15" title="15">          <span class="fu">return</span> <span class="fu">$</span> printFromRef ref <span class="fu">:</span> cs</a>
<a class="sourceLine" id="cb8-16" title="16"></a>
<a class="sourceLine" id="cb8-17" title="17">main <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb8-18" title="18">  callbacks <span class="ot">&lt;-</span> mkCallbacks [ <span class="st">&quot;foo&quot;</span>, <span class="st">&quot;bar&quot;</span>, <span class="st">&quot;baz&quot;</span> ]</a>
<a class="sourceLine" id="cb8-19" title="19">  <span class="fu">sequence_</span> callbacks</a></code></pre></div>
<p>The reason this code is that long is because we need to create and pass references explicitly.</p>
<section class="footnotes">
<hr />
<ol>
<li id="fn1"><p>Calling this behavior <em>problem</em> may be a bit wrong, maybe it’s just a design decision. To me it’s a <em>problem</em> because this behavior is really counterintuitive.<a href="#fnref1" class="footnote-back">↩</a></p></li>
</ol>
</section>]]></summary>
</entry>
<entry>
    <title>Micro-Manual for Lisp in Python</title>
    <link href="http://osa1.net/posts/2012-03-23-micro-manual-lisp-python.html" />
    <id>http://osa1.net/posts/2012-03-23-micro-manual-lisp-python.html</id>
    <published>2012-03-23T00:00:00Z</published>
    <updated>2012-03-23T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I was reading some papers about first Lisps and their implementations, and I came across with <a href="http://en.wikipedia.org/wiki/John_McCarthy_(computer_scientist)">John McCarthy</a>’s <a href="http://www.ee.ryerson.ca/~elf/pub/misc/micromanualLISP.pdf">A Micro-Manual for Lisp - Not the Whole Truth</a>. I had heard about it some time ago but never read the paper, and as a programming exercise, I implemented in Python within an hour or so.</p>
<p>If you’re into Lisps, I highly recommend you <a href="http://www-formal.stanford.edu/jmc/recursive.html">Recursive Functions of Symbolic Expressions and their Computation by Machine (Part I)</a> and the micro-manual. What I really love about micro-manual is that it’s a great way to see simplicity in original Lisp. With just 9 forms you have a working Lisp system. It also introduces it’s own <code>eval</code> function in Lisp.</p>
<p>In the rest of the post, when I use <code>Lisp</code>, I’ll be mentioning the Lisp in micro-manual, not the modern dialects.</p>
<p>Lisp programs are formed by symbolic expressions(s-exps, sexps, sexprs), and a sexp is either a <code>list</code> or an <code>atom</code>. Before interpreting our Lisp, we should read sexps and convert them into a form that we can work on with our host language(in my case, it’s Python).</p>
<p>I’ll convert Lisp lists into ordinary Python lists, and atoms into Python strings. My reader has two parts, the first part is getting the input and parsing tokens:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><a class="sourceLine" id="cb1-1" title="1"><span class="kw">class</span> Reader:</a>
<a class="sourceLine" id="cb1-2" title="2">    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, form):</a>
<a class="sourceLine" id="cb1-3" title="3">        <span class="va">self</span>.form <span class="op">=</span> form</a>
<a class="sourceLine" id="cb1-4" title="4">        <span class="va">self</span>.index <span class="op">=</span> <span class="dv">0</span></a>
<a class="sourceLine" id="cb1-5" title="5">    <span class="kw">def</span> seek_char(<span class="va">self</span>):</a>
<a class="sourceLine" id="cb1-6" title="6">        <span class="cf">if</span> <span class="va">self</span>.index <span class="op">&gt;=</span> <span class="bu">len</span>(<span class="va">self</span>.form):</a>
<a class="sourceLine" id="cb1-7" title="7">            <span class="cf">return</span> <span class="va">None</span></a>
<a class="sourceLine" id="cb1-8" title="8">        <span class="cf">return</span> <span class="va">self</span>.form[<span class="va">self</span>.index]</a>
<a class="sourceLine" id="cb1-9" title="9">    <span class="kw">def</span> unread_char(<span class="va">self</span>):</a>
<a class="sourceLine" id="cb1-10" title="10">        <span class="va">self</span>.index <span class="op">-=</span> <span class="dv">1</span></a>
<a class="sourceLine" id="cb1-11" title="11">    <span class="kw">def</span> read_char(<span class="va">self</span>):</a>
<a class="sourceLine" id="cb1-12" title="12">        <span class="cf">if</span> <span class="va">self</span>.index <span class="op">&gt;=</span> <span class="bu">len</span>(<span class="va">self</span>.form):</a>
<a class="sourceLine" id="cb1-13" title="13">            <span class="cf">return</span> <span class="va">None</span></a>
<a class="sourceLine" id="cb1-14" title="14">        <span class="va">self</span>.index <span class="op">+=</span> <span class="dv">1</span></a>
<a class="sourceLine" id="cb1-15" title="15">        <span class="cf">return</span> <span class="va">self</span>.form[<span class="va">self</span>.index<span class="dv">-1</span>]</a>
<a class="sourceLine" id="cb1-16" title="16">    <span class="kw">def</span> read_token(<span class="va">self</span>):</a>
<a class="sourceLine" id="cb1-17" title="17">        ch <span class="op">=</span> <span class="va">self</span>.read_char()</a>
<a class="sourceLine" id="cb1-18" title="18">        <span class="cf">if</span> ch <span class="op">==</span> <span class="st">&#39;(&#39;</span>:</a>
<a class="sourceLine" id="cb1-19" title="19">            <span class="cf">return</span> <span class="st">&#39;(&#39;</span></a>
<a class="sourceLine" id="cb1-20" title="20">        <span class="cf">elif</span> ch <span class="op">==</span> <span class="st">&#39;)&#39;</span>:</a>
<a class="sourceLine" id="cb1-21" title="21">            <span class="cf">if</span> <span class="va">self</span>.seek_char() <span class="op">==</span> <span class="st">&#39; &#39;</span>:</a>
<a class="sourceLine" id="cb1-22" title="22">                <span class="va">self</span>.read_char()</a>
<a class="sourceLine" id="cb1-23" title="23">            <span class="cf">return</span> <span class="st">&#39;)&#39;</span></a>
<a class="sourceLine" id="cb1-24" title="24">        <span class="cf">else</span>:</a>
<a class="sourceLine" id="cb1-25" title="25">            buf <span class="op">=</span> <span class="st">&#39;&#39;</span></a>
<a class="sourceLine" id="cb1-26" title="26">            <span class="cf">while</span> ch <span class="op">!=</span> <span class="st">&#39; &#39;</span> <span class="kw">and</span> ch <span class="op">!=</span> <span class="va">None</span>:</a>
<a class="sourceLine" id="cb1-27" title="27">                <span class="cf">if</span> ch <span class="op">==</span> <span class="st">&#39;)&#39;</span>:</a>
<a class="sourceLine" id="cb1-28" title="28">                    <span class="va">self</span>.unread_char()</a>
<a class="sourceLine" id="cb1-29" title="29">                    <span class="cf">return</span> buf</a>
<a class="sourceLine" id="cb1-30" title="30">                <span class="cf">else</span>:</a>
<a class="sourceLine" id="cb1-31" title="31">                    buf <span class="op">+=</span> ch</a>
<a class="sourceLine" id="cb1-32" title="32">                    ch <span class="op">=</span> <span class="va">self</span>.read_char()</a>
<a class="sourceLine" id="cb1-33" title="33">            <span class="cf">return</span> buf</a></code></pre></div>
<p>Well, it may not be the best way to parse an input to tokens, but it works great. It return a <code>(</code>, <code>)</code>, or a string each time you call <code>read_token</code>. When we read <code>(</code>, we start collecting a list, until reading a <code>)</code>(we should also consider lists into lists):</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><a class="sourceLine" id="cb2-1" title="1"><span class="kw">def</span> read_list(reader):</a>
<a class="sourceLine" id="cb2-2" title="2">    result <span class="op">=</span> []</a>
<a class="sourceLine" id="cb2-3" title="3">    token <span class="op">=</span> reader.read_token()</a>
<a class="sourceLine" id="cb2-4" title="4">    <span class="cf">while</span> token:</a>
<a class="sourceLine" id="cb2-5" title="5">        <span class="cf">if</span> token <span class="op">==</span> <span class="st">&#39;(&#39;</span>:</a>
<a class="sourceLine" id="cb2-6" title="6">            result.append(read_list(reader))</a>
<a class="sourceLine" id="cb2-7" title="7">        <span class="cf">elif</span> token <span class="op">==</span> <span class="st">&#39;)&#39;</span>:</a>
<a class="sourceLine" id="cb2-8" title="8">            <span class="cf">return</span> result</a>
<a class="sourceLine" id="cb2-9" title="9">        <span class="cf">else</span>:</a>
<a class="sourceLine" id="cb2-10" title="10">            result.append(token)</a>
<a class="sourceLine" id="cb2-11" title="11">        token <span class="op">=</span> reader.read_token()</a>
<a class="sourceLine" id="cb2-12" title="12">    <span class="cf">return</span> result</a></code></pre></div>
<p><code>read_atom</code> functions is easier, since each each atom is also a token:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><a class="sourceLine" id="cb3-1" title="1"><span class="kw">def</span> read_atom(reader):</a>
<a class="sourceLine" id="cb3-2" title="2">    <span class="cf">return</span> reader.read_token()</a></code></pre></div>
<p>At this point, we have a Lisp reader that reading s-expressions, converting lists to Python lists and atoms to Python strings. Now we can define our 9 primitive procedures(<code>quote</code>, <code>car</code>, <code>cdr</code>, <code>cons</code>, <code>equal</code>, <code>atom</code>, <code>cond</code>, <code>lambda</code>, <code>label</code>):</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><a class="sourceLine" id="cb4-1" title="1"><span class="kw">def</span> quote(e):</a>
<a class="sourceLine" id="cb4-2" title="2">    <span class="cf">return</span> e</a>
<a class="sourceLine" id="cb4-3" title="3"><span class="kw">def</span> car(e):</a>
<a class="sourceLine" id="cb4-4" title="4">    <span class="cf">assert</span> <span class="bu">isinstance</span>(e, <span class="bu">list</span>)</a>
<a class="sourceLine" id="cb4-5" title="5">    <span class="cf">return</span> e[<span class="op">^</span><span class="dv">0</span>]<span class="kw">def</span> cdr(e):</a>
<a class="sourceLine" id="cb4-6" title="6">    <span class="cf">assert</span> <span class="bu">isinstance</span>(e, <span class="bu">list</span>)</a>
<a class="sourceLine" id="cb4-7" title="7">    <span class="cf">return</span> e[<span class="dv">1</span>:]</a>
<a class="sourceLine" id="cb4-8" title="8"><span class="kw">def</span> cons(e1, e2):</a>
<a class="sourceLine" id="cb4-9" title="9">    <span class="cf">if</span> <span class="bu">isinstance</span>(e2, <span class="bu">list</span>):</a>
<a class="sourceLine" id="cb4-10" title="10">        <span class="cf">return</span> [e1] <span class="op">+</span> e2</a>
<a class="sourceLine" id="cb4-11" title="11">    <span class="cf">return</span> [e1, e2]</a>
<a class="sourceLine" id="cb4-12" title="12"><span class="kw">def</span> equal(e1, e2):</a>
<a class="sourceLine" id="cb4-13" title="13">    <span class="cf">return</span> e1 <span class="op">==</span> e2</a>
<a class="sourceLine" id="cb4-14" title="14"><span class="kw">def</span> atom(e):</a>
<a class="sourceLine" id="cb4-15" title="15">    <span class="cf">return</span> <span class="kw">not</span> <span class="bu">isinstance</span>(e, <span class="bu">list</span>)</a></code></pre></div>
<p>These are obvious. Since I’ve already converted sexp lists into Python lists, all I need to do is to call some Python list methods.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode python"><code class="sourceCode python"><a class="sourceLine" id="cb5-1" title="1"><span class="kw">def</span> cond(<span class="op">*</span>cases):</a>
<a class="sourceLine" id="cb5-2" title="2">    <span class="cf">for</span> case <span class="kw">in</span> cases:</a>
<a class="sourceLine" id="cb5-3" title="3">        <span class="cf">if</span> eval_(case[<span class="op">^</span><span class="dv">0</span>] <span class="kw">is</span> <span class="kw">not</span> <span class="va">None</span>:</a>
<a class="sourceLine" id="cb5-4" title="4">            <span class="cf">for</span> expr <span class="kw">in</span> cdr(case)[:<span class="op">-</span><span class="dv">1</span>]:</a>
<a class="sourceLine" id="cb5-5" title="5">                eval_(expr)</a>
<a class="sourceLine" id="cb5-6" title="6">            <span class="cf">return</span> eval_(case[<span class="op">-</span><span class="dv">1</span>])</a>
<a class="sourceLine" id="cb5-7" title="7">    <span class="cf">return</span> <span class="va">None</span></a></code></pre></div>
<p>An important point here is that in <code>cond</code>, I’m not evaluating all expressions, but I’m evaluating the test forms until I find a form that evaluates something that’s not <code>nil</code>, and then evaluating it’s form.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode python"><code class="sourceCode python"><a class="sourceLine" id="cb6-1" title="1"><span class="kw">def</span> lambda_(args, <span class="op">*</span>exprs):</a>
<a class="sourceLine" id="cb6-2" title="2">    <span class="kw">def</span> fn(<span class="op">*</span>arg_vals):</a>
<a class="sourceLine" id="cb6-3" title="3">        fn_env <span class="op">=</span> {k:v <span class="cf">for</span> (k, v) <span class="kw">in</span> <span class="bu">zip</span>(args, arg_vals)}</a>
<a class="sourceLine" id="cb6-4" title="4">        fn_env[<span class="st">&#39;parent_env&#39;</span>] <span class="op">=</span> env</a>
<a class="sourceLine" id="cb6-5" title="5">        <span class="cf">for</span> expr <span class="kw">in</span> exprs[:<span class="op">-</span><span class="dv">1</span>]:</a>
<a class="sourceLine" id="cb6-6" title="6">            eval_(expr, fn_env)</a>
<a class="sourceLine" id="cb6-7" title="7">        <span class="cf">return</span> eval_(exprs[<span class="op">-</span><span class="dv">1</span>], fn_env)</a>
<a class="sourceLine" id="cb6-8" title="8">    <span class="cf">return</span> fn</a>
<a class="sourceLine" id="cb6-9" title="9"><span class="kw">def</span> label(name, lambda_exp, <span class="op">*</span>exprs):</a>
<a class="sourceLine" id="cb6-10" title="10">    func <span class="op">=</span> eval_(lambda_exp)</a>
<a class="sourceLine" id="cb6-11" title="11">    label_env <span class="op">=</span> env.copy()</a>
<a class="sourceLine" id="cb6-12" title="12">    label_env[name] <span class="op">=</span> func</a>
<a class="sourceLine" id="cb6-13" title="13">    <span class="cf">for</span> exp <span class="kw">in</span> exprs[:<span class="op">-</span><span class="dv">1</span>]:</a>
<a class="sourceLine" id="cb6-14" title="14">        eval_(exp, label_env)</a>
<a class="sourceLine" id="cb6-15" title="15">    <span class="cf">return</span> eval_(exprs[<span class="op">-</span><span class="dv">1</span>], label_env)</a></code></pre></div>
<p><code>label</code> is a way to name lambdas, so you can create recursive functions. I’m creating a new environment for each label, and connecting it to the parent environment.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode python"><code class="sourceCode python"><a class="sourceLine" id="cb7-1" title="1">env <span class="op">=</span> {<span class="st">&#39;quote&#39;</span>: quote,</a>
<a class="sourceLine" id="cb7-2" title="2">       <span class="st">&#39;car&#39;</span>: car,</a>
<a class="sourceLine" id="cb7-3" title="3">       <span class="st">&#39;cdr&#39;</span>: cdr,</a>
<a class="sourceLine" id="cb7-4" title="4">       <span class="st">&#39;cons&#39;</span>: cons,</a>
<a class="sourceLine" id="cb7-5" title="5">       <span class="st">&#39;equal&#39;</span>: equal,</a>
<a class="sourceLine" id="cb7-6" title="6">       <span class="st">&#39;atom&#39;</span>: atom,</a>
<a class="sourceLine" id="cb7-7" title="7">       <span class="st">&#39;cond&#39;</span>: cond,</a>
<a class="sourceLine" id="cb7-8" title="8">       <span class="st">&#39;lambda&#39;</span>: Lambda,</a>
<a class="sourceLine" id="cb7-9" title="9">       <span class="st">&#39;label&#39;</span>: label,</a>
<a class="sourceLine" id="cb7-10" title="10">       <span class="st">&#39;defun&#39;</span>: defun}</a></code></pre></div>
<p>The global environment. When an atom is evaluated, it’s value is searched in here, with this function:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode python"><code class="sourceCode python"><a class="sourceLine" id="cb8-1" title="1"><span class="kw">def</span> search_in_env(env, key):</a>
<a class="sourceLine" id="cb8-2" title="2">    val <span class="op">=</span> env.get(key)</a>
<a class="sourceLine" id="cb8-3" title="3">    <span class="cf">if</span> val:</a>
<a class="sourceLine" id="cb8-4" title="4">        <span class="cf">return</span> val</a>
<a class="sourceLine" id="cb8-5" title="5">    <span class="cf">if</span> env.has_key(<span class="st">&#39;parent_env&#39;</span>):</a>
<a class="sourceLine" id="cb8-6" title="6">        <span class="cf">return</span> search_in_env(env[<span class="st">&#39;parent_env&#39;</span>], key)</a>
<a class="sourceLine" id="cb8-7" title="7">    <span class="cf">raise</span> <span class="pp">KeyError</span>(key)</a></code></pre></div>
<p>Since each environment may be connected to a parent environment(the case of <code>label</code>), we should search all the chain of environments.</p>
<p>So now we have the Lisp described in the micro-manual, we only need the eval:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode python"><code class="sourceCode python"><a class="sourceLine" id="cb9-1" title="1"><span class="kw">def</span> eval_(exp, env<span class="op">=</span>env):</a>
<a class="sourceLine" id="cb9-2" title="2">    <span class="co"># print &quot;evaluating: %s&quot; % str(exp)</span></a>
<a class="sourceLine" id="cb9-3" title="3">    <span class="cf">if</span> <span class="bu">isinstance</span>(exp, <span class="bu">list</span>):</a>
<a class="sourceLine" id="cb9-4" title="4">        <span class="cf">if</span> <span class="bu">isinstance</span>(exp[<span class="op">^</span><span class="dv">0</span>] <span class="bu">list</span>):</a>
<a class="sourceLine" id="cb9-5" title="5">            op <span class="op">=</span> eval_(exp[<span class="op">^</span><span class="dv">0</span>]</a>
<a class="sourceLine" id="cb9-6" title="6">        <span class="cf">else</span>:</a>
<a class="sourceLine" id="cb9-7" title="7">            op <span class="op">=</span> search_in_env(env, exp[<span class="op">^</span><span class="dv">0</span>]</a>
<a class="sourceLine" id="cb9-8" title="8">        <span class="cf">if</span> op <span class="kw">in</span> [quote, cond, lambda_, label, defun]:</a>
<a class="sourceLine" id="cb9-9" title="9">            <span class="cf">return</span> <span class="bu">apply</span>(op, exp[<span class="dv">1</span>:])</a>
<a class="sourceLine" id="cb9-10" title="10">        <span class="cf">return</span> <span class="bu">apply</span>(op, [eval_(e, env) <span class="cf">for</span> e <span class="kw">in</span> exp[<span class="dv">1</span>:]])</a>
<a class="sourceLine" id="cb9-11" title="11">    <span class="cf">return</span> search_in_env(env, exp)</a></code></pre></div>
<p>And some helpers for REPL:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode python"><code class="sourceCode python"><a class="sourceLine" id="cb10-1" title="1"><span class="kw">def</span> eval_from_string(string):</a>
<a class="sourceLine" id="cb10-2" title="2">    <span class="cf">return</span> eval_(read(Reader(string)))</a>
<a class="sourceLine" id="cb10-3" title="3"><span class="kw">def</span> expr_repr(expr):</a>
<a class="sourceLine" id="cb10-4" title="4">    <span class="cf">if</span> <span class="bu">isinstance</span>(expr, <span class="bu">list</span>):</a>
<a class="sourceLine" id="cb10-5" title="5">        <span class="cf">return</span> <span class="st">&#39;(&#39;</span> <span class="op">+</span> <span class="st">&#39; &#39;</span>.join([expr_repr(e) <span class="cf">for</span> e <span class="kw">in</span> expr]) <span class="op">+</span> <span class="st">&#39;)&#39;</span></a>
<a class="sourceLine" id="cb10-6" title="6">    <span class="cf">elif</span> <span class="bu">isinstance</span>(expr, <span class="bu">bool</span>):</a>
<a class="sourceLine" id="cb10-7" title="7">        <span class="cf">if</span> expr:</a>
<a class="sourceLine" id="cb10-8" title="8">            <span class="cf">return</span> <span class="st">&#39;T&#39;</span></a>
<a class="sourceLine" id="cb10-9" title="9">        <span class="cf">return</span> <span class="st">&#39;nil&#39;</span></a>
<a class="sourceLine" id="cb10-10" title="10">    <span class="cf">return</span> <span class="bu">str</span>(expr)</a>
<a class="sourceLine" id="cb10-11" title="11"><span class="kw">def</span> repl():</a>
<a class="sourceLine" id="cb10-12" title="12">    <span class="cf">while</span> <span class="va">True</span>:</a>
<a class="sourceLine" id="cb10-13" title="13">        <span class="cf">try</span>:</a>
<a class="sourceLine" id="cb10-14" title="14">            <span class="bu">input</span> <span class="op">=</span> <span class="bu">raw_input</span>(<span class="st">&quot;&gt; &quot;</span>)</a>
<a class="sourceLine" id="cb10-15" title="15">            <span class="bu">print</span> expr_repr(eval_(read(Reader(<span class="bu">input</span>))))</a>
<a class="sourceLine" id="cb10-16" title="16">        <span class="cf">except</span> (<span class="pp">KeyboardInterrupt</span>, <span class="pp">EOFError</span>):</a>
<a class="sourceLine" id="cb10-17" title="17">            <span class="cf">return</span></a></code></pre></div>
<p>I also wrote some unit-tests based on examples in the paper. You can read the implementation and tests from <a href="https://gist.github.com/2147404">the gist</a>. To run the interpreter, just save the code and run <code>python lisp.py</code>.</p>]]></summary>
</entry>
<entry>
    <title>ctpop ve bitmapler</title>
    <link href="http://osa1.net/posts/2011-12-31-ctpop-ve-bitmapler.html" />
    <id>http://osa1.net/posts/2011-12-31-ctpop-ve-bitmapler.html</id>
    <published>2011-12-31T00:00:00Z</published>
    <updated>2011-12-31T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Bugün çok fantastik birşey gördüm, anlatmazsam ölürüm(uygun bir başlık düşünmem tüm yazıyı yazmamdan daha uzun sürdü o yüzden idare edin hehe).</p>
<p>Diyelim ki bir veri yapısı tasarlıyoruz, bir nodedan bir sürü başka nodea veya elemana pointerlar olacak. Bir yandan da bellek kullanımını minimum tutmak istiyoruz. Pointerları tutan arrayimizde hiç boş yer olmamalı.</p>
<p>Bir bitmap tutuyoruz. Büyük ihtimalle integer oluyor(Java primitive int tipi 32bit olmak zorunda mesela). Diyelim ki bu node’un n. indexine bir eleman/pointer ekleyeceksiniz. Bitmap ilk başta 0 tabii. Şu şekilde bitmap’de ilgili elemanı 1 yapıyoruz:</p>
<pre><code>bmp = bmp | 1 &lt;&lt; n</code></pre>
<p>Buraya kadar herşey çok basit. Bu noktadan sonra bu bitmape göre 30. elemanın arrayde nereye denk geldiğini bulmamız lazım. Bunun için şu formülü kullanıyoruz:</p>
<pre><code>ctpop(bmp &amp; ((1&lt;&lt;n)-1))</code></pre>
<p><code>ctpop</code>, population count fonksiyonu, yani bir sayının iki tabanında gösterilişindeki 1 bitleri sayıyor. Bu Java’da <code>Integer.bitCount</code> fonksiyonu(öhm, static methodu) ile bulunabilir.</p>
<p>Birkaç deneme yaparak nasıl yaptığını anlayabilir ve kendimizi ikna edebiliriz:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><a class="sourceLine" id="cb3-1" title="1">In [<span class="op">^</span><span class="dv">2</span>]: bmp <span class="op">=</span> <span class="dv">0</span></a>
<a class="sourceLine" id="cb3-2" title="2">In [<span class="op">^</span><span class="dv">3</span>]: bmp <span class="op">|=</span> <span class="dv">1</span> <span class="op">&lt;&lt;</span> <span class="dv">15</span></a>
<a class="sourceLine" id="cb3-3" title="3">In [<span class="op">^</span><span class="dv">4</span>]: ctpop(bmp <span class="op">&amp;</span> ((<span class="dv">1</span><span class="op">&lt;&lt;</span><span class="dv">15</span>)<span class="op">-</span><span class="dv">1</span>))</a>
<a class="sourceLine" id="cb3-4" title="4">Out[<span class="op">^</span><span class="dv">4</span>]: <span class="dv">0</span></a>
<a class="sourceLine" id="cb3-5" title="5">In [<span class="op">^</span><span class="dv">5</span>]: bmp <span class="op">|=</span> <span class="dv">1</span> <span class="op">&lt;&lt;</span> <span class="dv">21</span></a>
<a class="sourceLine" id="cb3-6" title="6">In [<span class="op">^</span><span class="dv">6</span>]: bmp <span class="op">|=</span> <span class="dv">1</span> <span class="op">&lt;&lt;</span> <span class="dv">10</span></a>
<a class="sourceLine" id="cb3-7" title="7">In [<span class="op">^</span><span class="dv">7</span>]: ctpop(bmp <span class="op">&amp;</span> ((<span class="dv">1</span><span class="op">&lt;&lt;</span><span class="dv">10</span>)<span class="op">-</span><span class="dv">1</span>))</a>
<a class="sourceLine" id="cb3-8" title="8">Out[<span class="op">^</span><span class="dv">7</span>]: <span class="dv">0</span></a>
<a class="sourceLine" id="cb3-9" title="9">In [<span class="op">^</span><span class="dv">8</span>]: ctpop(bmp <span class="op">&amp;</span> ((<span class="dv">1</span><span class="op">&lt;&lt;</span><span class="dv">15</span>)<span class="op">-</span><span class="dv">1</span>))</a>
<a class="sourceLine" id="cb3-10" title="10">Out[<span class="op">^</span><span class="dv">8</span>]: <span class="dv">1</span></a>
<a class="sourceLine" id="cb3-11" title="11">In [<span class="op">^</span><span class="dv">9</span>]: ctpop(bmp <span class="op">&amp;</span> ((<span class="dv">1</span><span class="op">&lt;&lt;</span><span class="dv">21</span>)<span class="op">-</span><span class="dv">1</span>))</a>
<a class="sourceLine" id="cb3-12" title="12">Out[<span class="op">^</span><span class="dv">9</span>]: <span class="dv">2</span></a></code></pre></div>
<p>Eğer arraydeki n. yere bir eleman ekliyorsak, n’den itibaren arrayi bir kaydırmamız lazım. En büyük index her zaman arrayde de daha sonda oluyor.</p>
<p>Ne yaptığına bakalım. 25. elemanın arraydeki yerine bakarken, <code>1 &lt;&lt; 25</code>i hesaplıyorum ki bu aslında (2 tabanında) 1 ve yanına 25 tane 0 koymak demek. Daha sonra bu sayıdan 1 çıkararak, en sağdan itibaren(en anlamsız bitten itibaren) tüm 0ları 1 yapıyorum, ilk gördüğüm 1’i 0 yapıyorum, gerisine dokunmuyorum(bu şartlar altında geriye kalan tüm bitler 0 oluyor). Daha sonra bu sayı ile bitmap’i logical and(bazı yerlerde bitwise and diyor, aynı şeyler sanırım?) işlemine sokup ctpop yaptığımda, bitmap’de (1 &lt;&lt; n)’den itibaren kaç tane 1 olduğunu saymış oluyorum ve bu da bana array’deki indeximi veriyor. Çok mantıklı.</p>
<p>Bu arada kullandığınız dile göre bu işlemi daha kolay bir şekilde yapabilirsiniz. Bazı diller(Java’da <code>Integer.bitcount</code>, Common Lisp’de <code>logcount</code> gibi) direkt olarak <code>bitCount</code> gibi fonksiyonlar sunuyor. Bir de ben Common Lisp’de hiç kaydır 1 çıkart falan demeden direkt “şu bitle şu bit arasında kaç 1 olduğunu say” şeklinde bir fonksiyon yazdım, bitwise trickler yapmadan, şöyle:</p>
<pre><code>(defun ctpop (bitmap &amp;key (start 0) (end 32))
  (logcount (ldb (byte (- end start) start) bitmap)))</code></pre>]]></summary>
</entry>
<entry>
    <title>Sıralama algoritmaları ve dillerin kendi sıralama fonksiyonları</title>
    <link href="http://osa1.net/posts/2011-10-09-siralama-algoritmalari-ve-dillerin-kendi-siralama-fonksiyonlari.html" />
    <id>http://osa1.net/posts/2011-10-09-siralama-algoritmalari-ve-dillerin-kendi-siralama-fonksiyonlari.html</id>
    <published>2011-10-09T00:00:00Z</published>
    <updated>2011-10-09T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Uzun uzun kod örnekleri yazmıştım ama bir yerden sonra sıkıldım. Bugün öğrendiğim birkaç şeyi özet geçeyim:</p>
<ul>
<li><p>Sort işlemini lazy olarak yapmak süper. Çoğu zaman tüm dizinin sıralı haline ihtiyaç duymuyoruz ve bu şekilde arama yapmak karşılaştırma/fonksiyon çağrı sayısnı çok azaltıyor. Yine önce dilin sağladığı imkanları denemekte yarar var. Örneğin kendi yaptığım testlerde, 1000 elemanlı bir diziyi Python’ın <code>sorted()</code> fonksiyonu ile sıralamam, lazy bir quicksort(generator ile) yazıp az hesap yapmamdan 10 kat daha hızlı oldu. İnanılmaz(bu fark tabii ki eleman sayısı arttıkça açılacaktır).</p></li>
<li><p>Aynı şey Clojure için de geçerli. Lazy sort yazacağım diye uğraşmaktansa, builtin <code>sort</code> fonksiyonu ile sıralayabilirsiniz. Kendi yaptığım testlerde, içi Integer dolu diziyi Clojure’un <code>sort</code> fonksiyonuyla çok bariz bir şekilde daha hızlı sıraladım(tabii bu biraz da sıraladığım elemanların Integer olmasıyla alakalıydı sanırım, kodu takip ettiğimde, bu seq’in önce Object[] array’ine dönüştürülüp, karşılaştırma sorasında da her bir elemanın double’a cast edilerek karşılaştırdığını gördüm, bunların çoğu Clojure ile değil Java ile yapılıyor).</p></li>
<li><p><a href="http://en.wikipedia.org/wiki/Timsort">Timsort</a> diye bir sıralama algoritması var. İlk olarak Python için yazılmış. Şu anda Python, Java SE 7 ve Android’de kullanılıyor. Bu hızın kaynağı sanırım bu algoritma.</p></li>
<li><p>Python’da fonksiyon çağrıları çok masraflı. Denemek için bir quicksort algoritmasını binlerce elemanlı bir listede, her karşılaştırma için bir fonksiyon çağırarak ve bir bir builtin Python operatorunu kullanarak(bu operatorlerin de sonuca __gt__ veya __lt__ gibi fonksiyonları çağırdıklarının farkındayım, ama sonuçta testlerimde fonksyion çağrı sayısını arttırdım) denedim. Performans farkı çok bariz. Filter, map gibi higher-order fonksiyonlar list comprehension’lardan performans açısından çok farklı değiller ama(bkz. <a href="http://stackoverflow.com/questions/1247486/python-list-comprehension-vs-map">ilgili SO</a> başlığı). <strong>Haftalar sonra gelen düzenleme:</strong> Dropbox ekibi bloglarında küçük bir Python kodunun hızlandırılması hakkında <a href="http://tech.dropbox.com/?p=89">şöyle</a> güzel bir yazı yazmış. Sadece fonksiyon çağrısını kaldırarak %15 performans artışı elde etmişler. Bunun gibi daha bir sürü ipucu var. Mutlaka okuyun.</p></li>
</ul>
<p>Şimdilik bu kadar.</p>]]></summary>
</entry>
<entry>
    <title>Clojure ve bir 4Clojure problemi</title>
    <link href="http://osa1.net/posts/2011-09-25-clojure-ve-bir-4clojure-problemi.html" />
    <id>http://osa1.net/posts/2011-09-25-clojure-ve-bir-4clojure-problemi.html</id>
    <published>2011-09-25T00:00:00Z</published>
    <updated>2011-09-25T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Clojure(ve genel olarak Lisp dilleri) ile bir süredir ilgileniyorum, canım sıkıldıkça <a href="http://4clojure.com/">4clojure</a>’daki problemleri çözüyordum(bu arada Clojure’a başalyan herkese tavsiye ederim, sitenin en güzel yanı, problemi çözdükten sonra başkalarının çözümlerini görebiliyorsunuz, ve çoğu zaman problemi çözmüş birkaç Clojure geliştirici/katkıcısı bulabiliyorsunuz). Bir süre sonra, artık temellerini kavradığımı düşündüğümde, şu ana kadar en az çözülen probleme, <a href="http://4clojure.com/problem/117">‘For Science!’</a>a bir bakayım dedim. Problem tanıdık geldi. Bu problemin bir benzeriyle ilk kez <a href="http://osa1.net/finaldeyiz/">şurda bahsettiğim</a> programlama yarışmasında karşılaşmış, ve o zaman soruya saf saf bakmaktan başka birşey yapamamıştık. Daha sonra, ilk başta alakasız gibi gözüksede, aslında çok benzeyen bir halini, üzerinde çalıştığım bir oyunun yapım aşamasını kolaylaştırmak için çözmüştüm, ilgili yazı <a href="http://osa1.net/pygame-ve-duzensiz-sprite-sheetlerle-calismak/">şurda</a>.</p>
<p>Alternatif bir yöntem düşünmeden hemen daha önceden çözdüğüm gibi çözmeye başladım. Çözen Python kodunu birkaç dakika içerisinde yazdım. Algoritmam şu şekilde: gezilebilir olup birbirlerine komşu olan tüm alanları grupluyorum, daha sonra eğer başlangıç ve hedef aynı grupdaysa, birbirlerine erişebilirler demektir.</p>
<p>Python koduyla açıklamak daha kolay:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><a class="sourceLine" id="cb1-1" title="1">pos_m <span class="op">=</span> <span class="va">None</span></a>
<a class="sourceLine" id="cb1-2" title="2">pos_c <span class="op">=</span> <span class="va">None</span></a>
<a class="sourceLine" id="cb1-3" title="3">groups <span class="op">=</span> []</a></code></pre></div>
<p>Burda <code>pos_m</code>, problemdeki fare(mouse - M)nin başlangıç noktasını temsil ediyor. Alanı gezerken fareyle karşılaştığımızda bunu atayacağız. Aynı şekilde <code>pos_c</code> de peynir(cheese)in yeri.</p>
<p><code>groups</code> da birbirlerine komşu olan tüm noktaların oluşturduğu grupları tutacak.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><a class="sourceLine" id="cb2-1" title="1"><span class="kw">def</span> check_adjacency(pos, x, y):</a>
<a class="sourceLine" id="cb2-2" title="2">    difx <span class="op">=</span> <span class="bu">abs</span>(pos[<span class="op">^</span><span class="dv">0</span>]x)</a>
<a class="sourceLine" id="cb2-3" title="3">    dify <span class="op">=</span> <span class="bu">abs</span>(pos[<span class="op">^</span><span class="dv">1</span>]y)</a>
<a class="sourceLine" id="cb2-4" title="4">    <span class="cf">return</span> (difx <span class="op">==</span> <span class="dv">1</span> <span class="kw">and</span> dify <span class="op">==</span> <span class="dv">0</span>) <span class="kw">or</span> (difx <span class="op">==</span> <span class="dv">0</span> <span class="kw">and</span> dify <span class="op">==</span> <span class="dv">1</span>)</a></code></pre></div>
<p>Bu fonksiyonun yaptığı, bir (X, Y) ikilisinden oluşan noktanın, (x, y) noktasına komşu olup olmadığını dönmek. Burda komşu olma şartı, iki noktanın üst üste veya yan yana bulunmaları(haritada çarpraz ilerleme olmadığından, çarprazdakiler komşu sayılmıyor).</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><a class="sourceLine" id="cb3-1" title="1"><span class="kw">def</span> find_groups(x, y):</a>
<a class="sourceLine" id="cb3-2" title="2">    r <span class="op">=</span> []</a>
<a class="sourceLine" id="cb3-3" title="3">    <span class="cf">for</span> group <span class="kw">in</span> groups:</a>
<a class="sourceLine" id="cb3-4" title="4">        <span class="cf">for</span> pos <span class="kw">in</span> group:</a>
<a class="sourceLine" id="cb3-5" title="5">            <span class="cf">if</span> check_adjacency(pos, x, y):</a>
<a class="sourceLine" id="cb3-6" title="6">                r.append(group)</a>
<a class="sourceLine" id="cb3-7" title="7">                <span class="cf">break</span></a>
<a class="sourceLine" id="cb3-8" title="8">    <span class="cf">return</span> r</a></code></pre></div>
<p><code>find_groups</code>, (x, y) noktasının komşu olduğu grupların bir listesini dönüyor. Örneğin bir aşamada elimizde [(1, 1), (2, 2)] ve [(2, 4)] grupları varsa ve biz (2, 3) noktasının komşu olduğu grupları arıyorsak, bu iki grupu bize döndürecek. Bu durumda bu iki grupu birleştirmemiz gerekcek çükü artık bu ikisi birbirine (2, 3) ile bağlı.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><a class="sourceLine" id="cb4-1" title="1"><span class="kw">def</span> merge_groups(grps):</a>
<a class="sourceLine" id="cb4-2" title="2">    <span class="cf">for</span> group <span class="kw">in</span> grps[<span class="dv">1</span>:]:</a>
<a class="sourceLine" id="cb4-3" title="3">        grps[<span class="op">^</span><span class="dv">0</span>]<span class="op">+=</span> group</a>
<a class="sourceLine" id="cb4-4" title="4">        groups.remove(group)</a></code></pre></div>
<p>Birleştirme işlemini de bu yapıyor işte.</p>
<p>Bundan sonrası basit zaten, teker teker gez, grupları bul, grup yoksa yeni oluştur, varsa onu genişlet, birden fazlaysa birleştir. Kodu takip etmek için kullandığım print statement’larını silmeden koyuyorum:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode python"><code class="sourceCode python"><a class="sourceLine" id="cb5-1" title="1"><span class="cf">for</span> y <span class="kw">in</span> <span class="bu">xrange</span>(<span class="bu">len</span>(test_grid)):</a>
<a class="sourceLine" id="cb5-2" title="2">    <span class="cf">for</span> x <span class="kw">in</span> <span class="bu">xrange</span>(<span class="bu">len</span>(test_grid[<span class="op">^</span><span class="dv">0</span>]):</a>
<a class="sourceLine" id="cb5-3" title="3">        char <span class="op">=</span> test_grid[y][x]</a>
<a class="sourceLine" id="cb5-4" title="4">        <span class="bu">print</span> x, y, char,</a>
<a class="sourceLine" id="cb5-5" title="5">        <span class="cf">if</span> char <span class="op">==</span> <span class="st">&#39;#&#39;</span>:</a>
<a class="sourceLine" id="cb5-6" title="6">            <span class="bu">print</span> <span class="st">&quot;block&quot;</span></a>
<a class="sourceLine" id="cb5-7" title="7">        <span class="cf">else</span>:</a>
<a class="sourceLine" id="cb5-8" title="8">            <span class="cf">if</span> char <span class="op">==</span> <span class="st">&#39;M&#39;</span>:</a>
<a class="sourceLine" id="cb5-9" title="9">                pos_m <span class="op">=</span> (x, y)</a>
<a class="sourceLine" id="cb5-10" title="10">            <span class="cf">elif</span> char <span class="op">==</span> <span class="st">&#39;C&#39;</span>:</a>
<a class="sourceLine" id="cb5-11" title="11">                pos_c <span class="op">=</span> (x, y)</a>
<a class="sourceLine" id="cb5-12" title="12">            grps <span class="op">=</span> find_groups(x, y)</a>
<a class="sourceLine" id="cb5-13" title="13">            <span class="cf">if</span> <span class="bu">len</span>(grps) <span class="op">&gt;</span> <span class="dv">1</span>:</a>
<a class="sourceLine" id="cb5-14" title="14">                merge_groups(grps)</a>
<a class="sourceLine" id="cb5-15" title="15">                grps[<span class="op">^</span><span class="dv">0</span>]append((x, y))</a>
<a class="sourceLine" id="cb5-16" title="16">                <span class="bu">print</span> <span class="st">&quot;merge&quot;</span></a>
<a class="sourceLine" id="cb5-17" title="17">            <span class="cf">elif</span> <span class="bu">len</span>(grps) <span class="op">==</span> <span class="dv">0</span>:</a>
<a class="sourceLine" id="cb5-18" title="18">                groups.append([(x, y)])</a>
<a class="sourceLine" id="cb5-19" title="19">                <span class="bu">print</span> <span class="st">&quot;new group&quot;</span></a>
<a class="sourceLine" id="cb5-20" title="20">            <span class="cf">else</span>:</a>
<a class="sourceLine" id="cb5-21" title="21">                grps[<span class="op">^</span><span class="dv">0</span>]append((x, y))</a>
<a class="sourceLine" id="cb5-22" title="22">                <span class="bu">print</span> <span class="st">&quot;append&quot;</span></a>
<a class="sourceLine" id="cb5-23" title="23"><span class="bu">print</span> pos_m, pos_c</a>
<a class="sourceLine" id="cb5-24" title="24"><span class="cf">for</span> group <span class="kw">in</span> groups:</a>
<a class="sourceLine" id="cb5-25" title="25">    <span class="cf">if</span> pos_m <span class="kw">in</span> group <span class="kw">and</span> pos_c <span class="kw">in</span> group:</a>
<a class="sourceLine" id="cb5-26" title="26">        <span class="bu">print</span> <span class="st">&quot;M can reach C&quot;</span></a></code></pre></div>
<p>Çok da güzel bir kod olmayabilir(örneğin liste içinde listelerde lineer arama yerine, <code>set</code> kullanılabilir, Clojure kodumda yaptığım gibi) ama problemi hızlıca çözmek için işimi gördü.</p>
<p>Fonksiyonel programlama yolunu henüz çözebilmiş değilim. Hala daha çoğu zaman yaptığım, bir algoritmadaki değişen durumları(<code>state</code>) bir <code>loop</code> içine alıp, tail-call yapmak(Clojure’da <code>recur</code> yani, bu arada <code>recur</code>’un tail-call optimization olmadığının farkındayım).</p>
<p>Yukarıdaki Python fonksiyonlarının Clojure karşılıklarını şu şekilde yazdım:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode clojure"><code class="sourceCode clojure"><a class="sourceLine" id="cb6-1" title="1">(<span class="bu">defn</span><span class="fu"> abs</span></a>
<a class="sourceLine" id="cb6-2" title="2">  <span class="st">&quot;Absolute value of n&quot;</span></a>
<a class="sourceLine" id="cb6-3" title="3">  [n]</a>
<a class="sourceLine" id="cb6-4" title="4">  (<span class="kw">if</span> (<span class="kw">neg?</span> n)</a>
<a class="sourceLine" id="cb6-5" title="5">    (<span class="kw">-</span> n)</a>
<a class="sourceLine" id="cb6-6" title="6">    n))</a>
<a class="sourceLine" id="cb6-7" title="7">(<span class="bu">defn</span><span class="fu"> check-adjacency</span></a>
<a class="sourceLine" id="cb6-8" title="8">  [[posx posy] x y]</a>
<a class="sourceLine" id="cb6-9" title="9">  (<span class="kw">let</span> [difx (abs (<span class="kw">-</span> posx x))</a>
<a class="sourceLine" id="cb6-10" title="10">        dify (abs (<span class="kw">-</span> posy y))]</a>
<a class="sourceLine" id="cb6-11" title="11">    (<span class="kw">or</span> (<span class="kw">and</span> (<span class="kw">=</span> difx <span class="dv">1</span>) (<span class="kw">=</span> dify <span class="dv">0</span>)) (<span class="kw">and</span> (<span class="kw">=</span> difx <span class="dv">0</span>) (<span class="kw">=</span> dify <span class="dv">1</span>)))))</a>
<a class="sourceLine" id="cb6-12" title="12">(<span class="bu">defn</span><span class="fu"> find-adjacent-sets</span></a>
<a class="sourceLine" id="cb6-13" title="13">  [sets [x y]]</a>
<a class="sourceLine" id="cb6-14" title="14">  (<span class="kw">set</span> (<span class="kw">filter</span> (<span class="kw">fn</span> [<span class="kw">set</span>]</a>
<a class="sourceLine" id="cb6-15" title="15">                 (<span class="kw">some</span> (<span class="kw">fn</span> [p]</a>
<a class="sourceLine" id="cb6-16" title="16">                         (check-adjacency p x y))</a>
<a class="sourceLine" id="cb6-17" title="17">                       <span class="kw">set</span>))</a>
<a class="sourceLine" id="cb6-18" title="18">               sets)))</a>
<a class="sourceLine" id="cb6-19" title="19">(<span class="bu">defn</span><span class="fu"> get-char</span></a>
<a class="sourceLine" id="cb6-20" title="20">  [grid [x y]]</a>
<a class="sourceLine" id="cb6-21" title="21">  (<span class="kw">get</span> (grid y) x))</a></code></pre></div>
<p>Daha sonra bunları kullanarak problemin çözümü:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode clojure"><code class="sourceCode clojure"><a class="sourceLine" id="cb7-1" title="1">(<span class="bu">defn</span><span class="fu"> can-reach?</span></a>
<a class="sourceLine" id="cb7-2" title="2">  [grid]</a>
<a class="sourceLine" id="cb7-3" title="3">  (<span class="kw">let</span> [rang (<span class="kw">for</span> [y (<span class="kw">range</span> (<span class="kw">count</span> grid)) </a>
<a class="sourceLine" id="cb7-4" title="4">                   x (<span class="kw">range</span> (<span class="kw">count</span> (<span class="kw">first</span> grid)))] [x y])]</a>
<a class="sourceLine" id="cb7-5" title="5">    (<span class="kw">loop</span> [positions rang</a>
<a class="sourceLine" id="cb7-6" title="6">           sets #{}</a>
<a class="sourceLine" id="cb7-7" title="7">           posm <span class="va">nil</span></a>
<a class="sourceLine" id="cb7-8" title="8">           posc <span class="va">nil</span>]</a>
<a class="sourceLine" id="cb7-9" title="9">      (<span class="kw">if</span> (<span class="kw">nil?</span> positions)</a>
<a class="sourceLine" id="cb7-10" title="10">        (<span class="kw">let</span> [m-set (<span class="kw">first</span> (<span class="kw">filter</span> #(<span class="va">%</span> posm) sets))</a>
<a class="sourceLine" id="cb7-11" title="11">              c-set (<span class="kw">first</span> (<span class="kw">filter</span> #(<span class="va">%</span> posc) sets))]</a>
<a class="sourceLine" id="cb7-12" title="12">          (<span class="kw">=</span> m-set c-set))</a>
<a class="sourceLine" id="cb7-13" title="13">        (<span class="kw">let</span> [pos (<span class="kw">first</span> positions)</a>
<a class="sourceLine" id="cb7-14" title="14">              ch (get-char grid pos)</a>
<a class="sourceLine" id="cb7-15" title="15">              adj-sets (find-adjacent-sets sets pos)</a>
<a class="sourceLine" id="cb7-16" title="16">              set-count (<span class="kw">count</span> adj-sets)]</a>
<a class="sourceLine" id="cb7-17" title="17">          (<span class="kw">if</span> (<span class="kw">not=</span> ch <span class="at">\#</span>)</a>
<a class="sourceLine" id="cb7-18" title="18">            (<span class="kw">recur</span> (<span class="kw">next</span> positions)</a>
<a class="sourceLine" id="cb7-19" title="19">                   (<span class="kw">conj</span> (<span class="kw">difference</span> sets adj-sets) (<span class="kw">union</span> (<span class="kw">apply</span> <span class="kw">union</span> adj-sets) #{pos}))</a>
<a class="sourceLine" id="cb7-20" title="20">                   (<span class="kw">if</span> (<span class="kw">=</span> ch <span class="ch">\M</span>) pos posm)</a>
<a class="sourceLine" id="cb7-21" title="21">                   (<span class="kw">if</span> (<span class="kw">=</span> ch <span class="ch">\C</span>) pos posc))</a>
<a class="sourceLine" id="cb7-22" title="22">            (<span class="kw">recur</span> (<span class="kw">next</span> positions)</a>
<a class="sourceLine" id="cb7-23" title="23">                   sets</a>
<a class="sourceLine" id="cb7-24" title="24">                   posm</a>
<a class="sourceLine" id="cb7-25" title="25">                   posc)))))))</a></code></pre></div>
<p>4clojure çözümlerde birden fazla fonksiyon kabul etmediğinden, tüm yardımcı fonksiyon tanımlarımı ana fonksiyonumun içine almam gerekti. 4clojure’a yolladığım çözüm <a href="https://gist.github.com/1240517">şurda</a>.</p>
<hr />
<p>Clojure hakkında karmaşık duygular içerisindeyim(eheh, bir programlama dili hakkında böyle bir cümle kurmak). Pek çok ileri-seviye özelliklerini henüz bilmiyorum. Fonksiyonel programlamayı da, yukarıda bahsettiğim gibi, henüz çözebilmiş değilim. Macroları şu ana kadar hiç kullanmadım. Bu dönem sonuna kadar SICP’in ilk 3 bölümünü bitirip, tüm alıştırma çözümlerini yayınlamayı planlıyorum(ilk bölüm bitti, ikincisi bitmek üzere, birkaç alıştırmayı çözemedim gerçi). Daha sonra McCarthy’nin ilk Lispini bir dilde(büyük ihtimalle C olacak) implement ettikten sonra muhtemelen <a href="http://en.wikipedia.org/wiki/Type_theory">type theory</a>ye dalmak için Haskell(veya daha uygun başka bir Lisp dili) ile uğraşacağım(sonunda muhtemelen bu dediklerimin yarısını falan yapmış olacağım ama olsun eheh).</p>
<p>Bu arada birşey farkettim, bir süredir çeşitli programlama problemleriyle ilgileniyorum, bir de yarışma tecrübemiz oldu ve C ile katıldık. C böyle bir iş için seçilebilecek en kötü alternatif. C’de elinizden hiçbir veri yapısı ve veri yapıları üzerinde işlemler yapabileceğiniz hiçbir fonksiyon yok. Çoğu zaman Java, C++ ve Python gibi alternatifler de oluyor bu gibi problemlerde. Java’da zaten elinizin altında yüzlerce sınıf var. C++’da STL var, Python’da zaten bir sürü builtin veri yapısı var. C ile ne gerekiyorsa yazmak zorundasınız. Aslında bu gibi yarışlamarda daha adil olması açısından C kodlarını <code>glib</code> ile derleyebilirler. Performans deseniz, çoğu zaman takıldığınız nokta performans olmuyor(eğer problemi C++ veya en kötü ihtimalle Java ile çözmüşseniz). Kısaca, C ile çözmeye çalışmayın, en azından biraz STL bilip, C++ ile çözülebilir.</p>]]></summary>
</entry>
<entry>
    <title>Pygame ve düzensiz sprite sheetlerle çalışmak</title>
    <link href="http://osa1.net/posts/2011-09-08-pygame-ve-duzensiz-sprite-sheetlerle-calismak.html" />
    <id>http://osa1.net/posts/2011-09-08-pygame-ve-duzensiz-sprite-sheetlerle-calismak.html</id>
    <published>2011-09-08T00:00:00Z</published>
    <updated>2011-09-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Pazartesi günü başlayacak <a href="http://pyweek.org/">Pyweek</a>’e katılacağım, benim ilk oyunum olacağından daha en temel problemler bile benim için yeni, ve çözümlerini yavaş yavaş keşfediyorum. Birkaç gündür basit oyunlar yapıyorum ve iş bir yerden sonra animasyonlara geldi.</p>
<p>2d oyunlarla ilgilendiyseniz, animasyonların aslında sprite adı verilen png/gif/vs. dosyalarından oluştuğunu bilirsiniz. Animasyonlar çoğu zaman(AAA oyunladan bahsetmiyoruz tabii ki) birkaç kareden oluşuyor ve bunlar genelde tek bir dosyaya aralıklarla yerleştirilmiş oluyorlar. Bunlara sprite sheet deniyor. Örneğin bir karakter koşuyorsa, ilk kare, yukarıdan 100, soldan 50. pixelden itibaren, 40px yüksekliğinde ve 30px genişliğinde oluyor. Bir sonraki kare onun biraz yanında vs. Bu şekilde çalışmak gayet kolay oluyor. Bir kere büyük resmi yükledikten sonra, ondan <code>subsurface</code>lar oluşturuyorsunuz. Peki neden ayrı ayrı resimler değil? Bunun hakkında iki güzel kaynak: <a href="http://stackoverflow.com/questions/3473151/what-are-the-pros-and-cons-of-a-sprite-sheet-compared-to-an-image-sequence">1</a>, <a href="http://gamedev.stackexchange.com/questions/10417/sprite-sheet-or-multiple-resources">2</a>.</p>
<p>Çizim işinden hiç anlamadığımdan, sprite sheetleri genelde deviantart’dan ediniyorum. Fakat şu ana kadar basit bir şekilde kullanılabilir bir sprite sheet görmedim. Sprite sheetleri basitce ayrıştırmak için en azından spriteların resim üzerinde eşit aralıklarla falan bölünmesi lazım. Benim bulduklarımın hiçbiri bu şekilde değil. Ne eşit aralıklılar, ne de eşit boyutlu. Tüm kareleri tespit edebilmek için, ya elle ölçecektim, ya da benim için ölçecek bir program yazacaktım :) .</p>
<p>Tabii ki program yazdım. Aşağıda nasıl çalıştığının bir örneğini görebilirsiniz. Gösterdiğim sprite sheet’i tarayıp, birbirlerinden ayrılmış tüm parçaları bulup işaretliyor, mouse ile üzerine geldiğinizde, koordinatlarını ve boyutlarını yazıyor. Bunu sadece Pygame kullanarak yapıyor.(büyültmek için üzerine tıklayın)</p>
<p><a href="/images/sprite_parse2.png"><img src="/images/sprite_parse2_k.png" /></a></p>
<p>Biraz da işin en zevkli kısmından, problemin çözümünden ve algoritmadan bahsedeyim. Program şu şekilde çalışıyor:</p>
<p>Her bir pixel için, eğer pixel colorkey’e eşit değilse(colorkey saydam olacak kısmın rengi ve derinliği oluyor), pixelin içinde olduğu veya komşu olduğu grubu ara. Burda grup bir <code>pygame.Rect</code>. Yani dikdörtgensel bir alan. Eğer bu pixeli içeren bir grup yoksa, bu pixeli içeren en küçük Rect’i gruplara ekle. Eğer piksel Rect’in içindeyse, birşey yapma, komşuysa, Rect’i o pixeli kapsayacak şekilde büyült. Eğer bir pixel birden fazla gruba komşuysa(veya içindeyse), bu iki grubu birleştir. Grupların son hali de ekran görüntülerinde gördüğünüz kırmızı alanlar. Aşağıda bir de Travis Touchdown(No More Heroes’dan) sprite sheeti üzerinde çalışmasını görebilirsiniz.</p>
<p><a href="/images/sprite_parse3.png"><img src="/images/sprite_parse3_k.png" /></a></p>
<p>Böyle işte. Scripti <a href="https://gist.github.com/1204263">şurdan</a> görebilirsiniz. Konuyla alakalı her türlü algoritma öneri/tavsiye/eleştirisine açığım. Hatta mutlu olurum yani, acımasızca eleştirin lütfen :) .</p>]]></summary>
</entry>
<entry>
    <title>Pardus'da 2. haftadan notlar</title>
    <link href="http://osa1.net/posts/2011-08-14-pardusda-2--haftadan-notlar.html" />
    <id>http://osa1.net/posts/2011-08-14-pardusda-2--haftadan-notlar.html</id>
    <published>2011-08-14T00:00:00Z</published>
    <updated>2011-08-14T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Hafta başında projeler dağıtılmıştı ve bir haftadır üzerlerinde çalışıyoruz. Benim için en ilginç kısım, buraya gelirken yapma ihtimalimin en az olduğunu düşündüğüm işi yapıyor olmak. Web development :P .</p>
<p><a href="http://osmanbaskaya.blogspot.com/">Osman Başkaya</a> ile beraber, <a href="http://packages.pardus.org.tr/">packages.pardus</a>’u daha güzel bir hale getirmek için çalışıyoruz. Şu andaki sayfayı, <a href="https://admin.fedoraproject.org/pkgdb/">Fedora</a>’nın, <a href="http://packages.debian.org/lenny/a2ps">Debian</a>’ın ve <a href="http://www.archlinux.org/packages/">Arch</a>’ınkilere benzer bir işlev/görünüm kazandırmaya çalışıyoruz.</p>
<p>Osman da ben de tasarımdan anlamadığımız için, <a href="http://projects.archlinux.org/archweb.git/">Archweb</a>’in tasarımı üzerinden gidiyoruz. Muhtemelen bizden sonra başkalarının tasarım ile oynaması gerekecek. Biz sadece işlev ile ilgileniyoruz.</p>
<p>Bir yandan birkaç farklı depodan binlerce paketin kaydını tutmak, güncellemeleri webe yansıtmak için scriptler hazırlıyoruz. Kimisi tek kullanımlık, kimisi depo her güncellendiğinde çalışacak şekilde. Sonuçta şu anki packages.pardus’dan çok daha işlevsel(istatistik ekranı, daha detaylı bilgiler) ve güzel görünümlü birşey çıkacak gibi.</p>
<p>Bu hafta Osman ile şu ana kadar hiç denemediğim birşey deneme fırsatımız da oldu. Pair programming. Sanırım 2 gün sadece pair-programming yaptık. Genel olarak, uzun süreler değil de, programın doğru kısımlarında doğru miktarda(süre olarak) yapılan pair programming’in gayet verimli olduğunu söyleyebilirim. Çok fazla tecrübem yok tabii ki ama güzel bir tecrübeydi, epey eğlendik. Projenin ihtiyaçlarını karşılayacak Django modellerini ve gerekli XML dosyalarını veritabanımıza aktaracak scriptlerden birini tamamen bıu şekilde yazdık.</p>
<p>Bu arada, şu ana kadar çalıştığım en büyük program/proje üzerinde çalıştığımdan şu ana kadar ihtiyacım olmayan şeylere ihtiyaç duydum. İyi bir Django IDE’si gibi. Projeye başladığımız ikinci günde, bazı şeyleri Vim ile yapmak artık dayanılmaz olduğundan(örneğin bir modelde yaptığım bir değişikliklik için view fonksiyonlarımdaki uyumsuzlukları tespit edip düzenleme, Django için debugging vs.) piyasadaki sağlam Django IDE’lerini test etmek istedim(WingIDE ve PyCharm). Wing ile aradığımı bulamadım(genel olarak çok güzel bir IDE ama Django için bana yukarıda bahsettiğim imkanları sunamadı), PyCharm’ı ise Linux ortamında kullanmak tam bir işkence. Swing ile yapıldığından, fontlar çok kötü gözüküyor ve render hızı çok kötü. Metin içerisinde gezinmek bile çok yavaş. Aynı problem Netbeans’de de var(yine Swing). Fontların kötü görüntüsü bir şekilde düzeltilebiliyor ama performans konusunda birşey yapılamıyor. Metin içerisinde gezmek işkence. Eclipse’de Java ile yazılmış olmasına rağmen, sanırım Swing yerine SWT kullanmasından dolayı, böyle problemler yok. Dolayısıyla Vim ile devam ediyoruz.</p>
<p><em>ha bir de kendime not: otomatik etiketleme sistemini düzelt. yazıları alakasız etiketlerle etiketleyip duruyorsun.</em></p>]]></summary>
</entry>
<entry>
    <title>Arduino ile ilk denemeler</title>
    <link href="http://osa1.net/posts/2011-07-06-arduino-ile-ilk-denemeler.html" />
    <id>http://osa1.net/posts/2011-07-06-arduino-ile-ilk-denemeler.html</id>
    <published>2011-07-06T00:00:00Z</published>
    <updated>2011-07-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Dün ilk Arduino’m elime geçti. Ne olup bittiğini biraz kavradıktan sonra bugün ilk denemelerimi yapmaya başladım. Aşağıdak, Python ile Arduino’ya serial port üzerinden komut gönderme denemelerimin ilki:</p>
<iframe width="425" height="349" src="http://www.youtube.com/embed/e1MC7re1r0s" frameborder="0" allowfullscreen>
</iframe>
<p>Arduino’nun yaptığı, serial port’u dinleyip, gelen verinin 0’dan büyük bir takam olduğunu varsayarak(<code>val -= '0'</code>), bu veriye göre ledleri yakıp söndürmek.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c"><code class="sourceCode c"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#define ledPin1 13</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#define ledPin2 12</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#define ledPin3 11</span></a>
<a class="sourceLine" id="cb1-4" title="4"></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="dt">int</span> val = <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-6" title="6"></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="dt">void</span> setup() {</a>
<a class="sourceLine" id="cb1-8" title="8">    pinMode(ledPin1, OUTPUT);</a>
<a class="sourceLine" id="cb1-9" title="9">    pinMode(ledPin2, OUTPUT);</a>
<a class="sourceLine" id="cb1-10" title="10">    pinMode(ledPin3, OUTPUT);</a>
<a class="sourceLine" id="cb1-11" title="11">    Serial.begin(<span class="dv">9600</span>);</a>
<a class="sourceLine" id="cb1-12" title="12">}</a>
<a class="sourceLine" id="cb1-13" title="13"></a>
<a class="sourceLine" id="cb1-14" title="14"><span class="dt">void</span> loop () {</a>
<a class="sourceLine" id="cb1-15" title="15">    <span class="cf">if</span> (Serial.available()) {</a>
<a class="sourceLine" id="cb1-16" title="16">        val = Serial.read();</a>
<a class="sourceLine" id="cb1-17" title="17">        val -= <span class="ch">&#39;0&#39;</span>;</a>
<a class="sourceLine" id="cb1-18" title="18"></a>
<a class="sourceLine" id="cb1-19" title="19">        <span class="cf">if</span> (val == <span class="dv">1</span>) {</a>
<a class="sourceLine" id="cb1-20" title="20">            digitalWrite(ledPin1, HIGH);</a>
<a class="sourceLine" id="cb1-21" title="21">        } <span class="cf">else</span> <span class="cf">if</span> (val == <span class="dv">2</span>) {</a>
<a class="sourceLine" id="cb1-22" title="22">            digitalWrite(ledPin2, HIGH);</a>
<a class="sourceLine" id="cb1-23" title="23">        } <span class="cf">else</span> <span class="cf">if</span> (val == <span class="dv">3</span>) {</a>
<a class="sourceLine" id="cb1-24" title="24">            digitalWrite(ledPin3, HIGH);</a>
<a class="sourceLine" id="cb1-25" title="25">        } <span class="cf">else</span> <span class="cf">if</span> (val == <span class="dv">4</span>) {</a>
<a class="sourceLine" id="cb1-26" title="26">            digitalWrite(ledPin1, LOW);</a>
<a class="sourceLine" id="cb1-27" title="27">        } <span class="cf">else</span> <span class="cf">if</span> (val == <span class="dv">5</span>) {</a>
<a class="sourceLine" id="cb1-28" title="28">            digitalWrite(ledPin2, LOW);</a>
<a class="sourceLine" id="cb1-29" title="29">        } <span class="cf">else</span> <span class="cf">if</span> (val == <span class="dv">6</span>) {</a>
<a class="sourceLine" id="cb1-30" title="30">            digitalWrite(ledPin3, LOW);</a>
<a class="sourceLine" id="cb1-31" title="31">        }</a>
<a class="sourceLine" id="cb1-32" title="32">    }</a>
<a class="sourceLine" id="cb1-33" title="33">}</a></code></pre></div>
<p>Python ve Pygame ile de klavyeyi izleyip, tuşların basılması veya bırakılması durumlarında serial port’a gerekli verileri gönderdim:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><a class="sourceLine" id="cb2-1" title="1"><span class="im">import</span> serial</a>
<a class="sourceLine" id="cb2-2" title="2"><span class="im">import</span> pygame</a>
<a class="sourceLine" id="cb2-3" title="3"></a>
<a class="sourceLine" id="cb2-4" title="4">s <span class="op">=</span> serial.Serial(<span class="st">&#39;/dev/ttyACM2&#39;</span>, <span class="dv">9600</span>)</a>
<a class="sourceLine" id="cb2-5" title="5">screen <span class="op">=</span> pygame.display.set_mode((<span class="dv">100</span>, <span class="dv">100</span>))</a>
<a class="sourceLine" id="cb2-6" title="6">clock <span class="op">=</span> pygame.time.Clock()</a>
<a class="sourceLine" id="cb2-7" title="7"></a>
<a class="sourceLine" id="cb2-8" title="8">keydwn <span class="op">=</span> {pygame.K_LEFT : <span class="st">&quot;1&quot;</span>,</a>
<a class="sourceLine" id="cb2-9" title="9">          pygame.K_RIGHT: <span class="st">&quot;2&quot;</span>,</a>
<a class="sourceLine" id="cb2-10" title="10">          pygame.K_DOWN : <span class="st">&quot;3&quot;</span>}</a>
<a class="sourceLine" id="cb2-11" title="11"></a>
<a class="sourceLine" id="cb2-12" title="12">keyup  <span class="op">=</span> {pygame.K_LEFT : <span class="st">&quot;4&quot;</span>,</a>
<a class="sourceLine" id="cb2-13" title="13">          pygame.K_RIGHT: <span class="st">&quot;5&quot;</span>,</a>
<a class="sourceLine" id="cb2-14" title="14">          pygame.K_DOWN : <span class="st">&quot;6&quot;</span>}</a>
<a class="sourceLine" id="cb2-15" title="15"></a>
<a class="sourceLine" id="cb2-16" title="16">running <span class="op">=</span> <span class="dv">1</span></a>
<a class="sourceLine" id="cb2-17" title="17"><span class="cf">while</span> running:</a>
<a class="sourceLine" id="cb2-18" title="18">    screen.fill((<span class="dv">00</span>, <span class="dv">00</span>, <span class="dv">00</span>))</a>
<a class="sourceLine" id="cb2-19" title="19">    <span class="cf">for</span> event <span class="kw">in</span> pygame.event.get():</a>
<a class="sourceLine" id="cb2-20" title="20">        <span class="cf">if</span> event.<span class="bu">type</span> <span class="op">==</span> pygame.QUIT:</a>
<a class="sourceLine" id="cb2-21" title="21">            running <span class="op">=</span> <span class="va">False</span></a>
<a class="sourceLine" id="cb2-22" title="22">        <span class="cf">elif</span> event.<span class="bu">type</span> <span class="op">==</span> pygame.KEYDOWN:</a>
<a class="sourceLine" id="cb2-23" title="23">            s.write(keydwn.get(event.key, <span class="st">&quot;&quot;</span>))</a>
<a class="sourceLine" id="cb2-24" title="24">        <span class="cf">elif</span> event.<span class="bu">type</span> <span class="op">==</span> pygame.KEYUP:</a>
<a class="sourceLine" id="cb2-25" title="25">            s.write(keyup.get(event.key, <span class="st">&quot;&quot;</span>))</a>
<a class="sourceLine" id="cb2-26" title="26"></a>
<a class="sourceLine" id="cb2-27" title="27">    time <span class="op">=</span> clock.tick(<span class="dv">30</span>)</a></code></pre></div>
<p>İlk deneme için gayet basit ve güzel :) . Aslında amacım, Python ve Pygame ile yaptığım şeyleri Clojure ile(Pygame kısmı için AWT gerekecekti sanırım) yapmaktı ama sırt ağrım bir yerden sonra dayanılmaz hale geldi(zaten çalışma ortamım rahat değil, bir de Arduino için masaya eğilince) ve bir an önce bitirmeye çalıştım. Bundan sonraki denemelerimi Clojure ile yapmaya çalışacağım.</p>
<p>Onun dışında, Arduino kodunu Pardus ortamında bir türlü derleyemedim, gerekli kütüphaneler/bağımlılıklar yüzünden. Bir ara onunla uğraşacağım.</p>]]></summary>
</entry>
<entry>
    <title>Bir sınav haftasında yapılanlar</title>
    <link href="http://osa1.net/posts/2011-06-23-bir-sinav-haftasinda-yapilanlar.html" />
    <id>http://osa1.net/posts/2011-06-23-bir-sinav-haftasinda-yapilanlar.html</id>
    <published>2011-06-23T00:00:00Z</published>
    <updated>2011-06-23T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Bugün çok sıkıldım öylesine birşeyler karalayacağım..</p>
<p>Sınav haftaları beklenenden çok farklı bir şekilde faydalı aslında. Sınav haftası geldiğinde birden bir odamı süpüresim geliyor mesela. Masamın tozunu alıyorum, bulaşıkları yıkıyorum falan. Mesela benim bu hafta 3 tane sınavım vardı ve şunu yaptım: <img src="/images/pyqt/1.png" /> <img src="/images/pyqt/2.png" /> <img src="/images/pyqt/4.png" /></p>
<p>Ne olduğuna gelirsek, kendim sürekli kullandığım basit bir scriptimi, daha esnek bir hale getirdim ve QT ile arayüz tasarladım. Programın yaptığı şey, gösterdiğim klasörleri(ve isteğe bağlı olarak onun alt klasörlerini) izleyerek, bir ekleme veya değişiklik(zaten olan bir dosyanın değiştirilmesi anlamında) olduğunda yine benim belirlediğim komutları dosyaya uyguluyor. Bunu yaparken, dosyanın formatına göre komutları giriyorum(şimdi aklıma geldi de, tüm formatlar için uygulanacak komutlar için bir ayar yapılabilir). Komutları girerken de, eklenen/değiştirilen dosyanın adını, formatını ve bulunduğu konumun tam adresini bir değişkende tutuyorum ve bu değişkenler komutta kullanılabiliyor. Örneğin yukarıdaki resimlerde kullandığım komutlardan biri <code>pyrcc4 _path_/_name_._frm_ &gt; _path_/../_name__rc.py</code>. Bu komutta <code>_path_</code> kısmı dosyanın bulunduğu konumun tam adresi, <code>_name_</code> kısmı dosyanın adı ve <code>_frm_</code> kısmı dosyanın formatıyla değiştiriliyor. Kapattığınızda task bar’a yerleşiyor ve dinlemeye geçiyor, daha sonra ordan çağırıp istediğiniz değişiklikleri yapabiliyorsunuz(komutlarda ve klasörlerde).</p>
<p><em>Bu arada 2. resimde gördüğünüz şey, <a href="http://blog.gokmengoksel.com/">Gökmen Göksel</a>’in <a href="http://svn.pardus.org.tr/uludag/trunk/pds/">PDS</a>’i yardımıyla hazırlandı.</em></p>
<p>Klasör ve komut ayalarını JSON ile saklıyorum. Python’da <code>list</code> ve <code>dict</code> veri yapılarının JSON ile saklamak çok kolay oluyor(JSON hakkında pek bilgim yok, diğer veri yapılarını da denemedim).</p>
<p>Bu arada QT hakkında birşeyler söyleyeyim, arayüz programlamadan nefret eden bana bile arayüz tasarımı yaptırdı bu kütüphane. Yine bu sınav haftasında, arşiv düzenleyicinin arayüzünü de GTK’dan QT’ye geçirmeye başladım(birkaç özellik de ekleyeceğim tabii). QT hakkında bir ara daha detaylı birşeyler yazmayı planlıyorum. Yine sınav haftalarından sınav haftalarına geliştirdiğim IRC istemcimi de QT ile yapıyorum. Arşiv düzenleyiciyi de birkaç güne adam eder(yeni özelliklerle beraber), github deposunu güncellerim herhalde.</p>
<p>Bu yukarıda resimlerini gördüğünüz programı da, dosya sistemi izlemeyle alakalı problemlerimi düzeltip, bir isim bulduğumda github’a koyacağım.</p>
<p><em>DÜZENLEME: Programın çalışan bir halini github’a koydum fakat henüz kurulabilir değil, yani dosyaları uygun bir yere taşımalı, daha sonra kaynak koddan çalıştırdığınız klasörü belirtmelisiniz. Kurulum scriptini herhalde birkaç güne hazırlarım.</em></p>]]></summary>
</entry>
<entry>
    <title>GUI programlama, IDEler, ve Python hakkında</title>
    <link href="http://osa1.net/posts/2011-05-22-gui-programlama--ideler--ve-python-hakkinda.html" />
    <id>http://osa1.net/posts/2011-05-22-gui-programlama--ideler--ve-python-hakkinda.html</id>
    <published>2011-05-22T00:00:00Z</published>
    <updated>2011-05-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Son birkaç gündür yoğun bir şekilde GUI programlama ve Java ile uğraştım. İlk başta 2 arkadaşımla beraber basit bir chat sunucu/istemcisi yazmaya başladık(<a href="https://github.com/osa1/simple-chat">kaynak koda</a> github depomuzdan erişebilirsiniz). Daha önceki tecrübelerimden (lisede web tasarım, daha sonra Python + GTK/QT ile arayüz denemelerim) arayüz tasarımından ne kadar nefret ettiğimi bildiğimden, bu projede ben sunucu ve istemci altyapısını hazırlamakla uğraştım. Fakat sonra bir ödev gereği, arayüz tasarımıyla da kendim uğraşmam gerekti.</p>
<p>Ödev Java ile yapılacaktı ve dolayıyısla arayüz olarak Swing kullandım. Başlangıç için Eclipse için <a href="http://code.google.com/javadevtools/wbpro/index.html">WindowBuilder</a> eklentisi ile ana çerçeve + layoutları oluşturup daha sonra elle yazdım. Bu süreçte şunu farkettim, adam gibi bir IDE, işleri daha önce tahmin edemeyeceğim kadar kolaylaştırıyor. Asıl olarak Python ile yazan biri olarak, birkaç gün öncesine kadar her işimde VIM kullanıyordum ve çok da memnundum(arayüz tasarımı yapmıyorum). Şu birkaç gün(sadece ödev için 1460 satır kod) bazı şeyleri farketmemi sağladı.</p>
<p>Onlarca sınıf, her sınıf için onlarca method, ve bu sınıflar arasında karışık ilişkilerin olduğu bir işle uğraşıyorsanız, iyi bir IDE şart. Dökümantasyonda geçirdiğiniz çok kısaltıyor.</p>
<p>Static typing çok hoş bir olay. Okula başladıktan sonra bol miktarda C(programlama yarışması) ve Java(ödevler) uğraşmam gerekti. Henüz sadece birkaç dili birşeyler üretebilecek seviyede biliyorum ve bu konuda çok da bilgili değilim, ama Python ile en çok dökümantasyon ve IDE sıkıntısı çekiyorum. Ücretli IDEleri denemedim ama denediğim tüm ücretsiz Python IDEleri Autocomplete konusunda çaresiz kalıyorlar. Python’da aşağıdaki gibi birşey görebilmek için herşeyimi(?!) verirdim:</p>
<p><img src="/images/ss/eclipse_autocomplete.png" /></p>
<p>Hatta mesela şöyle birşey yapabilseydim:</p>
<p><img src="/images/ss/eclipse_autocomplete1.png" /></p>
<p>Ama yok, örneğin PyDev daha aşağıdaki kodda çakılıyor:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><a class="sourceLine" id="cb1-1" title="1">cls <span class="op">=</span> Class1()</a>
<a class="sourceLine" id="cb1-2" title="2">cls.</a></code></pre></div>
<p>Daha burda bile, Class1’in methodlarını gösteremiyor. Direkt olarak <code>Class1.</code> şeklinde yazıp, autocomplete çalıştırırsak, methodları gösteriyor, bu iyi, fakat bu sefer de bound-unbound method farkını anlayamıyor ve bound methodları da gösteriyor. Ki bound methodlar bu şekilde çağırılamaz. Fail.</p>
<p>WingIDE diyenler için, personal sürümü, sanki “öyle gerekli özellikler çıkaralım ki, kimse almasın” diye düşünülerek hazırlanmış. O kısıtlı özellikleri çıkardığımızda, Vim ile de yapıyorum zaten geri kalanları. <a href="https://wingware.com/wingide/features/personal">Burdan bakın</a>. Professional sürümü de çok pahalı.</p>
<p>PyCharm diyenler için, Open Source lisansı ücretsiz, fakat <a href="http://www.opensource.org/docs/osd">Open Source Definition</a>’a uyan bir projeniz olmalı. Benim yok.</p>
<p>Eclipse, Java’nın verdiği acıyı inanılmaz derecede hafifletiyor. Yoksa sınıflar arasındaki saçma derecede karmaşık ilişkiler başka türlü çözülemez. Python’da ise, benzer karışıklıkta tasarlanmış(muhtemelen başka bir dilde, örneğin QT için C++) bir kütüphane ile çalışıyorsanız, acınızı hafifletecek hiçbir şey yok.</p>
<p>Konudan biraz sapacağım ama, Python hakkında beni sinirlendiren bir başka konu da, threading ve socket olayları. Ne zaman socket veya threading kullansam, mutlaka bir problemle karşılaşıyorum ve bunu ne zaman IRC’de sorsam, mutlaka birileri Twisted kullanmamı söylüyor. Kötü alışkanlıklardan, yanlış programlamadan vs bahsedip duruyorlar. Sanki Freenode #python kanalında, içinde şöyle bir kod olan bir sürü bot varmış gibi:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><a class="sourceLine" id="cb2-1" title="1"><span class="cf">if</span> <span class="st">&quot;socket&quot;</span> <span class="kw">in</span> msg <span class="kw">or</span> <span class="st">&quot;thread&quot;</span> <span class="kw">in</span> msg:</a>
<a class="sourceLine" id="cb2-2" title="2">    <span class="va">self</span>.reply(msg, <span class="st">&quot;Use twisted!!1 bad habits good code debugging bla bla bla&quot;</span>)</a></code></pre></div>
<p>Java’da yaklaşık bir hafta kadar önce kullanılabilr bir hale getirdiğimiz chat istemci/sunucusu, dilin kendi thread ve socketlerini kullanıyor. Thread ve socket kullanımı ile alakalı dökümantasyon hariç hiçbir yere baktığımı hatırlamıyorum. Python’dan gelen birisi olarak şaşırtıcı derecede kolay ve stabil oldu.</p>
<hr />
<p>Bir süredir kafamda kendi IRC istemcimi yazma fikri var. Şu anda yazabilmek için gerekli herşeyi biliyorum. Dün oturdum, Java ve Python’da IRC sunucusuna bağlanabilmek için gerekli en küçük kodu yazmaya karar verdim(arayüz ile beraber). Java’da, kendi socket ve thread sınıfları ve Swing ile kolayca yazdım(bu arada Swing’in ne kadar kötü gözüktüğüne dikkat, platform bağımsız olarak iğrenç gözüken bir arayüz kütüphanesi kendisi, ehehe):</p>
<p><img src="/images/ss/irc_client_java.png" /></p>
<p>Python’da QT kullandım. Fakat garip bir şekilde, ne zaman sunucudan bir mesaj gelse, QT segmentation fault veriyor:</p>
<pre><code>QObject::connect: Cannot queue arguments of type &#39;QTextCursor&#39;
(Make sure &#39;QTextCursor&#39; is registered using qRegisterMetaType().)
Segmentation fault</code></pre>
<p>IRC’de sorduğumda aldığım yanıtı tahmin edersiniz zaten.</p>
<p>Şimdi oturup düşünüyorum, bir yanda Java, sadece dilin kütüphaneleri ile sunucuya bağlanıp, mesaj gönderip aldığım kod, arayüz ile beraber hazır bile. Elimin altında Eclipse gibi bir IDE var. Python ile yapmak istersem, ekstra olarak uğraşmam gerekecek şeyler: PyQT’nin dökümantasyonu, Twisted’ın dökümantasyonu, Twisted’ı öğrenmek, QT Designer ile tasarımı koda çevirmek için ekstra bir işlem yapmak, daha sonra bir daha QT Designer ile değişiklik yapamamak(Eclipse + WindowBuilder ile tasarım/kod arasında değiştirmek tek tuş).</p>
<p>Adil olmak lazım, Java ile başta bahsettiğim projeye girişmeden önce, bunların farkında değildim. Python ile ise bu boyutta bir proje yapmadım. Küçük küçük bir sürü script(ki her biri, yazdığım satır sayısına göre işimi abartı derecede kolaylaştırıyor), en büyük projem kendi blogum.</p>
<p>Python bana programlamaya ilk başladığım günlerde bile birşeyler üretme imkanı verdi. Programlamaya başladığım sene(lisede yaptığım web tasarım + programlamayı saymıyorum), ilk önce kendi blogumu, daha sonra <a href="http://osa1.net/osa1-arsiv-duzenleme-scriptcigi-nautilus-scripti/">arşiv düzenleyici</a>yi yapabildim. Başka bir dille yapamazdım.</p>
<p>Şu anda static typed bir dilin bana sağladıklarını biliyorum(en azından bu projeleri yapmaya başlamadan öncekine göre çok daha iyi biliyorum). Şimdi dynamic typed bir dilin avantajlarını görmem lazım.</p>
<p>O yüzden IRC istemcimi her şeye rağmen Python ile yazacağım. Java ile yazarsam, kendimi tekrar etmekten başka birşey yapmamış olacağım. Twisted’ı ihtiyacım olduğu kadarıyla öğrenmeye bugün başlıyorum. Çalıştırılabilir bir hale gelir gelmez yorumlarımı buraya yazacağım.</p>
<p>(Bu arada Twisted’da IRC istemci protokolü hazır olarak var)</p>
<p>##VIM hakkında</p>
<p>Vim hakkında da birkaç birşey söyleyeyim hazır IDE/Editor muhabbetine girmişken. Yaklaşık 7-8 aydır(sanırım) Vim kullanıyorum, ve şu dakikadan sonra Vim’siz hiçbir şey yazamaz oldum. Maillerimi Vim ile yazıyorum(sylpheed), bloga yazıları Vim ile giriyorum(kendi eklentim), Eclipse’de <a href="http://www.viplugin.com/viplugin/">Vim eklentisi</a> kullanıyorum(o olmasa Eclipse kullanamazdım), Lisp ile uğraştığımda, Emacs kullanmam gerekiyor ve Emacs’i <a href="http://www.emacswiki.org/emacs-es/Vimpulse">vimpulse</a> ile kullanıyorum. Şöyle iyi böyle güzel diye anlatmayacağım, resmen bağımlı oldum. Arkadaşların, normal IDE/Editorlerde nasıl yazdıklarını görünce duygulu anlar yaşıyorum.</p>
<p>Bu yüzden IDE seçerken dikkat ettiğim konulardan biri de Vim desteği(veya eklentileri) oluyor. Eclipse o açıdan(viPlugin sağolsun) çok başarılı. Söz konusu Java olduğunda düşünüyorum da, Eclipse olmasa herhalde hiçbir şey yazamazdım.(bu arada WingIDE Vim tuşlarını destekliyormuş, ne kadar başarılıdır bilmiyorum)</p>]]></summary>
</entry>

</feed>
